// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: genomedb/v1/genome.proto

package genomedbv1connect

import (
	context "context"
	errors "errors"
	v1 "genomedb/protogen/genomedb/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GenomeServiceName is the fully-qualified name of the GenomeService service.
	GenomeServiceName = "genomedb.v1.GenomeService"
)

// GenomeServiceClient is a client for the genomedb.v1.GenomeService service.
type GenomeServiceClient interface {
	Get(context.Context, *connect_go.Request[v1.GenomeServiceGetRequest]) (*connect_go.Response[v1.GenomeServiceGetResponse], error)
	ListGenomeNames(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GenomeServiceListGenomeNamesResponse], error)
}

// NewGenomeServiceClient constructs a client for the genomedb.v1.GenomeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGenomeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GenomeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &genomeServiceClient{
		get: connect_go.NewClient[v1.GenomeServiceGetRequest, v1.GenomeServiceGetResponse](
			httpClient,
			baseURL+"/genomedb.v1.GenomeService/Get",
			opts...,
		),
		listGenomeNames: connect_go.NewClient[emptypb.Empty, v1.GenomeServiceListGenomeNamesResponse](
			httpClient,
			baseURL+"/genomedb.v1.GenomeService/ListGenomeNames",
			opts...,
		),
	}
}

// genomeServiceClient implements GenomeServiceClient.
type genomeServiceClient struct {
	get             *connect_go.Client[v1.GenomeServiceGetRequest, v1.GenomeServiceGetResponse]
	listGenomeNames *connect_go.Client[emptypb.Empty, v1.GenomeServiceListGenomeNamesResponse]
}

// Get calls genomedb.v1.GenomeService.Get.
func (c *genomeServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.GenomeServiceGetRequest]) (*connect_go.Response[v1.GenomeServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// ListGenomeNames calls genomedb.v1.GenomeService.ListGenomeNames.
func (c *genomeServiceClient) ListGenomeNames(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GenomeServiceListGenomeNamesResponse], error) {
	return c.listGenomeNames.CallUnary(ctx, req)
}

// GenomeServiceHandler is an implementation of the genomedb.v1.GenomeService service.
type GenomeServiceHandler interface {
	Get(context.Context, *connect_go.Request[v1.GenomeServiceGetRequest]) (*connect_go.Response[v1.GenomeServiceGetResponse], error)
	ListGenomeNames(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GenomeServiceListGenomeNamesResponse], error)
}

// NewGenomeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGenomeServiceHandler(svc GenomeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/genomedb.v1.GenomeService/Get", connect_go.NewUnaryHandler(
		"/genomedb.v1.GenomeService/Get",
		svc.Get,
		opts...,
	))
	mux.Handle("/genomedb.v1.GenomeService/ListGenomeNames", connect_go.NewUnaryHandler(
		"/genomedb.v1.GenomeService/ListGenomeNames",
		svc.ListGenomeNames,
		opts...,
	))
	return "/genomedb.v1.GenomeService/", mux
}

// UnimplementedGenomeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGenomeServiceHandler struct{}

func (UnimplementedGenomeServiceHandler) Get(context.Context, *connect_go.Request[v1.GenomeServiceGetRequest]) (*connect_go.Response[v1.GenomeServiceGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("genomedb.v1.GenomeService.Get is not implemented"))
}

func (UnimplementedGenomeServiceHandler) ListGenomeNames(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.GenomeServiceListGenomeNamesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("genomedb.v1.GenomeService.ListGenomeNames is not implemented"))
}
