// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/domainannotation"
	"genomedb/ent/domainannotationtotranscript"
	"genomedb/ent/transcript"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// DomainAnnotationToTranscript is the model entity for the DomainAnnotationToTranscript schema.
type DomainAnnotationToTranscript struct {
	config `json:"-"`
	// DomainAnnotationID holds the value of the "domain_annotation_id" field.
	DomainAnnotationID string `json:"domain_annotation_id,omitempty"`
	// TranscriptID holds the value of the "transcript_id" field.
	TranscriptID string `json:"transcript_id,omitempty"`
	// Start holds the value of the "start" field.
	Start int32 `json:"start,omitempty"`
	// Stop holds the value of the "stop" field.
	Stop int32 `json:"stop,omitempty"`
	// Score holds the value of the "score" field.
	Score float64 `json:"score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DomainAnnotationToTranscriptQuery when eager-loading is set.
	Edges DomainAnnotationToTranscriptEdges `json:"edges"`
}

// DomainAnnotationToTranscriptEdges holds the relations/edges for other nodes in the graph.
type DomainAnnotationToTranscriptEdges struct {
	// Domain holds the value of the domain edge.
	Domain *DomainAnnotation `json:"domain,omitempty"`
	// Transcript holds the value of the transcript edge.
	Transcript *Transcript `json:"transcript,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DomainAnnotationToTranscriptEdges) DomainOrErr() (*DomainAnnotation, error) {
	if e.loadedTypes[0] {
		if e.Domain == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: domainannotation.Label}
		}
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// TranscriptOrErr returns the Transcript value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DomainAnnotationToTranscriptEdges) TranscriptOrErr() (*Transcript, error) {
	if e.loadedTypes[1] {
		if e.Transcript == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: transcript.Label}
		}
		return e.Transcript, nil
	}
	return nil, &NotLoadedError{edge: "transcript"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DomainAnnotationToTranscript) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case domainannotationtotranscript.FieldScore:
			values[i] = new(sql.NullFloat64)
		case domainannotationtotranscript.FieldStart, domainannotationtotranscript.FieldStop:
			values[i] = new(sql.NullInt64)
		case domainannotationtotranscript.FieldDomainAnnotationID, domainannotationtotranscript.FieldTranscriptID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DomainAnnotationToTranscript", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DomainAnnotationToTranscript fields.
func (datt *DomainAnnotationToTranscript) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case domainannotationtotranscript.FieldDomainAnnotationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_annotation_id", values[i])
			} else if value.Valid {
				datt.DomainAnnotationID = value.String
			}
		case domainannotationtotranscript.FieldTranscriptID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transcript_id", values[i])
			} else if value.Valid {
				datt.TranscriptID = value.String
			}
		case domainannotationtotranscript.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				datt.Start = int32(value.Int64)
			}
		case domainannotationtotranscript.FieldStop:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stop", values[i])
			} else if value.Valid {
				datt.Stop = int32(value.Int64)
			}
		case domainannotationtotranscript.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				datt.Score = value.Float64
			}
		}
	}
	return nil
}

// QueryDomain queries the "domain" edge of the DomainAnnotationToTranscript entity.
func (datt *DomainAnnotationToTranscript) QueryDomain() *DomainAnnotationQuery {
	return (&DomainAnnotationToTranscriptClient{config: datt.config}).QueryDomain(datt)
}

// QueryTranscript queries the "transcript" edge of the DomainAnnotationToTranscript entity.
func (datt *DomainAnnotationToTranscript) QueryTranscript() *TranscriptQuery {
	return (&DomainAnnotationToTranscriptClient{config: datt.config}).QueryTranscript(datt)
}

// Update returns a builder for updating this DomainAnnotationToTranscript.
// Note that you need to call DomainAnnotationToTranscript.Unwrap() before calling this method if this DomainAnnotationToTranscript
// was returned from a transaction, and the transaction was committed or rolled back.
func (datt *DomainAnnotationToTranscript) Update() *DomainAnnotationToTranscriptUpdateOne {
	return (&DomainAnnotationToTranscriptClient{config: datt.config}).UpdateOne(datt)
}

// Unwrap unwraps the DomainAnnotationToTranscript entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (datt *DomainAnnotationToTranscript) Unwrap() *DomainAnnotationToTranscript {
	_tx, ok := datt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DomainAnnotationToTranscript is not a transactional entity")
	}
	datt.config.driver = _tx.drv
	return datt
}

// String implements the fmt.Stringer.
func (datt *DomainAnnotationToTranscript) String() string {
	var builder strings.Builder
	builder.WriteString("DomainAnnotationToTranscript(")
	builder.WriteString("domain_annotation_id=")
	builder.WriteString(datt.DomainAnnotationID)
	builder.WriteString(", ")
	builder.WriteString("transcript_id=")
	builder.WriteString(datt.TranscriptID)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(fmt.Sprintf("%v", datt.Start))
	builder.WriteString(", ")
	builder.WriteString("stop=")
	builder.WriteString(fmt.Sprintf("%v", datt.Stop))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", datt.Score))
	builder.WriteByte(')')
	return builder.String()
}

// DomainAnnotationToTranscripts is a parsable slice of DomainAnnotationToTranscript.
type DomainAnnotationToTranscripts []*DomainAnnotationToTranscript

func (datt DomainAnnotationToTranscripts) config(cfg config) {
	for _i := range datt {
		datt[_i].config = cfg
	}
}
