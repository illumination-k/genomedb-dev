// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/domainannotation"
	"genomedb/ent/domainannotationtotranscript"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainAnnotationToTranscriptUpdate is the builder for updating DomainAnnotationToTranscript entities.
type DomainAnnotationToTranscriptUpdate struct {
	config
	hooks    []Hook
	mutation *DomainAnnotationToTranscriptMutation
}

// Where appends a list predicates to the DomainAnnotationToTranscriptUpdate builder.
func (dattu *DomainAnnotationToTranscriptUpdate) Where(ps ...predicate.DomainAnnotationToTranscript) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.Where(ps...)
	return dattu
}

// SetDomainAnnotationID sets the "domain_annotation_id" field.
func (dattu *DomainAnnotationToTranscriptUpdate) SetDomainAnnotationID(s string) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.SetDomainAnnotationID(s)
	return dattu
}

// SetTranscriptID sets the "transcript_id" field.
func (dattu *DomainAnnotationToTranscriptUpdate) SetTranscriptID(s string) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.SetTranscriptID(s)
	return dattu
}

// SetStart sets the "start" field.
func (dattu *DomainAnnotationToTranscriptUpdate) SetStart(i int32) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.ResetStart()
	dattu.mutation.SetStart(i)
	return dattu
}

// AddStart adds i to the "start" field.
func (dattu *DomainAnnotationToTranscriptUpdate) AddStart(i int32) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.AddStart(i)
	return dattu
}

// SetStop sets the "stop" field.
func (dattu *DomainAnnotationToTranscriptUpdate) SetStop(i int32) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.ResetStop()
	dattu.mutation.SetStop(i)
	return dattu
}

// AddStop adds i to the "stop" field.
func (dattu *DomainAnnotationToTranscriptUpdate) AddStop(i int32) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.AddStop(i)
	return dattu
}

// SetScore sets the "score" field.
func (dattu *DomainAnnotationToTranscriptUpdate) SetScore(f float64) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.ResetScore()
	dattu.mutation.SetScore(f)
	return dattu
}

// AddScore adds f to the "score" field.
func (dattu *DomainAnnotationToTranscriptUpdate) AddScore(f float64) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.AddScore(f)
	return dattu
}

// SetDomainID sets the "domain" edge to the DomainAnnotation entity by ID.
func (dattu *DomainAnnotationToTranscriptUpdate) SetDomainID(id string) *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.SetDomainID(id)
	return dattu
}

// SetDomain sets the "domain" edge to the DomainAnnotation entity.
func (dattu *DomainAnnotationToTranscriptUpdate) SetDomain(d *DomainAnnotation) *DomainAnnotationToTranscriptUpdate {
	return dattu.SetDomainID(d.ID)
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (dattu *DomainAnnotationToTranscriptUpdate) SetTranscript(t *Transcript) *DomainAnnotationToTranscriptUpdate {
	return dattu.SetTranscriptID(t.ID)
}

// Mutation returns the DomainAnnotationToTranscriptMutation object of the builder.
func (dattu *DomainAnnotationToTranscriptUpdate) Mutation() *DomainAnnotationToTranscriptMutation {
	return dattu.mutation
}

// ClearDomain clears the "domain" edge to the DomainAnnotation entity.
func (dattu *DomainAnnotationToTranscriptUpdate) ClearDomain() *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.ClearDomain()
	return dattu
}

// ClearTranscript clears the "transcript" edge to the Transcript entity.
func (dattu *DomainAnnotationToTranscriptUpdate) ClearTranscript() *DomainAnnotationToTranscriptUpdate {
	dattu.mutation.ClearTranscript()
	return dattu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dattu *DomainAnnotationToTranscriptUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dattu.hooks) == 0 {
		if err = dattu.check(); err != nil {
			return 0, err
		}
		affected, err = dattu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DomainAnnotationToTranscriptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dattu.check(); err != nil {
				return 0, err
			}
			dattu.mutation = mutation
			affected, err = dattu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dattu.hooks) - 1; i >= 0; i-- {
			if dattu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dattu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dattu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dattu *DomainAnnotationToTranscriptUpdate) SaveX(ctx context.Context) int {
	affected, err := dattu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dattu *DomainAnnotationToTranscriptUpdate) Exec(ctx context.Context) error {
	_, err := dattu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dattu *DomainAnnotationToTranscriptUpdate) ExecX(ctx context.Context) {
	if err := dattu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dattu *DomainAnnotationToTranscriptUpdate) check() error {
	if v, ok := dattu.mutation.Start(); ok {
		if err := domainannotationtotranscript.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "DomainAnnotationToTranscript.start": %w`, err)}
		}
	}
	if v, ok := dattu.mutation.Stop(); ok {
		if err := domainannotationtotranscript.StopValidator(v); err != nil {
			return &ValidationError{Name: "stop", err: fmt.Errorf(`ent: validator failed for field "DomainAnnotationToTranscript.stop": %w`, err)}
		}
	}
	if _, ok := dattu.mutation.DomainID(); dattu.mutation.DomainCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DomainAnnotationToTranscript.domain"`)
	}
	if _, ok := dattu.mutation.TranscriptID(); dattu.mutation.TranscriptCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DomainAnnotationToTranscript.transcript"`)
	}
	return nil
}

func (dattu *DomainAnnotationToTranscriptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   domainannotationtotranscript.Table,
			Columns: domainannotationtotranscript.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeString,
					Column: domainannotationtotranscript.FieldDomainAnnotationID,
				},
				{
					Type:   field.TypeString,
					Column: domainannotationtotranscript.FieldTranscriptID,
				},
			},
		},
	}
	if ps := dattu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dattu.mutation.Start(); ok {
		_spec.SetField(domainannotationtotranscript.FieldStart, field.TypeInt32, value)
	}
	if value, ok := dattu.mutation.AddedStart(); ok {
		_spec.AddField(domainannotationtotranscript.FieldStart, field.TypeInt32, value)
	}
	if value, ok := dattu.mutation.Stop(); ok {
		_spec.SetField(domainannotationtotranscript.FieldStop, field.TypeInt32, value)
	}
	if value, ok := dattu.mutation.AddedStop(); ok {
		_spec.AddField(domainannotationtotranscript.FieldStop, field.TypeInt32, value)
	}
	if value, ok := dattu.mutation.Score(); ok {
		_spec.SetField(domainannotationtotranscript.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := dattu.mutation.AddedScore(); ok {
		_spec.AddField(domainannotationtotranscript.FieldScore, field.TypeFloat64, value)
	}
	if dattu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   domainannotationtotranscript.DomainTable,
			Columns: []string{domainannotationtotranscript.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: domainannotation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dattu.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   domainannotationtotranscript.DomainTable,
			Columns: []string{domainannotationtotranscript.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: domainannotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dattu.mutation.TranscriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   domainannotationtotranscript.TranscriptTable,
			Columns: []string{domainannotationtotranscript.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dattu.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   domainannotationtotranscript.TranscriptTable,
			Columns: []string{domainannotationtotranscript.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dattu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domainannotationtotranscript.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DomainAnnotationToTranscriptUpdateOne is the builder for updating a single DomainAnnotationToTranscript entity.
type DomainAnnotationToTranscriptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DomainAnnotationToTranscriptMutation
}

// SetDomainAnnotationID sets the "domain_annotation_id" field.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SetDomainAnnotationID(s string) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.SetDomainAnnotationID(s)
	return dattuo
}

// SetTranscriptID sets the "transcript_id" field.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SetTranscriptID(s string) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.SetTranscriptID(s)
	return dattuo
}

// SetStart sets the "start" field.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SetStart(i int32) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.ResetStart()
	dattuo.mutation.SetStart(i)
	return dattuo
}

// AddStart adds i to the "start" field.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) AddStart(i int32) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.AddStart(i)
	return dattuo
}

// SetStop sets the "stop" field.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SetStop(i int32) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.ResetStop()
	dattuo.mutation.SetStop(i)
	return dattuo
}

// AddStop adds i to the "stop" field.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) AddStop(i int32) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.AddStop(i)
	return dattuo
}

// SetScore sets the "score" field.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SetScore(f float64) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.ResetScore()
	dattuo.mutation.SetScore(f)
	return dattuo
}

// AddScore adds f to the "score" field.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) AddScore(f float64) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.AddScore(f)
	return dattuo
}

// SetDomainID sets the "domain" edge to the DomainAnnotation entity by ID.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SetDomainID(id string) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.SetDomainID(id)
	return dattuo
}

// SetDomain sets the "domain" edge to the DomainAnnotation entity.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SetDomain(d *DomainAnnotation) *DomainAnnotationToTranscriptUpdateOne {
	return dattuo.SetDomainID(d.ID)
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SetTranscript(t *Transcript) *DomainAnnotationToTranscriptUpdateOne {
	return dattuo.SetTranscriptID(t.ID)
}

// Mutation returns the DomainAnnotationToTranscriptMutation object of the builder.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) Mutation() *DomainAnnotationToTranscriptMutation {
	return dattuo.mutation
}

// ClearDomain clears the "domain" edge to the DomainAnnotation entity.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) ClearDomain() *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.ClearDomain()
	return dattuo
}

// ClearTranscript clears the "transcript" edge to the Transcript entity.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) ClearTranscript() *DomainAnnotationToTranscriptUpdateOne {
	dattuo.mutation.ClearTranscript()
	return dattuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) Select(field string, fields ...string) *DomainAnnotationToTranscriptUpdateOne {
	dattuo.fields = append([]string{field}, fields...)
	return dattuo
}

// Save executes the query and returns the updated DomainAnnotationToTranscript entity.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) Save(ctx context.Context) (*DomainAnnotationToTranscript, error) {
	var (
		err  error
		node *DomainAnnotationToTranscript
	)
	if len(dattuo.hooks) == 0 {
		if err = dattuo.check(); err != nil {
			return nil, err
		}
		node, err = dattuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DomainAnnotationToTranscriptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dattuo.check(); err != nil {
				return nil, err
			}
			dattuo.mutation = mutation
			node, err = dattuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dattuo.hooks) - 1; i >= 0; i-- {
			if dattuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dattuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dattuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DomainAnnotationToTranscript)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DomainAnnotationToTranscriptMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) SaveX(ctx context.Context) *DomainAnnotationToTranscript {
	node, err := dattuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) Exec(ctx context.Context) error {
	_, err := dattuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) ExecX(ctx context.Context) {
	if err := dattuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dattuo *DomainAnnotationToTranscriptUpdateOne) check() error {
	if v, ok := dattuo.mutation.Start(); ok {
		if err := domainannotationtotranscript.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "DomainAnnotationToTranscript.start": %w`, err)}
		}
	}
	if v, ok := dattuo.mutation.Stop(); ok {
		if err := domainannotationtotranscript.StopValidator(v); err != nil {
			return &ValidationError{Name: "stop", err: fmt.Errorf(`ent: validator failed for field "DomainAnnotationToTranscript.stop": %w`, err)}
		}
	}
	if _, ok := dattuo.mutation.DomainID(); dattuo.mutation.DomainCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DomainAnnotationToTranscript.domain"`)
	}
	if _, ok := dattuo.mutation.TranscriptID(); dattuo.mutation.TranscriptCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DomainAnnotationToTranscript.transcript"`)
	}
	return nil
}

func (dattuo *DomainAnnotationToTranscriptUpdateOne) sqlSave(ctx context.Context) (_node *DomainAnnotationToTranscript, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   domainannotationtotranscript.Table,
			Columns: domainannotationtotranscript.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeString,
					Column: domainannotationtotranscript.FieldDomainAnnotationID,
				},
				{
					Type:   field.TypeString,
					Column: domainannotationtotranscript.FieldTranscriptID,
				},
			},
		},
	}
	if id, ok := dattuo.mutation.DomainAnnotationID(); !ok {
		return nil, &ValidationError{Name: "domain_annotation_id", err: errors.New(`ent: missing "DomainAnnotationToTranscript.domain_annotation_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := dattuo.mutation.TranscriptID(); !ok {
		return nil, &ValidationError{Name: "transcript_id", err: errors.New(`ent: missing "DomainAnnotationToTranscript.transcript_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := dattuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !domainannotationtotranscript.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := dattuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dattuo.mutation.Start(); ok {
		_spec.SetField(domainannotationtotranscript.FieldStart, field.TypeInt32, value)
	}
	if value, ok := dattuo.mutation.AddedStart(); ok {
		_spec.AddField(domainannotationtotranscript.FieldStart, field.TypeInt32, value)
	}
	if value, ok := dattuo.mutation.Stop(); ok {
		_spec.SetField(domainannotationtotranscript.FieldStop, field.TypeInt32, value)
	}
	if value, ok := dattuo.mutation.AddedStop(); ok {
		_spec.AddField(domainannotationtotranscript.FieldStop, field.TypeInt32, value)
	}
	if value, ok := dattuo.mutation.Score(); ok {
		_spec.SetField(domainannotationtotranscript.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := dattuo.mutation.AddedScore(); ok {
		_spec.AddField(domainannotationtotranscript.FieldScore, field.TypeFloat64, value)
	}
	if dattuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   domainannotationtotranscript.DomainTable,
			Columns: []string{domainannotationtotranscript.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: domainannotation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dattuo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   domainannotationtotranscript.DomainTable,
			Columns: []string{domainannotationtotranscript.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: domainannotation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dattuo.mutation.TranscriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   domainannotationtotranscript.TranscriptTable,
			Columns: []string{domainannotationtotranscript.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dattuo.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   domainannotationtotranscript.TranscriptTable,
			Columns: []string{domainannotationtotranscript.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DomainAnnotationToTranscript{config: dattuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dattuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domainannotationtotranscript.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
