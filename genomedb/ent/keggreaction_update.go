// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/keggpathway"
	"genomedb/ent/keggreaction"
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeggReactionUpdate is the builder for updating KeggReaction entities.
type KeggReactionUpdate struct {
	config
	hooks    []Hook
	mutation *KeggReactionMutation
}

// Where appends a list predicates to the KeggReactionUpdate builder.
func (kru *KeggReactionUpdate) Where(ps ...predicate.KeggReaction) *KeggReactionUpdate {
	kru.mutation.Where(ps...)
	return kru
}

// SetName sets the "name" field.
func (kru *KeggReactionUpdate) SetName(s string) *KeggReactionUpdate {
	kru.mutation.SetName(s)
	return kru
}

// AddPathwayIDs adds the "pathways" edge to the KeggPathway entity by IDs.
func (kru *KeggReactionUpdate) AddPathwayIDs(ids ...string) *KeggReactionUpdate {
	kru.mutation.AddPathwayIDs(ids...)
	return kru
}

// AddPathways adds the "pathways" edges to the KeggPathway entity.
func (kru *KeggReactionUpdate) AddPathways(k ...*KeggPathway) *KeggReactionUpdate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kru.AddPathwayIDs(ids...)
}

// Mutation returns the KeggReactionMutation object of the builder.
func (kru *KeggReactionUpdate) Mutation() *KeggReactionMutation {
	return kru.mutation
}

// ClearPathways clears all "pathways" edges to the KeggPathway entity.
func (kru *KeggReactionUpdate) ClearPathways() *KeggReactionUpdate {
	kru.mutation.ClearPathways()
	return kru
}

// RemovePathwayIDs removes the "pathways" edge to KeggPathway entities by IDs.
func (kru *KeggReactionUpdate) RemovePathwayIDs(ids ...string) *KeggReactionUpdate {
	kru.mutation.RemovePathwayIDs(ids...)
	return kru
}

// RemovePathways removes "pathways" edges to KeggPathway entities.
func (kru *KeggReactionUpdate) RemovePathways(k ...*KeggPathway) *KeggReactionUpdate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kru.RemovePathwayIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kru *KeggReactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kru.hooks) == 0 {
		affected, err = kru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeggReactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kru.mutation = mutation
			affected, err = kru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kru.hooks) - 1; i >= 0; i-- {
			if kru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kru *KeggReactionUpdate) SaveX(ctx context.Context) int {
	affected, err := kru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kru *KeggReactionUpdate) Exec(ctx context.Context) error {
	_, err := kru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kru *KeggReactionUpdate) ExecX(ctx context.Context) {
	if err := kru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kru *KeggReactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   keggreaction.Table,
			Columns: keggreaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggreaction.FieldID,
			},
		},
	}
	if ps := kru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kru.mutation.Name(); ok {
		_spec.SetField(keggreaction.FieldName, field.TypeString, value)
	}
	if kru.mutation.PathwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   keggreaction.PathwaysTable,
			Columns: keggreaction.PathwaysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: keggpathway.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kru.mutation.RemovedPathwaysIDs(); len(nodes) > 0 && !kru.mutation.PathwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   keggreaction.PathwaysTable,
			Columns: keggreaction.PathwaysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: keggpathway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kru.mutation.PathwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   keggreaction.PathwaysTable,
			Columns: keggreaction.PathwaysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: keggpathway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keggreaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// KeggReactionUpdateOne is the builder for updating a single KeggReaction entity.
type KeggReactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeggReactionMutation
}

// SetName sets the "name" field.
func (kruo *KeggReactionUpdateOne) SetName(s string) *KeggReactionUpdateOne {
	kruo.mutation.SetName(s)
	return kruo
}

// AddPathwayIDs adds the "pathways" edge to the KeggPathway entity by IDs.
func (kruo *KeggReactionUpdateOne) AddPathwayIDs(ids ...string) *KeggReactionUpdateOne {
	kruo.mutation.AddPathwayIDs(ids...)
	return kruo
}

// AddPathways adds the "pathways" edges to the KeggPathway entity.
func (kruo *KeggReactionUpdateOne) AddPathways(k ...*KeggPathway) *KeggReactionUpdateOne {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kruo.AddPathwayIDs(ids...)
}

// Mutation returns the KeggReactionMutation object of the builder.
func (kruo *KeggReactionUpdateOne) Mutation() *KeggReactionMutation {
	return kruo.mutation
}

// ClearPathways clears all "pathways" edges to the KeggPathway entity.
func (kruo *KeggReactionUpdateOne) ClearPathways() *KeggReactionUpdateOne {
	kruo.mutation.ClearPathways()
	return kruo
}

// RemovePathwayIDs removes the "pathways" edge to KeggPathway entities by IDs.
func (kruo *KeggReactionUpdateOne) RemovePathwayIDs(ids ...string) *KeggReactionUpdateOne {
	kruo.mutation.RemovePathwayIDs(ids...)
	return kruo
}

// RemovePathways removes "pathways" edges to KeggPathway entities.
func (kruo *KeggReactionUpdateOne) RemovePathways(k ...*KeggPathway) *KeggReactionUpdateOne {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kruo.RemovePathwayIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kruo *KeggReactionUpdateOne) Select(field string, fields ...string) *KeggReactionUpdateOne {
	kruo.fields = append([]string{field}, fields...)
	return kruo
}

// Save executes the query and returns the updated KeggReaction entity.
func (kruo *KeggReactionUpdateOne) Save(ctx context.Context) (*KeggReaction, error) {
	var (
		err  error
		node *KeggReaction
	)
	if len(kruo.hooks) == 0 {
		node, err = kruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeggReactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kruo.mutation = mutation
			node, err = kruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kruo.hooks) - 1; i >= 0; i-- {
			if kruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*KeggReaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KeggReactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kruo *KeggReactionUpdateOne) SaveX(ctx context.Context) *KeggReaction {
	node, err := kruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kruo *KeggReactionUpdateOne) Exec(ctx context.Context) error {
	_, err := kruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kruo *KeggReactionUpdateOne) ExecX(ctx context.Context) {
	if err := kruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kruo *KeggReactionUpdateOne) sqlSave(ctx context.Context) (_node *KeggReaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   keggreaction.Table,
			Columns: keggreaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggreaction.FieldID,
			},
		},
	}
	id, ok := kruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KeggReaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keggreaction.FieldID)
		for _, f := range fields {
			if !keggreaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keggreaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kruo.mutation.Name(); ok {
		_spec.SetField(keggreaction.FieldName, field.TypeString, value)
	}
	if kruo.mutation.PathwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   keggreaction.PathwaysTable,
			Columns: keggreaction.PathwaysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: keggpathway.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kruo.mutation.RemovedPathwaysIDs(); len(nodes) > 0 && !kruo.mutation.PathwaysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   keggreaction.PathwaysTable,
			Columns: keggreaction.PathwaysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: keggpathway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kruo.mutation.PathwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   keggreaction.PathwaysTable,
			Columns: keggreaction.PathwaysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: keggpathway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KeggReaction{config: kruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keggreaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
