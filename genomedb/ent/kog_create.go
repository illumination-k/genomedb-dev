// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/kog"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KOGCreate is the builder for creating a KOG entity.
type KOGCreate struct {
	config
	mutation *KOGMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDescription sets the "description" field.
func (kc *KOGCreate) SetDescription(s string) *KOGCreate {
	kc.mutation.SetDescription(s)
	return kc
}

// SetCategory sets the "category" field.
func (kc *KOGCreate) SetCategory(s string) *KOGCreate {
	kc.mutation.SetCategory(s)
	return kc
}

// SetID sets the "id" field.
func (kc *KOGCreate) SetID(s string) *KOGCreate {
	kc.mutation.SetID(s)
	return kc
}

// Mutation returns the KOGMutation object of the builder.
func (kc *KOGCreate) Mutation() *KOGMutation {
	return kc.mutation
}

// Save creates the KOG in the database.
func (kc *KOGCreate) Save(ctx context.Context) (*KOG, error) {
	var (
		err  error
		node *KOG
	)
	if len(kc.hooks) == 0 {
		if err = kc.check(); err != nil {
			return nil, err
		}
		node, err = kc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KOGMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kc.check(); err != nil {
				return nil, err
			}
			kc.mutation = mutation
			if node, err = kc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(kc.hooks) - 1; i >= 0; i-- {
			if kc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*KOG)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KOGMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KOGCreate) SaveX(ctx context.Context) *KOG {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kc *KOGCreate) Exec(ctx context.Context) error {
	_, err := kc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kc *KOGCreate) ExecX(ctx context.Context) {
	if err := kc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kc *KOGCreate) check() error {
	if _, ok := kc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "KOG.description"`)}
	}
	if _, ok := kc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "KOG.category"`)}
	}
	return nil
}

func (kc *KOGCreate) sqlSave(ctx context.Context) (*KOG, error) {
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected KOG.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (kc *KOGCreate) createSpec() (*KOG, *sqlgraph.CreateSpec) {
	var (
		_node = &KOG{config: kc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: kog.FieldID,
			},
		}
	)
	_spec.OnConflict = kc.conflict
	if id, ok := kc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kc.mutation.Description(); ok {
		_spec.SetField(kog.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := kc.mutation.Category(); ok {
		_spec.SetField(kog.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KOG.Create().
//		SetDescription(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KOGUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (kc *KOGCreate) OnConflict(opts ...sql.ConflictOption) *KOGUpsertOne {
	kc.conflict = opts
	return &KOGUpsertOne{
		create: kc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KOG.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kc *KOGCreate) OnConflictColumns(columns ...string) *KOGUpsertOne {
	kc.conflict = append(kc.conflict, sql.ConflictColumns(columns...))
	return &KOGUpsertOne{
		create: kc,
	}
}

type (
	// KOGUpsertOne is the builder for "upsert"-ing
	//  one KOG node.
	KOGUpsertOne struct {
		create *KOGCreate
	}

	// KOGUpsert is the "OnConflict" setter.
	KOGUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *KOGUpsert) SetDescription(v string) *KOGUpsert {
	u.Set(kog.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *KOGUpsert) UpdateDescription() *KOGUpsert {
	u.SetExcluded(kog.FieldDescription)
	return u
}

// SetCategory sets the "category" field.
func (u *KOGUpsert) SetCategory(v string) *KOGUpsert {
	u.Set(kog.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KOGUpsert) UpdateCategory() *KOGUpsert {
	u.SetExcluded(kog.FieldCategory)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.KOG.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KOGUpsertOne) UpdateNewValues() *KOGUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(kog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KOG.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KOGUpsertOne) Ignore() *KOGUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KOGUpsertOne) DoNothing() *KOGUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KOGCreate.OnConflict
// documentation for more info.
func (u *KOGUpsertOne) Update(set func(*KOGUpsert)) *KOGUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KOGUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *KOGUpsertOne) SetDescription(v string) *KOGUpsertOne {
	return u.Update(func(s *KOGUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *KOGUpsertOne) UpdateDescription() *KOGUpsertOne {
	return u.Update(func(s *KOGUpsert) {
		s.UpdateDescription()
	})
}

// SetCategory sets the "category" field.
func (u *KOGUpsertOne) SetCategory(v string) *KOGUpsertOne {
	return u.Update(func(s *KOGUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KOGUpsertOne) UpdateCategory() *KOGUpsertOne {
	return u.Update(func(s *KOGUpsert) {
		s.UpdateCategory()
	})
}

// Exec executes the query.
func (u *KOGUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KOGCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KOGUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KOGUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KOGUpsertOne.ID is not supported by MySQL driver. Use KOGUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KOGUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KOGCreateBulk is the builder for creating many KOG entities in bulk.
type KOGCreateBulk struct {
	config
	builders []*KOGCreate
	conflict []sql.ConflictOption
}

// Save creates the KOG entities in the database.
func (kcb *KOGCreateBulk) Save(ctx context.Context) ([]*KOG, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*KOG, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KOGMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KOGCreateBulk) SaveX(ctx context.Context) []*KOG {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcb *KOGCreateBulk) Exec(ctx context.Context) error {
	_, err := kcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcb *KOGCreateBulk) ExecX(ctx context.Context) {
	if err := kcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KOG.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KOGUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (kcb *KOGCreateBulk) OnConflict(opts ...sql.ConflictOption) *KOGUpsertBulk {
	kcb.conflict = opts
	return &KOGUpsertBulk{
		create: kcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KOG.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kcb *KOGCreateBulk) OnConflictColumns(columns ...string) *KOGUpsertBulk {
	kcb.conflict = append(kcb.conflict, sql.ConflictColumns(columns...))
	return &KOGUpsertBulk{
		create: kcb,
	}
}

// KOGUpsertBulk is the builder for "upsert"-ing
// a bulk of KOG nodes.
type KOGUpsertBulk struct {
	create *KOGCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.KOG.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(kog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KOGUpsertBulk) UpdateNewValues() *KOGUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(kog.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KOG.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KOGUpsertBulk) Ignore() *KOGUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KOGUpsertBulk) DoNothing() *KOGUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KOGCreateBulk.OnConflict
// documentation for more info.
func (u *KOGUpsertBulk) Update(set func(*KOGUpsert)) *KOGUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KOGUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *KOGUpsertBulk) SetDescription(v string) *KOGUpsertBulk {
	return u.Update(func(s *KOGUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *KOGUpsertBulk) UpdateDescription() *KOGUpsertBulk {
	return u.Update(func(s *KOGUpsert) {
		s.UpdateDescription()
	})
}

// SetCategory sets the "category" field.
func (u *KOGUpsertBulk) SetCategory(v string) *KOGUpsertBulk {
	return u.Update(func(s *KOGUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *KOGUpsertBulk) UpdateCategory() *KOGUpsertBulk {
	return u.Update(func(s *KOGUpsert) {
		s.UpdateCategory()
	})
}

// Exec executes the query.
func (u *KOGUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KOGCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KOGCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KOGUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
