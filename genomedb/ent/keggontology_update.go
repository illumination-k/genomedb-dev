// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/keggontology"
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeggOntologyUpdate is the builder for updating KeggOntology entities.
type KeggOntologyUpdate struct {
	config
	hooks    []Hook
	mutation *KeggOntologyMutation
}

// Where appends a list predicates to the KeggOntologyUpdate builder.
func (kou *KeggOntologyUpdate) Where(ps ...predicate.KeggOntology) *KeggOntologyUpdate {
	kou.mutation.Where(ps...)
	return kou
}

// SetName sets the "name" field.
func (kou *KeggOntologyUpdate) SetName(s string) *KeggOntologyUpdate {
	kou.mutation.SetName(s)
	return kou
}

// SetSymbol sets the "symbol" field.
func (kou *KeggOntologyUpdate) SetSymbol(s string) *KeggOntologyUpdate {
	kou.mutation.SetSymbol(s)
	return kou
}

// Mutation returns the KeggOntologyMutation object of the builder.
func (kou *KeggOntologyUpdate) Mutation() *KeggOntologyMutation {
	return kou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kou *KeggOntologyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kou.hooks) == 0 {
		affected, err = kou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeggOntologyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kou.mutation = mutation
			affected, err = kou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kou.hooks) - 1; i >= 0; i-- {
			if kou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kou *KeggOntologyUpdate) SaveX(ctx context.Context) int {
	affected, err := kou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kou *KeggOntologyUpdate) Exec(ctx context.Context) error {
	_, err := kou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kou *KeggOntologyUpdate) ExecX(ctx context.Context) {
	if err := kou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kou *KeggOntologyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   keggontology.Table,
			Columns: keggontology.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggontology.FieldID,
			},
		},
	}
	if ps := kou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kou.mutation.Name(); ok {
		_spec.SetField(keggontology.FieldName, field.TypeString, value)
	}
	if value, ok := kou.mutation.Symbol(); ok {
		_spec.SetField(keggontology.FieldSymbol, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keggontology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// KeggOntologyUpdateOne is the builder for updating a single KeggOntology entity.
type KeggOntologyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeggOntologyMutation
}

// SetName sets the "name" field.
func (kouo *KeggOntologyUpdateOne) SetName(s string) *KeggOntologyUpdateOne {
	kouo.mutation.SetName(s)
	return kouo
}

// SetSymbol sets the "symbol" field.
func (kouo *KeggOntologyUpdateOne) SetSymbol(s string) *KeggOntologyUpdateOne {
	kouo.mutation.SetSymbol(s)
	return kouo
}

// Mutation returns the KeggOntologyMutation object of the builder.
func (kouo *KeggOntologyUpdateOne) Mutation() *KeggOntologyMutation {
	return kouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kouo *KeggOntologyUpdateOne) Select(field string, fields ...string) *KeggOntologyUpdateOne {
	kouo.fields = append([]string{field}, fields...)
	return kouo
}

// Save executes the query and returns the updated KeggOntology entity.
func (kouo *KeggOntologyUpdateOne) Save(ctx context.Context) (*KeggOntology, error) {
	var (
		err  error
		node *KeggOntology
	)
	if len(kouo.hooks) == 0 {
		node, err = kouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeggOntologyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kouo.mutation = mutation
			node, err = kouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kouo.hooks) - 1; i >= 0; i-- {
			if kouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*KeggOntology)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KeggOntologyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kouo *KeggOntologyUpdateOne) SaveX(ctx context.Context) *KeggOntology {
	node, err := kouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kouo *KeggOntologyUpdateOne) Exec(ctx context.Context) error {
	_, err := kouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kouo *KeggOntologyUpdateOne) ExecX(ctx context.Context) {
	if err := kouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kouo *KeggOntologyUpdateOne) sqlSave(ctx context.Context) (_node *KeggOntology, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   keggontology.Table,
			Columns: keggontology.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggontology.FieldID,
			},
		},
	}
	id, ok := kouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KeggOntology.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keggontology.FieldID)
		for _, f := range fields {
			if !keggontology.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keggontology.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kouo.mutation.Name(); ok {
		_spec.SetField(keggontology.FieldName, field.TypeString, value)
	}
	if value, ok := kouo.mutation.Symbol(); ok {
		_spec.SetField(keggontology.FieldSymbol, field.TypeString, value)
	}
	_node = &KeggOntology{config: kouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keggontology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
