// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/keggcompound"
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeggCompoundUpdate is the builder for updating KeggCompound entities.
type KeggCompoundUpdate struct {
	config
	hooks    []Hook
	mutation *KeggCompoundMutation
}

// Where appends a list predicates to the KeggCompoundUpdate builder.
func (kcu *KeggCompoundUpdate) Where(ps ...predicate.KeggCompound) *KeggCompoundUpdate {
	kcu.mutation.Where(ps...)
	return kcu
}

// Mutation returns the KeggCompoundMutation object of the builder.
func (kcu *KeggCompoundUpdate) Mutation() *KeggCompoundMutation {
	return kcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcu *KeggCompoundUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(kcu.hooks) == 0 {
		affected, err = kcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeggCompoundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcu.mutation = mutation
			affected, err = kcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcu.hooks) - 1; i >= 0; i-- {
			if kcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcu *KeggCompoundUpdate) SaveX(ctx context.Context) int {
	affected, err := kcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcu *KeggCompoundUpdate) Exec(ctx context.Context) error {
	_, err := kcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcu *KeggCompoundUpdate) ExecX(ctx context.Context) {
	if err := kcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kcu *KeggCompoundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   keggcompound.Table,
			Columns: keggcompound.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggcompound.FieldID,
			},
		},
	}
	if ps := kcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keggcompound.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// KeggCompoundUpdateOne is the builder for updating a single KeggCompound entity.
type KeggCompoundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeggCompoundMutation
}

// Mutation returns the KeggCompoundMutation object of the builder.
func (kcuo *KeggCompoundUpdateOne) Mutation() *KeggCompoundMutation {
	return kcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kcuo *KeggCompoundUpdateOne) Select(field string, fields ...string) *KeggCompoundUpdateOne {
	kcuo.fields = append([]string{field}, fields...)
	return kcuo
}

// Save executes the query and returns the updated KeggCompound entity.
func (kcuo *KeggCompoundUpdateOne) Save(ctx context.Context) (*KeggCompound, error) {
	var (
		err  error
		node *KeggCompound
	)
	if len(kcuo.hooks) == 0 {
		node, err = kcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeggCompoundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kcuo.mutation = mutation
			node, err = kcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcuo.hooks) - 1; i >= 0; i-- {
			if kcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, kcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*KeggCompound)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KeggCompoundMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcuo *KeggCompoundUpdateOne) SaveX(ctx context.Context) *KeggCompound {
	node, err := kcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcuo *KeggCompoundUpdateOne) Exec(ctx context.Context) error {
	_, err := kcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcuo *KeggCompoundUpdateOne) ExecX(ctx context.Context) {
	if err := kcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kcuo *KeggCompoundUpdateOne) sqlSave(ctx context.Context) (_node *KeggCompound, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   keggcompound.Table,
			Columns: keggcompound.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggcompound.FieldID,
			},
		},
	}
	id, ok := kcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KeggCompound.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keggcompound.FieldID)
		for _, f := range fields {
			if !keggcompound.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keggcompound.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &KeggCompound{config: kcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keggcompound.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
