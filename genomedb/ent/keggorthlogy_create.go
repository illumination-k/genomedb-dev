// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/keggorthlogy"
	"genomedb/ent/keggpathway"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeggOrthlogyCreate is the builder for creating a KeggOrthlogy entity.
type KeggOrthlogyCreate struct {
	config
	mutation *KeggOrthlogyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (koc *KeggOrthlogyCreate) SetName(s string) *KeggOrthlogyCreate {
	koc.mutation.SetName(s)
	return koc
}

// SetID sets the "id" field.
func (koc *KeggOrthlogyCreate) SetID(s string) *KeggOrthlogyCreate {
	koc.mutation.SetID(s)
	return koc
}

// AddPathwayIDs adds the "pathways" edge to the KeggPathway entity by IDs.
func (koc *KeggOrthlogyCreate) AddPathwayIDs(ids ...string) *KeggOrthlogyCreate {
	koc.mutation.AddPathwayIDs(ids...)
	return koc
}

// AddPathways adds the "pathways" edges to the KeggPathway entity.
func (koc *KeggOrthlogyCreate) AddPathways(k ...*KeggPathway) *KeggOrthlogyCreate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return koc.AddPathwayIDs(ids...)
}

// Mutation returns the KeggOrthlogyMutation object of the builder.
func (koc *KeggOrthlogyCreate) Mutation() *KeggOrthlogyMutation {
	return koc.mutation
}

// Save creates the KeggOrthlogy in the database.
func (koc *KeggOrthlogyCreate) Save(ctx context.Context) (*KeggOrthlogy, error) {
	var (
		err  error
		node *KeggOrthlogy
	)
	if len(koc.hooks) == 0 {
		if err = koc.check(); err != nil {
			return nil, err
		}
		node, err = koc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeggOrthlogyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = koc.check(); err != nil {
				return nil, err
			}
			koc.mutation = mutation
			if node, err = koc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(koc.hooks) - 1; i >= 0; i-- {
			if koc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = koc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, koc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*KeggOrthlogy)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from KeggOrthlogyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (koc *KeggOrthlogyCreate) SaveX(ctx context.Context) *KeggOrthlogy {
	v, err := koc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (koc *KeggOrthlogyCreate) Exec(ctx context.Context) error {
	_, err := koc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (koc *KeggOrthlogyCreate) ExecX(ctx context.Context) {
	if err := koc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (koc *KeggOrthlogyCreate) check() error {
	if _, ok := koc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "KeggOrthlogy.name"`)}
	}
	if v, ok := koc.mutation.ID(); ok {
		if err := keggorthlogy.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "KeggOrthlogy.id": %w`, err)}
		}
	}
	return nil
}

func (koc *KeggOrthlogyCreate) sqlSave(ctx context.Context) (*KeggOrthlogy, error) {
	_node, _spec := koc.createSpec()
	if err := sqlgraph.CreateNode(ctx, koc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected KeggOrthlogy.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (koc *KeggOrthlogyCreate) createSpec() (*KeggOrthlogy, *sqlgraph.CreateSpec) {
	var (
		_node = &KeggOrthlogy{config: koc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: keggorthlogy.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggorthlogy.FieldID,
			},
		}
	)
	_spec.OnConflict = koc.conflict
	if id, ok := koc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := koc.mutation.Name(); ok {
		_spec.SetField(keggorthlogy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := koc.mutation.PathwaysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   keggorthlogy.PathwaysTable,
			Columns: keggorthlogy.PathwaysPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: keggpathway.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KeggOrthlogy.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeggOrthlogyUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (koc *KeggOrthlogyCreate) OnConflict(opts ...sql.ConflictOption) *KeggOrthlogyUpsertOne {
	koc.conflict = opts
	return &KeggOrthlogyUpsertOne{
		create: koc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KeggOrthlogy.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (koc *KeggOrthlogyCreate) OnConflictColumns(columns ...string) *KeggOrthlogyUpsertOne {
	koc.conflict = append(koc.conflict, sql.ConflictColumns(columns...))
	return &KeggOrthlogyUpsertOne{
		create: koc,
	}
}

type (
	// KeggOrthlogyUpsertOne is the builder for "upsert"-ing
	//  one KeggOrthlogy node.
	KeggOrthlogyUpsertOne struct {
		create *KeggOrthlogyCreate
	}

	// KeggOrthlogyUpsert is the "OnConflict" setter.
	KeggOrthlogyUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *KeggOrthlogyUpsert) SetName(v string) *KeggOrthlogyUpsert {
	u.Set(keggorthlogy.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *KeggOrthlogyUpsert) UpdateName() *KeggOrthlogyUpsert {
	u.SetExcluded(keggorthlogy.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.KeggOrthlogy.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keggorthlogy.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeggOrthlogyUpsertOne) UpdateNewValues() *KeggOrthlogyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(keggorthlogy.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KeggOrthlogy.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KeggOrthlogyUpsertOne) Ignore() *KeggOrthlogyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeggOrthlogyUpsertOne) DoNothing() *KeggOrthlogyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeggOrthlogyCreate.OnConflict
// documentation for more info.
func (u *KeggOrthlogyUpsertOne) Update(set func(*KeggOrthlogyUpsert)) *KeggOrthlogyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeggOrthlogyUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *KeggOrthlogyUpsertOne) SetName(v string) *KeggOrthlogyUpsertOne {
	return u.Update(func(s *KeggOrthlogyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *KeggOrthlogyUpsertOne) UpdateName() *KeggOrthlogyUpsertOne {
	return u.Update(func(s *KeggOrthlogyUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *KeggOrthlogyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeggOrthlogyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeggOrthlogyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KeggOrthlogyUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KeggOrthlogyUpsertOne.ID is not supported by MySQL driver. Use KeggOrthlogyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KeggOrthlogyUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KeggOrthlogyCreateBulk is the builder for creating many KeggOrthlogy entities in bulk.
type KeggOrthlogyCreateBulk struct {
	config
	builders []*KeggOrthlogyCreate
	conflict []sql.ConflictOption
}

// Save creates the KeggOrthlogy entities in the database.
func (kocb *KeggOrthlogyCreateBulk) Save(ctx context.Context) ([]*KeggOrthlogy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kocb.builders))
	nodes := make([]*KeggOrthlogy, len(kocb.builders))
	mutators := make([]Mutator, len(kocb.builders))
	for i := range kocb.builders {
		func(i int, root context.Context) {
			builder := kocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KeggOrthlogyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kocb *KeggOrthlogyCreateBulk) SaveX(ctx context.Context) []*KeggOrthlogy {
	v, err := kocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kocb *KeggOrthlogyCreateBulk) Exec(ctx context.Context) error {
	_, err := kocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kocb *KeggOrthlogyCreateBulk) ExecX(ctx context.Context) {
	if err := kocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.KeggOrthlogy.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeggOrthlogyUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (kocb *KeggOrthlogyCreateBulk) OnConflict(opts ...sql.ConflictOption) *KeggOrthlogyUpsertBulk {
	kocb.conflict = opts
	return &KeggOrthlogyUpsertBulk{
		create: kocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.KeggOrthlogy.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kocb *KeggOrthlogyCreateBulk) OnConflictColumns(columns ...string) *KeggOrthlogyUpsertBulk {
	kocb.conflict = append(kocb.conflict, sql.ConflictColumns(columns...))
	return &KeggOrthlogyUpsertBulk{
		create: kocb,
	}
}

// KeggOrthlogyUpsertBulk is the builder for "upsert"-ing
// a bulk of KeggOrthlogy nodes.
type KeggOrthlogyUpsertBulk struct {
	create *KeggOrthlogyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.KeggOrthlogy.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keggorthlogy.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeggOrthlogyUpsertBulk) UpdateNewValues() *KeggOrthlogyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(keggorthlogy.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.KeggOrthlogy.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KeggOrthlogyUpsertBulk) Ignore() *KeggOrthlogyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeggOrthlogyUpsertBulk) DoNothing() *KeggOrthlogyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeggOrthlogyCreateBulk.OnConflict
// documentation for more info.
func (u *KeggOrthlogyUpsertBulk) Update(set func(*KeggOrthlogyUpsert)) *KeggOrthlogyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeggOrthlogyUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *KeggOrthlogyUpsertBulk) SetName(v string) *KeggOrthlogyUpsertBulk {
	return u.Update(func(s *KeggOrthlogyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *KeggOrthlogyUpsertBulk) UpdateName() *KeggOrthlogyUpsertBulk {
	return u.Update(func(s *KeggOrthlogyUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *KeggOrthlogyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KeggOrthlogyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeggOrthlogyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeggOrthlogyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
