// Code generated by ent, DO NOT EDIT.

package gotermontranscripts

const (
	// Label holds the string label denoting the gotermontranscripts type in the database.
	Label = "go_term_on_transcripts"
	// FieldEvidenceCode holds the string denoting the evidence_code field in the database.
	FieldEvidenceCode = "evidence_code"
	// FieldGoTermID holds the string denoting the go_term_id field in the database.
	FieldGoTermID = "go_term_id"
	// FieldTranscriptID holds the string denoting the transcript_id field in the database.
	FieldTranscriptID = "transcript_id"
	// EdgeGoTerm holds the string denoting the go_term edge name in mutations.
	EdgeGoTerm = "go_term"
	// EdgeTranscript holds the string denoting the transcript edge name in mutations.
	EdgeTranscript = "transcript"
	// GoTermFieldID holds the string denoting the ID field of the GoTerm.
	GoTermFieldID = "id"
	// TranscriptFieldID holds the string denoting the ID field of the Transcript.
	TranscriptFieldID = "id"
	// Table holds the table name of the gotermontranscripts in the database.
	Table = "go_term_on_transcripts"
	// GoTermTable is the table that holds the go_term relation/edge.
	GoTermTable = "go_term_on_transcripts"
	// GoTermInverseTable is the table name for the GoTerm entity.
	// It exists in this package in order to avoid circular dependency with the "goterm" package.
	GoTermInverseTable = "go_terms"
	// GoTermColumn is the table column denoting the go_term relation/edge.
	GoTermColumn = "go_term_id"
	// TranscriptTable is the table that holds the transcript relation/edge.
	TranscriptTable = "go_term_on_transcripts"
	// TranscriptInverseTable is the table name for the Transcript entity.
	// It exists in this package in order to avoid circular dependency with the "transcript" package.
	TranscriptInverseTable = "transcripts"
	// TranscriptColumn is the table column denoting the transcript relation/edge.
	TranscriptColumn = "transcript_id"
)

// Columns holds all SQL columns for gotermontranscripts fields.
var Columns = []string{
	FieldEvidenceCode,
	FieldGoTermID,
	FieldTranscriptID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
