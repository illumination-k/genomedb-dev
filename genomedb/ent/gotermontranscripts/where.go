// Code generated by ent, DO NOT EDIT.

package gotermontranscripts

import (
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// EvidenceCode applies equality check predicate on the "evidence_code" field. It's identical to EvidenceCodeEQ.
func EvidenceCode(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEvidenceCode), v))
	})
}

// GoTermID applies equality check predicate on the "go_term_id" field. It's identical to GoTermIDEQ.
func GoTermID(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoTermID), v))
	})
}

// TranscriptID applies equality check predicate on the "transcript_id" field. It's identical to TranscriptIDEQ.
func TranscriptID(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscriptID), v))
	})
}

// EvidenceCodeEQ applies the EQ predicate on the "evidence_code" field.
func EvidenceCodeEQ(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeNEQ applies the NEQ predicate on the "evidence_code" field.
func EvidenceCodeNEQ(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeIn applies the In predicate on the "evidence_code" field.
func EvidenceCodeIn(vs ...string) predicate.GoTermOnTranscripts {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEvidenceCode), v...))
	})
}

// EvidenceCodeNotIn applies the NotIn predicate on the "evidence_code" field.
func EvidenceCodeNotIn(vs ...string) predicate.GoTermOnTranscripts {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEvidenceCode), v...))
	})
}

// EvidenceCodeGT applies the GT predicate on the "evidence_code" field.
func EvidenceCodeGT(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeGTE applies the GTE predicate on the "evidence_code" field.
func EvidenceCodeGTE(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeLT applies the LT predicate on the "evidence_code" field.
func EvidenceCodeLT(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeLTE applies the LTE predicate on the "evidence_code" field.
func EvidenceCodeLTE(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeContains applies the Contains predicate on the "evidence_code" field.
func EvidenceCodeContains(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeHasPrefix applies the HasPrefix predicate on the "evidence_code" field.
func EvidenceCodeHasPrefix(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeHasSuffix applies the HasSuffix predicate on the "evidence_code" field.
func EvidenceCodeHasSuffix(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeEqualFold applies the EqualFold predicate on the "evidence_code" field.
func EvidenceCodeEqualFold(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEvidenceCode), v))
	})
}

// EvidenceCodeContainsFold applies the ContainsFold predicate on the "evidence_code" field.
func EvidenceCodeContainsFold(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEvidenceCode), v))
	})
}

// GoTermIDEQ applies the EQ predicate on the "go_term_id" field.
func GoTermIDEQ(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoTermID), v))
	})
}

// GoTermIDNEQ applies the NEQ predicate on the "go_term_id" field.
func GoTermIDNEQ(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoTermID), v))
	})
}

// GoTermIDIn applies the In predicate on the "go_term_id" field.
func GoTermIDIn(vs ...string) predicate.GoTermOnTranscripts {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoTermID), v...))
	})
}

// GoTermIDNotIn applies the NotIn predicate on the "go_term_id" field.
func GoTermIDNotIn(vs ...string) predicate.GoTermOnTranscripts {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoTermID), v...))
	})
}

// GoTermIDGT applies the GT predicate on the "go_term_id" field.
func GoTermIDGT(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoTermID), v))
	})
}

// GoTermIDGTE applies the GTE predicate on the "go_term_id" field.
func GoTermIDGTE(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoTermID), v))
	})
}

// GoTermIDLT applies the LT predicate on the "go_term_id" field.
func GoTermIDLT(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoTermID), v))
	})
}

// GoTermIDLTE applies the LTE predicate on the "go_term_id" field.
func GoTermIDLTE(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoTermID), v))
	})
}

// GoTermIDContains applies the Contains predicate on the "go_term_id" field.
func GoTermIDContains(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoTermID), v))
	})
}

// GoTermIDHasPrefix applies the HasPrefix predicate on the "go_term_id" field.
func GoTermIDHasPrefix(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoTermID), v))
	})
}

// GoTermIDHasSuffix applies the HasSuffix predicate on the "go_term_id" field.
func GoTermIDHasSuffix(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoTermID), v))
	})
}

// GoTermIDEqualFold applies the EqualFold predicate on the "go_term_id" field.
func GoTermIDEqualFold(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoTermID), v))
	})
}

// GoTermIDContainsFold applies the ContainsFold predicate on the "go_term_id" field.
func GoTermIDContainsFold(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoTermID), v))
	})
}

// TranscriptIDEQ applies the EQ predicate on the "transcript_id" field.
func TranscriptIDEQ(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDNEQ applies the NEQ predicate on the "transcript_id" field.
func TranscriptIDNEQ(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDIn applies the In predicate on the "transcript_id" field.
func TranscriptIDIn(vs ...string) predicate.GoTermOnTranscripts {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTranscriptID), v...))
	})
}

// TranscriptIDNotIn applies the NotIn predicate on the "transcript_id" field.
func TranscriptIDNotIn(vs ...string) predicate.GoTermOnTranscripts {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTranscriptID), v...))
	})
}

// TranscriptIDGT applies the GT predicate on the "transcript_id" field.
func TranscriptIDGT(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDGTE applies the GTE predicate on the "transcript_id" field.
func TranscriptIDGTE(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDLT applies the LT predicate on the "transcript_id" field.
func TranscriptIDLT(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDLTE applies the LTE predicate on the "transcript_id" field.
func TranscriptIDLTE(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDContains applies the Contains predicate on the "transcript_id" field.
func TranscriptIDContains(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDHasPrefix applies the HasPrefix predicate on the "transcript_id" field.
func TranscriptIDHasPrefix(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDHasSuffix applies the HasSuffix predicate on the "transcript_id" field.
func TranscriptIDHasSuffix(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDEqualFold applies the EqualFold predicate on the "transcript_id" field.
func TranscriptIDEqualFold(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDContainsFold applies the ContainsFold predicate on the "transcript_id" field.
func TranscriptIDContainsFold(v string) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTranscriptID), v))
	})
}

// HasGoTerm applies the HasEdge predicate on the "go_term" edge.
func HasGoTerm() predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, GoTermColumn),
			sqlgraph.To(GoTermInverseTable, GoTermFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GoTermTable, GoTermColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoTermWith applies the HasEdge predicate on the "go_term" edge with a given conditions (other predicates).
func HasGoTermWith(preds ...predicate.GoTerm) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, GoTermColumn),
			sqlgraph.To(GoTermInverseTable, GoTermFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GoTermTable, GoTermColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranscript applies the HasEdge predicate on the "transcript" edge.
func HasTranscript() predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TranscriptColumn),
			sqlgraph.To(TranscriptInverseTable, TranscriptFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TranscriptTable, TranscriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranscriptWith applies the HasEdge predicate on the "transcript" edge with a given conditions (other predicates).
func HasTranscriptWith(preds ...predicate.Transcript) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TranscriptColumn),
			sqlgraph.To(TranscriptInverseTable, TranscriptFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TranscriptTable, TranscriptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoTermOnTranscripts) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoTermOnTranscripts) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoTermOnTranscripts) predicate.GoTermOnTranscripts {
	return predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		p(s.Not())
	})
}
