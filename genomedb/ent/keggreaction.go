// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/keggreaction"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// KeggReaction is the model entity for the KeggReaction schema.
type KeggReaction struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KeggReactionQuery when eager-loading is set.
	Edges KeggReactionEdges `json:"edges"`
}

// KeggReactionEdges holds the relations/edges for other nodes in the graph.
type KeggReactionEdges struct {
	// Pathways holds the value of the pathways edge.
	Pathways []*KeggPathway `json:"pathways,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PathwaysOrErr returns the Pathways value or an error if the edge
// was not loaded in eager-loading.
func (e KeggReactionEdges) PathwaysOrErr() ([]*KeggPathway, error) {
	if e.loadedTypes[0] {
		return e.Pathways, nil
	}
	return nil, &NotLoadedError{edge: "pathways"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KeggReaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case keggreaction.FieldID, keggreaction.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KeggReaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KeggReaction fields.
func (kr *KeggReaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case keggreaction.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				kr.ID = value.String
			}
		case keggreaction.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				kr.Name = value.String
			}
		}
	}
	return nil
}

// QueryPathways queries the "pathways" edge of the KeggReaction entity.
func (kr *KeggReaction) QueryPathways() *KeggPathwayQuery {
	return (&KeggReactionClient{config: kr.config}).QueryPathways(kr)
}

// Update returns a builder for updating this KeggReaction.
// Note that you need to call KeggReaction.Unwrap() before calling this method if this KeggReaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (kr *KeggReaction) Update() *KeggReactionUpdateOne {
	return (&KeggReactionClient{config: kr.config}).UpdateOne(kr)
}

// Unwrap unwraps the KeggReaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kr *KeggReaction) Unwrap() *KeggReaction {
	_tx, ok := kr.config.driver.(*txDriver)
	if !ok {
		panic("ent: KeggReaction is not a transactional entity")
	}
	kr.config.driver = _tx.drv
	return kr
}

// String implements the fmt.Stringer.
func (kr *KeggReaction) String() string {
	var builder strings.Builder
	builder.WriteString("KeggReaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", kr.ID))
	builder.WriteString("name=")
	builder.WriteString(kr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// KeggReactions is a parsable slice of KeggReaction.
type KeggReactions []*KeggReaction

func (kr KeggReactions) config(cfg config) {
	for _i := range kr {
		kr[_i].config = cfg
	}
}
