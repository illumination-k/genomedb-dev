// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/genome"
	"genomedb/ent/locus"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Locus is the model entity for the Locus schema.
type Locus struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocusQuery when eager-loading is set.
	Edges          LocusEdges `json:"edges"`
	genome_locuses *string
}

// LocusEdges holds the relations/edges for other nodes in the graph.
type LocusEdges struct {
	// Transcripts holds the value of the transcripts edge.
	Transcripts []*Transcript `json:"transcripts,omitempty"`
	// Genome holds the value of the genome edge.
	Genome *Genome `json:"genome,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TranscriptsOrErr returns the Transcripts value or an error if the edge
// was not loaded in eager-loading.
func (e LocusEdges) TranscriptsOrErr() ([]*Transcript, error) {
	if e.loadedTypes[0] {
		return e.Transcripts, nil
	}
	return nil, &NotLoadedError{edge: "transcripts"}
}

// GenomeOrErr returns the Genome value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LocusEdges) GenomeOrErr() (*Genome, error) {
	if e.loadedTypes[1] {
		if e.Genome == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: genome.Label}
		}
		return e.Genome, nil
	}
	return nil, &NotLoadedError{edge: "genome"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Locus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case locus.FieldID:
			values[i] = new(sql.NullString)
		case locus.ForeignKeys[0]: // genome_locuses
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Locus", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Locus fields.
func (l *Locus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case locus.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case locus.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genome_locuses", values[i])
			} else if value.Valid {
				l.genome_locuses = new(string)
				*l.genome_locuses = value.String
			}
		}
	}
	return nil
}

// QueryTranscripts queries the "transcripts" edge of the Locus entity.
func (l *Locus) QueryTranscripts() *TranscriptQuery {
	return (&LocusClient{config: l.config}).QueryTranscripts(l)
}

// QueryGenome queries the "genome" edge of the Locus entity.
func (l *Locus) QueryGenome() *GenomeQuery {
	return (&LocusClient{config: l.config}).QueryGenome(l)
}

// Update returns a builder for updating this Locus.
// Note that you need to call Locus.Unwrap() before calling this method if this Locus
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Locus) Update() *LocusUpdateOne {
	return (&LocusClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Locus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Locus) Unwrap() *Locus {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Locus is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Locus) String() string {
	var builder strings.Builder
	builder.WriteString("Locus(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteByte(')')
	return builder.String()
}

// LocusSlice is a parsable slice of Locus.
type LocusSlice []*Locus

func (l LocusSlice) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
