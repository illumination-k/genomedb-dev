// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"genomedb/ent/keggpathway"
	"genomedb/ent/keggreaction"
	"genomedb/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeggReactionQuery is the builder for querying KeggReaction entities.
type KeggReactionQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.KeggReaction
	withPathways *KeggPathwayQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KeggReactionQuery builder.
func (krq *KeggReactionQuery) Where(ps ...predicate.KeggReaction) *KeggReactionQuery {
	krq.predicates = append(krq.predicates, ps...)
	return krq
}

// Limit adds a limit step to the query.
func (krq *KeggReactionQuery) Limit(limit int) *KeggReactionQuery {
	krq.limit = &limit
	return krq
}

// Offset adds an offset step to the query.
func (krq *KeggReactionQuery) Offset(offset int) *KeggReactionQuery {
	krq.offset = &offset
	return krq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (krq *KeggReactionQuery) Unique(unique bool) *KeggReactionQuery {
	krq.unique = &unique
	return krq
}

// Order adds an order step to the query.
func (krq *KeggReactionQuery) Order(o ...OrderFunc) *KeggReactionQuery {
	krq.order = append(krq.order, o...)
	return krq
}

// QueryPathways chains the current query on the "pathways" edge.
func (krq *KeggReactionQuery) QueryPathways() *KeggPathwayQuery {
	query := &KeggPathwayQuery{config: krq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := krq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := krq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(keggreaction.Table, keggreaction.FieldID, selector),
			sqlgraph.To(keggpathway.Table, keggpathway.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, keggreaction.PathwaysTable, keggreaction.PathwaysPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(krq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KeggReaction entity from the query.
// Returns a *NotFoundError when no KeggReaction was found.
func (krq *KeggReactionQuery) First(ctx context.Context) (*KeggReaction, error) {
	nodes, err := krq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{keggreaction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (krq *KeggReactionQuery) FirstX(ctx context.Context) *KeggReaction {
	node, err := krq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KeggReaction ID from the query.
// Returns a *NotFoundError when no KeggReaction ID was found.
func (krq *KeggReactionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = krq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{keggreaction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (krq *KeggReactionQuery) FirstIDX(ctx context.Context) string {
	id, err := krq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KeggReaction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KeggReaction entity is found.
// Returns a *NotFoundError when no KeggReaction entities are found.
func (krq *KeggReactionQuery) Only(ctx context.Context) (*KeggReaction, error) {
	nodes, err := krq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{keggreaction.Label}
	default:
		return nil, &NotSingularError{keggreaction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (krq *KeggReactionQuery) OnlyX(ctx context.Context) *KeggReaction {
	node, err := krq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KeggReaction ID in the query.
// Returns a *NotSingularError when more than one KeggReaction ID is found.
// Returns a *NotFoundError when no entities are found.
func (krq *KeggReactionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = krq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{keggreaction.Label}
	default:
		err = &NotSingularError{keggreaction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (krq *KeggReactionQuery) OnlyIDX(ctx context.Context) string {
	id, err := krq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KeggReactions.
func (krq *KeggReactionQuery) All(ctx context.Context) ([]*KeggReaction, error) {
	if err := krq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return krq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (krq *KeggReactionQuery) AllX(ctx context.Context) []*KeggReaction {
	nodes, err := krq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KeggReaction IDs.
func (krq *KeggReactionQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := krq.Select(keggreaction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (krq *KeggReactionQuery) IDsX(ctx context.Context) []string {
	ids, err := krq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (krq *KeggReactionQuery) Count(ctx context.Context) (int, error) {
	if err := krq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return krq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (krq *KeggReactionQuery) CountX(ctx context.Context) int {
	count, err := krq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (krq *KeggReactionQuery) Exist(ctx context.Context) (bool, error) {
	if err := krq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return krq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (krq *KeggReactionQuery) ExistX(ctx context.Context) bool {
	exist, err := krq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KeggReactionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (krq *KeggReactionQuery) Clone() *KeggReactionQuery {
	if krq == nil {
		return nil
	}
	return &KeggReactionQuery{
		config:       krq.config,
		limit:        krq.limit,
		offset:       krq.offset,
		order:        append([]OrderFunc{}, krq.order...),
		predicates:   append([]predicate.KeggReaction{}, krq.predicates...),
		withPathways: krq.withPathways.Clone(),
		// clone intermediate query.
		sql:    krq.sql.Clone(),
		path:   krq.path,
		unique: krq.unique,
	}
}

// WithPathways tells the query-builder to eager-load the nodes that are connected to
// the "pathways" edge. The optional arguments are used to configure the query builder of the edge.
func (krq *KeggReactionQuery) WithPathways(opts ...func(*KeggPathwayQuery)) *KeggReactionQuery {
	query := &KeggPathwayQuery{config: krq.config}
	for _, opt := range opts {
		opt(query)
	}
	krq.withPathways = query
	return krq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KeggReaction.Query().
//		GroupBy(keggreaction.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (krq *KeggReactionQuery) GroupBy(field string, fields ...string) *KeggReactionGroupBy {
	grbuild := &KeggReactionGroupBy{config: krq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := krq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return krq.sqlQuery(ctx), nil
	}
	grbuild.label = keggreaction.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.KeggReaction.Query().
//		Select(keggreaction.FieldName).
//		Scan(ctx, &v)
func (krq *KeggReactionQuery) Select(fields ...string) *KeggReactionSelect {
	krq.fields = append(krq.fields, fields...)
	selbuild := &KeggReactionSelect{KeggReactionQuery: krq}
	selbuild.label = keggreaction.Label
	selbuild.flds, selbuild.scan = &krq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a KeggReactionSelect configured with the given aggregations.
func (krq *KeggReactionQuery) Aggregate(fns ...AggregateFunc) *KeggReactionSelect {
	return krq.Select().Aggregate(fns...)
}

func (krq *KeggReactionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range krq.fields {
		if !keggreaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if krq.path != nil {
		prev, err := krq.path(ctx)
		if err != nil {
			return err
		}
		krq.sql = prev
	}
	return nil
}

func (krq *KeggReactionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KeggReaction, error) {
	var (
		nodes       = []*KeggReaction{}
		_spec       = krq.querySpec()
		loadedTypes = [1]bool{
			krq.withPathways != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KeggReaction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KeggReaction{config: krq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, krq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := krq.withPathways; query != nil {
		if err := krq.loadPathways(ctx, query, nodes,
			func(n *KeggReaction) { n.Edges.Pathways = []*KeggPathway{} },
			func(n *KeggReaction, e *KeggPathway) { n.Edges.Pathways = append(n.Edges.Pathways, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (krq *KeggReactionQuery) loadPathways(ctx context.Context, query *KeggPathwayQuery, nodes []*KeggReaction, init func(*KeggReaction), assign func(*KeggReaction, *KeggPathway)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*KeggReaction)
	nids := make(map[string]map[*KeggReaction]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(keggreaction.PathwaysTable)
		s.Join(joinT).On(s.C(keggpathway.FieldID), joinT.C(keggreaction.PathwaysPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(keggreaction.PathwaysPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(keggreaction.PathwaysPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullString)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := values[0].(*sql.NullString).String
			inValue := values[1].(*sql.NullString).String
			if nids[inValue] == nil {
				nids[inValue] = map[*KeggReaction]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "pathways" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (krq *KeggReactionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := krq.querySpec()
	_spec.Node.Columns = krq.fields
	if len(krq.fields) > 0 {
		_spec.Unique = krq.unique != nil && *krq.unique
	}
	return sqlgraph.CountNodes(ctx, krq.driver, _spec)
}

func (krq *KeggReactionQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := krq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (krq *KeggReactionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   keggreaction.Table,
			Columns: keggreaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggreaction.FieldID,
			},
		},
		From:   krq.sql,
		Unique: true,
	}
	if unique := krq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := krq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keggreaction.FieldID)
		for i := range fields {
			if fields[i] != keggreaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := krq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := krq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := krq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := krq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (krq *KeggReactionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(krq.driver.Dialect())
	t1 := builder.Table(keggreaction.Table)
	columns := krq.fields
	if len(columns) == 0 {
		columns = keggreaction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if krq.sql != nil {
		selector = krq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if krq.unique != nil && *krq.unique {
		selector.Distinct()
	}
	for _, p := range krq.predicates {
		p(selector)
	}
	for _, p := range krq.order {
		p(selector)
	}
	if offset := krq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := krq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KeggReactionGroupBy is the group-by builder for KeggReaction entities.
type KeggReactionGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (krgb *KeggReactionGroupBy) Aggregate(fns ...AggregateFunc) *KeggReactionGroupBy {
	krgb.fns = append(krgb.fns, fns...)
	return krgb
}

// Scan applies the group-by query and scans the result into the given value.
func (krgb *KeggReactionGroupBy) Scan(ctx context.Context, v any) error {
	query, err := krgb.path(ctx)
	if err != nil {
		return err
	}
	krgb.sql = query
	return krgb.sqlScan(ctx, v)
}

func (krgb *KeggReactionGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range krgb.fields {
		if !keggreaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := krgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := krgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (krgb *KeggReactionGroupBy) sqlQuery() *sql.Selector {
	selector := krgb.sql.Select()
	aggregation := make([]string, 0, len(krgb.fns))
	for _, fn := range krgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(krgb.fields)+len(krgb.fns))
		for _, f := range krgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(krgb.fields...)...)
}

// KeggReactionSelect is the builder for selecting fields of KeggReaction entities.
type KeggReactionSelect struct {
	*KeggReactionQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (krs *KeggReactionSelect) Aggregate(fns ...AggregateFunc) *KeggReactionSelect {
	krs.fns = append(krs.fns, fns...)
	return krs
}

// Scan applies the selector query and scans the result into the given value.
func (krs *KeggReactionSelect) Scan(ctx context.Context, v any) error {
	if err := krs.prepareQuery(ctx); err != nil {
		return err
	}
	krs.sql = krs.KeggReactionQuery.sqlQuery(ctx)
	return krs.sqlScan(ctx, v)
}

func (krs *KeggReactionSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(krs.fns))
	for _, fn := range krs.fns {
		aggregation = append(aggregation, fn(krs.sql))
	}
	switch n := len(*krs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		krs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		krs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := krs.sql.Query()
	if err := krs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
