// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/domainannotation"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainAnnotationUpdate is the builder for updating DomainAnnotation entities.
type DomainAnnotationUpdate struct {
	config
	hooks    []Hook
	mutation *DomainAnnotationMutation
}

// Where appends a list predicates to the DomainAnnotationUpdate builder.
func (dau *DomainAnnotationUpdate) Where(ps ...predicate.DomainAnnotation) *DomainAnnotationUpdate {
	dau.mutation.Where(ps...)
	return dau
}

// SetDescription sets the "description" field.
func (dau *DomainAnnotationUpdate) SetDescription(s string) *DomainAnnotationUpdate {
	dau.mutation.SetDescription(s)
	return dau
}

// SetAnalysis sets the "Analysis" field.
func (dau *DomainAnnotationUpdate) SetAnalysis(s string) *DomainAnnotationUpdate {
	dau.mutation.SetAnalysis(s)
	return dau
}

// AddTranscriptIDs adds the "transcripts" edge to the Transcript entity by IDs.
func (dau *DomainAnnotationUpdate) AddTranscriptIDs(ids ...string) *DomainAnnotationUpdate {
	dau.mutation.AddTranscriptIDs(ids...)
	return dau
}

// AddTranscripts adds the "transcripts" edges to the Transcript entity.
func (dau *DomainAnnotationUpdate) AddTranscripts(t ...*Transcript) *DomainAnnotationUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dau.AddTranscriptIDs(ids...)
}

// Mutation returns the DomainAnnotationMutation object of the builder.
func (dau *DomainAnnotationUpdate) Mutation() *DomainAnnotationMutation {
	return dau.mutation
}

// ClearTranscripts clears all "transcripts" edges to the Transcript entity.
func (dau *DomainAnnotationUpdate) ClearTranscripts() *DomainAnnotationUpdate {
	dau.mutation.ClearTranscripts()
	return dau
}

// RemoveTranscriptIDs removes the "transcripts" edge to Transcript entities by IDs.
func (dau *DomainAnnotationUpdate) RemoveTranscriptIDs(ids ...string) *DomainAnnotationUpdate {
	dau.mutation.RemoveTranscriptIDs(ids...)
	return dau
}

// RemoveTranscripts removes "transcripts" edges to Transcript entities.
func (dau *DomainAnnotationUpdate) RemoveTranscripts(t ...*Transcript) *DomainAnnotationUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dau.RemoveTranscriptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dau *DomainAnnotationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dau.hooks) == 0 {
		affected, err = dau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DomainAnnotationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dau.mutation = mutation
			affected, err = dau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dau.hooks) - 1; i >= 0; i-- {
			if dau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dau *DomainAnnotationUpdate) SaveX(ctx context.Context) int {
	affected, err := dau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dau *DomainAnnotationUpdate) Exec(ctx context.Context) error {
	_, err := dau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dau *DomainAnnotationUpdate) ExecX(ctx context.Context) {
	if err := dau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dau *DomainAnnotationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   domainannotation.Table,
			Columns: domainannotation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: domainannotation.FieldID,
			},
		},
	}
	if ps := dau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dau.mutation.Description(); ok {
		_spec.SetField(domainannotation.FieldDescription, field.TypeString, value)
	}
	if value, ok := dau.mutation.Analysis(); ok {
		_spec.SetField(domainannotation.FieldAnalysis, field.TypeString, value)
	}
	if dau.mutation.TranscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domainannotation.TranscriptsTable,
			Columns: domainannotation.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.RemovedTranscriptsIDs(); len(nodes) > 0 && !dau.mutation.TranscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domainannotation.TranscriptsTable,
			Columns: domainannotation.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.TranscriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domainannotation.TranscriptsTable,
			Columns: domainannotation.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domainannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DomainAnnotationUpdateOne is the builder for updating a single DomainAnnotation entity.
type DomainAnnotationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DomainAnnotationMutation
}

// SetDescription sets the "description" field.
func (dauo *DomainAnnotationUpdateOne) SetDescription(s string) *DomainAnnotationUpdateOne {
	dauo.mutation.SetDescription(s)
	return dauo
}

// SetAnalysis sets the "Analysis" field.
func (dauo *DomainAnnotationUpdateOne) SetAnalysis(s string) *DomainAnnotationUpdateOne {
	dauo.mutation.SetAnalysis(s)
	return dauo
}

// AddTranscriptIDs adds the "transcripts" edge to the Transcript entity by IDs.
func (dauo *DomainAnnotationUpdateOne) AddTranscriptIDs(ids ...string) *DomainAnnotationUpdateOne {
	dauo.mutation.AddTranscriptIDs(ids...)
	return dauo
}

// AddTranscripts adds the "transcripts" edges to the Transcript entity.
func (dauo *DomainAnnotationUpdateOne) AddTranscripts(t ...*Transcript) *DomainAnnotationUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dauo.AddTranscriptIDs(ids...)
}

// Mutation returns the DomainAnnotationMutation object of the builder.
func (dauo *DomainAnnotationUpdateOne) Mutation() *DomainAnnotationMutation {
	return dauo.mutation
}

// ClearTranscripts clears all "transcripts" edges to the Transcript entity.
func (dauo *DomainAnnotationUpdateOne) ClearTranscripts() *DomainAnnotationUpdateOne {
	dauo.mutation.ClearTranscripts()
	return dauo
}

// RemoveTranscriptIDs removes the "transcripts" edge to Transcript entities by IDs.
func (dauo *DomainAnnotationUpdateOne) RemoveTranscriptIDs(ids ...string) *DomainAnnotationUpdateOne {
	dauo.mutation.RemoveTranscriptIDs(ids...)
	return dauo
}

// RemoveTranscripts removes "transcripts" edges to Transcript entities.
func (dauo *DomainAnnotationUpdateOne) RemoveTranscripts(t ...*Transcript) *DomainAnnotationUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dauo.RemoveTranscriptIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dauo *DomainAnnotationUpdateOne) Select(field string, fields ...string) *DomainAnnotationUpdateOne {
	dauo.fields = append([]string{field}, fields...)
	return dauo
}

// Save executes the query and returns the updated DomainAnnotation entity.
func (dauo *DomainAnnotationUpdateOne) Save(ctx context.Context) (*DomainAnnotation, error) {
	var (
		err  error
		node *DomainAnnotation
	)
	if len(dauo.hooks) == 0 {
		node, err = dauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DomainAnnotationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dauo.mutation = mutation
			node, err = dauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dauo.hooks) - 1; i >= 0; i-- {
			if dauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DomainAnnotation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DomainAnnotationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dauo *DomainAnnotationUpdateOne) SaveX(ctx context.Context) *DomainAnnotation {
	node, err := dauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dauo *DomainAnnotationUpdateOne) Exec(ctx context.Context) error {
	_, err := dauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dauo *DomainAnnotationUpdateOne) ExecX(ctx context.Context) {
	if err := dauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dauo *DomainAnnotationUpdateOne) sqlSave(ctx context.Context) (_node *DomainAnnotation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   domainannotation.Table,
			Columns: domainannotation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: domainannotation.FieldID,
			},
		},
	}
	id, ok := dauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DomainAnnotation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, domainannotation.FieldID)
		for _, f := range fields {
			if !domainannotation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != domainannotation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dauo.mutation.Description(); ok {
		_spec.SetField(domainannotation.FieldDescription, field.TypeString, value)
	}
	if value, ok := dauo.mutation.Analysis(); ok {
		_spec.SetField(domainannotation.FieldAnalysis, field.TypeString, value)
	}
	if dauo.mutation.TranscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domainannotation.TranscriptsTable,
			Columns: domainannotation.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.RemovedTranscriptsIDs(); len(nodes) > 0 && !dauo.mutation.TranscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domainannotation.TranscriptsTable,
			Columns: domainannotation.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.TranscriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domainannotation.TranscriptsTable,
			Columns: domainannotation.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DomainAnnotation{config: dauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{domainannotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
