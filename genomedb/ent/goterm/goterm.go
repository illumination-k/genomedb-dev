// Code generated by ent, DO NOT EDIT.

package goterm

import (
	"fmt"
)

const (
	// Label holds the string label denoting the goterm type in the database.
	Label = "go_term"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDef holds the string denoting the def field in the database.
	FieldDef = "def"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldDepth holds the string denoting the depth field in the database.
	FieldDepth = "depth"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeTranscripts holds the string denoting the transcripts edge name in mutations.
	EdgeTranscripts = "transcripts"
	// EdgeGotermTranscript holds the string denoting the goterm_transcript edge name in mutations.
	EdgeGotermTranscript = "goterm_transcript"
	// Table holds the table name of the goterm in the database.
	Table = "go_terms"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "go_terms"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "go_term_children"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "go_terms"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "go_term_children"
	// TranscriptsTable is the table that holds the transcripts relation/edge. The primary key declared below.
	TranscriptsTable = "go_term_on_transcripts"
	// TranscriptsInverseTable is the table name for the Transcript entity.
	// It exists in this package in order to avoid circular dependency with the "transcript" package.
	TranscriptsInverseTable = "transcripts"
	// GotermTranscriptTable is the table that holds the goterm_transcript relation/edge.
	GotermTranscriptTable = "go_term_on_transcripts"
	// GotermTranscriptInverseTable is the table name for the GoTermOnTranscripts entity.
	// It exists in this package in order to avoid circular dependency with the "gotermontranscripts" package.
	GotermTranscriptInverseTable = "go_term_on_transcripts"
	// GotermTranscriptColumn is the table column denoting the goterm_transcript relation/edge.
	GotermTranscriptColumn = "go_term_id"
)

// Columns holds all SQL columns for goterm fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldName,
	FieldDef,
	FieldLevel,
	FieldDepth,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "go_terms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"go_term_children",
}

var (
	// TranscriptsPrimaryKey and TranscriptsColumn2 are the table columns denoting the
	// primary key for the transcripts relation (M2M).
	TranscriptsPrimaryKey = []string{"go_term_id", "transcript_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Namespace defines the type for the "namespace" enum field.
type Namespace string

// Namespace values.
const (
	NamespaceBP Namespace = "BP"
	NamespaceMF Namespace = "MF"
	NamespaceCC Namespace = "CC"
)

func (n Namespace) String() string {
	return string(n)
}

// NamespaceValidator is a validator for the "namespace" field enum values. It is called by the builders before save.
func NamespaceValidator(n Namespace) error {
	switch n {
	case NamespaceBP, NamespaceMF, NamespaceCC:
		return nil
	default:
		return fmt.Errorf("goterm: invalid enum value for namespace field: %q", n)
	}
}
