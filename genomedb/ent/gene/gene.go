// Code generated by ent, DO NOT EDIT.

package gene

const (
	// Label holds the string label denoting the gene type in the database.
	Label = "gene"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeTranscripts holds the string denoting the transcripts edge name in mutations.
	EdgeTranscripts = "transcripts"
	// EdgeGenome holds the string denoting the genome edge name in mutations.
	EdgeGenome = "genome"
	// GenomeFieldID holds the string denoting the ID field of the Genome.
	GenomeFieldID = "name"
	// Table holds the table name of the gene in the database.
	Table = "genes"
	// TranscriptsTable is the table that holds the transcripts relation/edge.
	TranscriptsTable = "transcripts"
	// TranscriptsInverseTable is the table name for the Transcript entity.
	// It exists in this package in order to avoid circular dependency with the "transcript" package.
	TranscriptsInverseTable = "transcripts"
	// TranscriptsColumn is the table column denoting the transcripts relation/edge.
	TranscriptsColumn = "gene_transcripts"
	// GenomeTable is the table that holds the genome relation/edge.
	GenomeTable = "genes"
	// GenomeInverseTable is the table name for the Genome entity.
	// It exists in this package in order to avoid circular dependency with the "genome" package.
	GenomeInverseTable = "genomes"
	// GenomeColumn is the table column denoting the genome relation/edge.
	GenomeColumn = "genome_genes"
)

// Columns holds all SQL columns for gene fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "genes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"genome_genes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
