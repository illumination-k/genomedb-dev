// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"genomedb/ent/nomeclature"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Nomeclature is the model entity for the Nomeclature schema.
type Nomeclature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Synonyms holds the value of the "synonyms" field.
	Synonyms []string `json:"synonyms,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nomeclature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nomeclature.FieldSynonyms:
			values[i] = new([]byte)
		case nomeclature.FieldID:
			values[i] = new(sql.NullInt64)
		case nomeclature.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Nomeclature", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nomeclature fields.
func (n *Nomeclature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nomeclature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case nomeclature.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				n.Name = value.String
			}
		case nomeclature.FieldSynonyms:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field synonyms", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Synonyms); err != nil {
					return fmt.Errorf("unmarshal field synonyms: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Nomeclature.
// Note that you need to call Nomeclature.Unwrap() before calling this method if this Nomeclature
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nomeclature) Update() *NomeclatureUpdateOne {
	return (&NomeclatureClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Nomeclature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Nomeclature) Unwrap() *Nomeclature {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nomeclature is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nomeclature) String() string {
	var builder strings.Builder
	builder.WriteString("Nomeclature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("name=")
	builder.WriteString(n.Name)
	builder.WriteString(", ")
	builder.WriteString("synonyms=")
	builder.WriteString(fmt.Sprintf("%v", n.Synonyms))
	builder.WriteByte(')')
	return builder.String()
}

// Nomeclatures is a parsable slice of Nomeclature.
type Nomeclatures []*Nomeclature

func (n Nomeclatures) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
