// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/goterm"
	"genomedb/ent/gotermontranscripts"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoTermOnTranscriptsCreate is the builder for creating a GoTermOnTranscripts entity.
type GoTermOnTranscriptsCreate struct {
	config
	mutation *GoTermOnTranscriptsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEvidenceCode sets the "evidence_code" field.
func (gtotc *GoTermOnTranscriptsCreate) SetEvidenceCode(s string) *GoTermOnTranscriptsCreate {
	gtotc.mutation.SetEvidenceCode(s)
	return gtotc
}

// SetGoTermID sets the "go_term_id" field.
func (gtotc *GoTermOnTranscriptsCreate) SetGoTermID(s string) *GoTermOnTranscriptsCreate {
	gtotc.mutation.SetGoTermID(s)
	return gtotc
}

// SetTranscriptID sets the "transcript_id" field.
func (gtotc *GoTermOnTranscriptsCreate) SetTranscriptID(s string) *GoTermOnTranscriptsCreate {
	gtotc.mutation.SetTranscriptID(s)
	return gtotc
}

// SetGoTerm sets the "go_term" edge to the GoTerm entity.
func (gtotc *GoTermOnTranscriptsCreate) SetGoTerm(g *GoTerm) *GoTermOnTranscriptsCreate {
	return gtotc.SetGoTermID(g.ID)
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (gtotc *GoTermOnTranscriptsCreate) SetTranscript(t *Transcript) *GoTermOnTranscriptsCreate {
	return gtotc.SetTranscriptID(t.ID)
}

// Mutation returns the GoTermOnTranscriptsMutation object of the builder.
func (gtotc *GoTermOnTranscriptsCreate) Mutation() *GoTermOnTranscriptsMutation {
	return gtotc.mutation
}

// Save creates the GoTermOnTranscripts in the database.
func (gtotc *GoTermOnTranscriptsCreate) Save(ctx context.Context) (*GoTermOnTranscripts, error) {
	var (
		err  error
		node *GoTermOnTranscripts
	)
	if len(gtotc.hooks) == 0 {
		if err = gtotc.check(); err != nil {
			return nil, err
		}
		node, err = gtotc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoTermOnTranscriptsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gtotc.check(); err != nil {
				return nil, err
			}
			gtotc.mutation = mutation
			if node, err = gtotc.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(gtotc.hooks) - 1; i >= 0; i-- {
			if gtotc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gtotc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gtotc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoTermOnTranscripts)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoTermOnTranscriptsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gtotc *GoTermOnTranscriptsCreate) SaveX(ctx context.Context) *GoTermOnTranscripts {
	v, err := gtotc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtotc *GoTermOnTranscriptsCreate) Exec(ctx context.Context) error {
	_, err := gtotc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtotc *GoTermOnTranscriptsCreate) ExecX(ctx context.Context) {
	if err := gtotc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtotc *GoTermOnTranscriptsCreate) check() error {
	if _, ok := gtotc.mutation.EvidenceCode(); !ok {
		return &ValidationError{Name: "evidence_code", err: errors.New(`ent: missing required field "GoTermOnTranscripts.evidence_code"`)}
	}
	if _, ok := gtotc.mutation.GoTermID(); !ok {
		return &ValidationError{Name: "go_term_id", err: errors.New(`ent: missing required field "GoTermOnTranscripts.go_term_id"`)}
	}
	if _, ok := gtotc.mutation.TranscriptID(); !ok {
		return &ValidationError{Name: "transcript_id", err: errors.New(`ent: missing required field "GoTermOnTranscripts.transcript_id"`)}
	}
	if _, ok := gtotc.mutation.GoTermID(); !ok {
		return &ValidationError{Name: "go_term", err: errors.New(`ent: missing required edge "GoTermOnTranscripts.go_term"`)}
	}
	if _, ok := gtotc.mutation.TranscriptID(); !ok {
		return &ValidationError{Name: "transcript", err: errors.New(`ent: missing required edge "GoTermOnTranscripts.transcript"`)}
	}
	return nil
}

func (gtotc *GoTermOnTranscriptsCreate) sqlSave(ctx context.Context) (*GoTermOnTranscripts, error) {
	_node, _spec := gtotc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gtotc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (gtotc *GoTermOnTranscriptsCreate) createSpec() (*GoTermOnTranscripts, *sqlgraph.CreateSpec) {
	var (
		_node = &GoTermOnTranscripts{config: gtotc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gotermontranscripts.Table,
		}
	)
	_spec.OnConflict = gtotc.conflict
	if value, ok := gtotc.mutation.EvidenceCode(); ok {
		_spec.SetField(gotermontranscripts.FieldEvidenceCode, field.TypeString, value)
		_node.EvidenceCode = value
	}
	if nodes := gtotc.mutation.GoTermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gotermontranscripts.GoTermTable,
			Columns: []string{gotermontranscripts.GoTermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GoTermID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gtotc.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gotermontranscripts.TranscriptTable,
			Columns: []string{gotermontranscripts.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TranscriptID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoTermOnTranscripts.Create().
//		SetEvidenceCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoTermOnTranscriptsUpsert) {
//			SetEvidenceCode(v+v).
//		}).
//		Exec(ctx)
func (gtotc *GoTermOnTranscriptsCreate) OnConflict(opts ...sql.ConflictOption) *GoTermOnTranscriptsUpsertOne {
	gtotc.conflict = opts
	return &GoTermOnTranscriptsUpsertOne{
		create: gtotc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoTermOnTranscripts.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gtotc *GoTermOnTranscriptsCreate) OnConflictColumns(columns ...string) *GoTermOnTranscriptsUpsertOne {
	gtotc.conflict = append(gtotc.conflict, sql.ConflictColumns(columns...))
	return &GoTermOnTranscriptsUpsertOne{
		create: gtotc,
	}
}

type (
	// GoTermOnTranscriptsUpsertOne is the builder for "upsert"-ing
	//  one GoTermOnTranscripts node.
	GoTermOnTranscriptsUpsertOne struct {
		create *GoTermOnTranscriptsCreate
	}

	// GoTermOnTranscriptsUpsert is the "OnConflict" setter.
	GoTermOnTranscriptsUpsert struct {
		*sql.UpdateSet
	}
)

// SetEvidenceCode sets the "evidence_code" field.
func (u *GoTermOnTranscriptsUpsert) SetEvidenceCode(v string) *GoTermOnTranscriptsUpsert {
	u.Set(gotermontranscripts.FieldEvidenceCode, v)
	return u
}

// UpdateEvidenceCode sets the "evidence_code" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsert) UpdateEvidenceCode() *GoTermOnTranscriptsUpsert {
	u.SetExcluded(gotermontranscripts.FieldEvidenceCode)
	return u
}

// SetGoTermID sets the "go_term_id" field.
func (u *GoTermOnTranscriptsUpsert) SetGoTermID(v string) *GoTermOnTranscriptsUpsert {
	u.Set(gotermontranscripts.FieldGoTermID, v)
	return u
}

// UpdateGoTermID sets the "go_term_id" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsert) UpdateGoTermID() *GoTermOnTranscriptsUpsert {
	u.SetExcluded(gotermontranscripts.FieldGoTermID)
	return u
}

// SetTranscriptID sets the "transcript_id" field.
func (u *GoTermOnTranscriptsUpsert) SetTranscriptID(v string) *GoTermOnTranscriptsUpsert {
	u.Set(gotermontranscripts.FieldTranscriptID, v)
	return u
}

// UpdateTranscriptID sets the "transcript_id" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsert) UpdateTranscriptID() *GoTermOnTranscriptsUpsert {
	u.SetExcluded(gotermontranscripts.FieldTranscriptID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GoTermOnTranscripts.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GoTermOnTranscriptsUpsertOne) UpdateNewValues() *GoTermOnTranscriptsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoTermOnTranscripts.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoTermOnTranscriptsUpsertOne) Ignore() *GoTermOnTranscriptsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoTermOnTranscriptsUpsertOne) DoNothing() *GoTermOnTranscriptsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoTermOnTranscriptsCreate.OnConflict
// documentation for more info.
func (u *GoTermOnTranscriptsUpsertOne) Update(set func(*GoTermOnTranscriptsUpsert)) *GoTermOnTranscriptsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoTermOnTranscriptsUpsert{UpdateSet: update})
	}))
	return u
}

// SetEvidenceCode sets the "evidence_code" field.
func (u *GoTermOnTranscriptsUpsertOne) SetEvidenceCode(v string) *GoTermOnTranscriptsUpsertOne {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.SetEvidenceCode(v)
	})
}

// UpdateEvidenceCode sets the "evidence_code" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsertOne) UpdateEvidenceCode() *GoTermOnTranscriptsUpsertOne {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.UpdateEvidenceCode()
	})
}

// SetGoTermID sets the "go_term_id" field.
func (u *GoTermOnTranscriptsUpsertOne) SetGoTermID(v string) *GoTermOnTranscriptsUpsertOne {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.SetGoTermID(v)
	})
}

// UpdateGoTermID sets the "go_term_id" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsertOne) UpdateGoTermID() *GoTermOnTranscriptsUpsertOne {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.UpdateGoTermID()
	})
}

// SetTranscriptID sets the "transcript_id" field.
func (u *GoTermOnTranscriptsUpsertOne) SetTranscriptID(v string) *GoTermOnTranscriptsUpsertOne {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.SetTranscriptID(v)
	})
}

// UpdateTranscriptID sets the "transcript_id" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsertOne) UpdateTranscriptID() *GoTermOnTranscriptsUpsertOne {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.UpdateTranscriptID()
	})
}

// Exec executes the query.
func (u *GoTermOnTranscriptsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoTermOnTranscriptsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoTermOnTranscriptsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// GoTermOnTranscriptsCreateBulk is the builder for creating many GoTermOnTranscripts entities in bulk.
type GoTermOnTranscriptsCreateBulk struct {
	config
	builders []*GoTermOnTranscriptsCreate
	conflict []sql.ConflictOption
}

// Save creates the GoTermOnTranscripts entities in the database.
func (gtotcb *GoTermOnTranscriptsCreateBulk) Save(ctx context.Context) ([]*GoTermOnTranscripts, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gtotcb.builders))
	nodes := make([]*GoTermOnTranscripts, len(gtotcb.builders))
	mutators := make([]Mutator, len(gtotcb.builders))
	for i := range gtotcb.builders {
		func(i int, root context.Context) {
			builder := gtotcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoTermOnTranscriptsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gtotcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gtotcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gtotcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gtotcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gtotcb *GoTermOnTranscriptsCreateBulk) SaveX(ctx context.Context) []*GoTermOnTranscripts {
	v, err := gtotcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtotcb *GoTermOnTranscriptsCreateBulk) Exec(ctx context.Context) error {
	_, err := gtotcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtotcb *GoTermOnTranscriptsCreateBulk) ExecX(ctx context.Context) {
	if err := gtotcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoTermOnTranscripts.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoTermOnTranscriptsUpsert) {
//			SetEvidenceCode(v+v).
//		}).
//		Exec(ctx)
func (gtotcb *GoTermOnTranscriptsCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoTermOnTranscriptsUpsertBulk {
	gtotcb.conflict = opts
	return &GoTermOnTranscriptsUpsertBulk{
		create: gtotcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoTermOnTranscripts.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gtotcb *GoTermOnTranscriptsCreateBulk) OnConflictColumns(columns ...string) *GoTermOnTranscriptsUpsertBulk {
	gtotcb.conflict = append(gtotcb.conflict, sql.ConflictColumns(columns...))
	return &GoTermOnTranscriptsUpsertBulk{
		create: gtotcb,
	}
}

// GoTermOnTranscriptsUpsertBulk is the builder for "upsert"-ing
// a bulk of GoTermOnTranscripts nodes.
type GoTermOnTranscriptsUpsertBulk struct {
	create *GoTermOnTranscriptsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoTermOnTranscripts.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GoTermOnTranscriptsUpsertBulk) UpdateNewValues() *GoTermOnTranscriptsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoTermOnTranscripts.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoTermOnTranscriptsUpsertBulk) Ignore() *GoTermOnTranscriptsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoTermOnTranscriptsUpsertBulk) DoNothing() *GoTermOnTranscriptsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoTermOnTranscriptsCreateBulk.OnConflict
// documentation for more info.
func (u *GoTermOnTranscriptsUpsertBulk) Update(set func(*GoTermOnTranscriptsUpsert)) *GoTermOnTranscriptsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoTermOnTranscriptsUpsert{UpdateSet: update})
	}))
	return u
}

// SetEvidenceCode sets the "evidence_code" field.
func (u *GoTermOnTranscriptsUpsertBulk) SetEvidenceCode(v string) *GoTermOnTranscriptsUpsertBulk {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.SetEvidenceCode(v)
	})
}

// UpdateEvidenceCode sets the "evidence_code" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsertBulk) UpdateEvidenceCode() *GoTermOnTranscriptsUpsertBulk {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.UpdateEvidenceCode()
	})
}

// SetGoTermID sets the "go_term_id" field.
func (u *GoTermOnTranscriptsUpsertBulk) SetGoTermID(v string) *GoTermOnTranscriptsUpsertBulk {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.SetGoTermID(v)
	})
}

// UpdateGoTermID sets the "go_term_id" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsertBulk) UpdateGoTermID() *GoTermOnTranscriptsUpsertBulk {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.UpdateGoTermID()
	})
}

// SetTranscriptID sets the "transcript_id" field.
func (u *GoTermOnTranscriptsUpsertBulk) SetTranscriptID(v string) *GoTermOnTranscriptsUpsertBulk {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.SetTranscriptID(v)
	})
}

// UpdateTranscriptID sets the "transcript_id" field to the value that was provided on create.
func (u *GoTermOnTranscriptsUpsertBulk) UpdateTranscriptID() *GoTermOnTranscriptsUpsertBulk {
	return u.Update(func(s *GoTermOnTranscriptsUpsert) {
		s.UpdateTranscriptID()
	})
}

// Exec executes the query.
func (u *GoTermOnTranscriptsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoTermOnTranscriptsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoTermOnTranscriptsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoTermOnTranscriptsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
