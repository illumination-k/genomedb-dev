// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/kog"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// KOG is the model entity for the KOG schema.
type KOG struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KOG) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kog.FieldID, kog.FieldDescription, kog.FieldCategory:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KOG", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KOG fields.
func (k *KOG) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kog.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				k.ID = value.String
			}
		case kog.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				k.Description = value.String
			}
		case kog.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				k.Category = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this KOG.
// Note that you need to call KOG.Unwrap() before calling this method if this KOG
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *KOG) Update() *KOGUpdateOne {
	return (&KOGClient{config: k.config}).UpdateOne(k)
}

// Unwrap unwraps the KOG entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *KOG) Unwrap() *KOG {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: KOG is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *KOG) String() string {
	var builder strings.Builder
	builder.WriteString("KOG(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	builder.WriteString("description=")
	builder.WriteString(k.Description)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(k.Category)
	builder.WriteByte(')')
	return builder.String()
}

// KOGs is a parsable slice of KOG.
type KOGs []*KOG

func (k KOGs) config(cfg config) {
	for _i := range k {
		k[_i].config = cfg
	}
}
