// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"genomedb/ent/goterm"
	"genomedb/ent/gotermontranscripts"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// GoTermOnTranscriptsQuery is the builder for querying GoTermOnTranscripts entities.
type GoTermOnTranscriptsQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	predicates     []predicate.GoTermOnTranscripts
	withGoTerm     *GoTermQuery
	withTranscript *TranscriptQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GoTermOnTranscriptsQuery builder.
func (gtotq *GoTermOnTranscriptsQuery) Where(ps ...predicate.GoTermOnTranscripts) *GoTermOnTranscriptsQuery {
	gtotq.predicates = append(gtotq.predicates, ps...)
	return gtotq
}

// Limit adds a limit step to the query.
func (gtotq *GoTermOnTranscriptsQuery) Limit(limit int) *GoTermOnTranscriptsQuery {
	gtotq.limit = &limit
	return gtotq
}

// Offset adds an offset step to the query.
func (gtotq *GoTermOnTranscriptsQuery) Offset(offset int) *GoTermOnTranscriptsQuery {
	gtotq.offset = &offset
	return gtotq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gtotq *GoTermOnTranscriptsQuery) Unique(unique bool) *GoTermOnTranscriptsQuery {
	gtotq.unique = &unique
	return gtotq
}

// Order adds an order step to the query.
func (gtotq *GoTermOnTranscriptsQuery) Order(o ...OrderFunc) *GoTermOnTranscriptsQuery {
	gtotq.order = append(gtotq.order, o...)
	return gtotq
}

// QueryGoTerm chains the current query on the "go_term" edge.
func (gtotq *GoTermOnTranscriptsQuery) QueryGoTerm() *GoTermQuery {
	query := &GoTermQuery{config: gtotq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtotq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtotq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gotermontranscripts.Table, gotermontranscripts.GoTermColumn, selector),
			sqlgraph.To(goterm.Table, goterm.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, gotermontranscripts.GoTermTable, gotermontranscripts.GoTermColumn),
		)
		fromU = sqlgraph.SetNeighbors(gtotq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTranscript chains the current query on the "transcript" edge.
func (gtotq *GoTermOnTranscriptsQuery) QueryTranscript() *TranscriptQuery {
	query := &TranscriptQuery{config: gtotq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtotq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtotq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gotermontranscripts.Table, gotermontranscripts.TranscriptColumn, selector),
			sqlgraph.To(transcript.Table, transcript.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, gotermontranscripts.TranscriptTable, gotermontranscripts.TranscriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(gtotq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GoTermOnTranscripts entity from the query.
// Returns a *NotFoundError when no GoTermOnTranscripts was found.
func (gtotq *GoTermOnTranscriptsQuery) First(ctx context.Context) (*GoTermOnTranscripts, error) {
	nodes, err := gtotq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gotermontranscripts.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gtotq *GoTermOnTranscriptsQuery) FirstX(ctx context.Context) *GoTermOnTranscripts {
	node, err := gtotq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single GoTermOnTranscripts entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GoTermOnTranscripts entity is found.
// Returns a *NotFoundError when no GoTermOnTranscripts entities are found.
func (gtotq *GoTermOnTranscriptsQuery) Only(ctx context.Context) (*GoTermOnTranscripts, error) {
	nodes, err := gtotq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gotermontranscripts.Label}
	default:
		return nil, &NotSingularError{gotermontranscripts.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gtotq *GoTermOnTranscriptsQuery) OnlyX(ctx context.Context) *GoTermOnTranscripts {
	node, err := gtotq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of GoTermOnTranscriptsSlice.
func (gtotq *GoTermOnTranscriptsQuery) All(ctx context.Context) ([]*GoTermOnTranscripts, error) {
	if err := gtotq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gtotq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gtotq *GoTermOnTranscriptsQuery) AllX(ctx context.Context) []*GoTermOnTranscripts {
	nodes, err := gtotq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (gtotq *GoTermOnTranscriptsQuery) Count(ctx context.Context) (int, error) {
	if err := gtotq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gtotq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gtotq *GoTermOnTranscriptsQuery) CountX(ctx context.Context) int {
	count, err := gtotq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gtotq *GoTermOnTranscriptsQuery) Exist(ctx context.Context) (bool, error) {
	if err := gtotq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gtotq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gtotq *GoTermOnTranscriptsQuery) ExistX(ctx context.Context) bool {
	exist, err := gtotq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GoTermOnTranscriptsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gtotq *GoTermOnTranscriptsQuery) Clone() *GoTermOnTranscriptsQuery {
	if gtotq == nil {
		return nil
	}
	return &GoTermOnTranscriptsQuery{
		config:         gtotq.config,
		limit:          gtotq.limit,
		offset:         gtotq.offset,
		order:          append([]OrderFunc{}, gtotq.order...),
		predicates:     append([]predicate.GoTermOnTranscripts{}, gtotq.predicates...),
		withGoTerm:     gtotq.withGoTerm.Clone(),
		withTranscript: gtotq.withTranscript.Clone(),
		// clone intermediate query.
		sql:    gtotq.sql.Clone(),
		path:   gtotq.path,
		unique: gtotq.unique,
	}
}

// WithGoTerm tells the query-builder to eager-load the nodes that are connected to
// the "go_term" edge. The optional arguments are used to configure the query builder of the edge.
func (gtotq *GoTermOnTranscriptsQuery) WithGoTerm(opts ...func(*GoTermQuery)) *GoTermOnTranscriptsQuery {
	query := &GoTermQuery{config: gtotq.config}
	for _, opt := range opts {
		opt(query)
	}
	gtotq.withGoTerm = query
	return gtotq
}

// WithTranscript tells the query-builder to eager-load the nodes that are connected to
// the "transcript" edge. The optional arguments are used to configure the query builder of the edge.
func (gtotq *GoTermOnTranscriptsQuery) WithTranscript(opts ...func(*TranscriptQuery)) *GoTermOnTranscriptsQuery {
	query := &TranscriptQuery{config: gtotq.config}
	for _, opt := range opts {
		opt(query)
	}
	gtotq.withTranscript = query
	return gtotq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EvidenceCode string `json:"evidence_code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GoTermOnTranscripts.Query().
//		GroupBy(gotermontranscripts.FieldEvidenceCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gtotq *GoTermOnTranscriptsQuery) GroupBy(field string, fields ...string) *GoTermOnTranscriptsGroupBy {
	grbuild := &GoTermOnTranscriptsGroupBy{config: gtotq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gtotq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gtotq.sqlQuery(ctx), nil
	}
	grbuild.label = gotermontranscripts.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EvidenceCode string `json:"evidence_code,omitempty"`
//	}
//
//	client.GoTermOnTranscripts.Query().
//		Select(gotermontranscripts.FieldEvidenceCode).
//		Scan(ctx, &v)
func (gtotq *GoTermOnTranscriptsQuery) Select(fields ...string) *GoTermOnTranscriptsSelect {
	gtotq.fields = append(gtotq.fields, fields...)
	selbuild := &GoTermOnTranscriptsSelect{GoTermOnTranscriptsQuery: gtotq}
	selbuild.label = gotermontranscripts.Label
	selbuild.flds, selbuild.scan = &gtotq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a GoTermOnTranscriptsSelect configured with the given aggregations.
func (gtotq *GoTermOnTranscriptsQuery) Aggregate(fns ...AggregateFunc) *GoTermOnTranscriptsSelect {
	return gtotq.Select().Aggregate(fns...)
}

func (gtotq *GoTermOnTranscriptsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gtotq.fields {
		if !gotermontranscripts.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gtotq.path != nil {
		prev, err := gtotq.path(ctx)
		if err != nil {
			return err
		}
		gtotq.sql = prev
	}
	return nil
}

func (gtotq *GoTermOnTranscriptsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GoTermOnTranscripts, error) {
	var (
		nodes       = []*GoTermOnTranscripts{}
		_spec       = gtotq.querySpec()
		loadedTypes = [2]bool{
			gtotq.withGoTerm != nil,
			gtotq.withTranscript != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GoTermOnTranscripts).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GoTermOnTranscripts{config: gtotq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gtotq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gtotq.withGoTerm; query != nil {
		if err := gtotq.loadGoTerm(ctx, query, nodes, nil,
			func(n *GoTermOnTranscripts, e *GoTerm) { n.Edges.GoTerm = e }); err != nil {
			return nil, err
		}
	}
	if query := gtotq.withTranscript; query != nil {
		if err := gtotq.loadTranscript(ctx, query, nodes, nil,
			func(n *GoTermOnTranscripts, e *Transcript) { n.Edges.Transcript = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gtotq *GoTermOnTranscriptsQuery) loadGoTerm(ctx context.Context, query *GoTermQuery, nodes []*GoTermOnTranscripts, init func(*GoTermOnTranscripts), assign func(*GoTermOnTranscripts, *GoTerm)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*GoTermOnTranscripts)
	for i := range nodes {
		fk := nodes[i].GoTermID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(goterm.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "go_term_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gtotq *GoTermOnTranscriptsQuery) loadTranscript(ctx context.Context, query *TranscriptQuery, nodes []*GoTermOnTranscripts, init func(*GoTermOnTranscripts), assign func(*GoTermOnTranscripts, *Transcript)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*GoTermOnTranscripts)
	for i := range nodes {
		fk := nodes[i].TranscriptID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(transcript.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "transcript_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gtotq *GoTermOnTranscriptsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gtotq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, gtotq.driver, _spec)
}

func (gtotq *GoTermOnTranscriptsQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := gtotq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (gtotq *GoTermOnTranscriptsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gotermontranscripts.Table,
			Columns: gotermontranscripts.Columns,
		},
		From:   gtotq.sql,
		Unique: true,
	}
	if unique := gtotq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gtotq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := gtotq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gtotq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gtotq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gtotq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gtotq *GoTermOnTranscriptsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gtotq.driver.Dialect())
	t1 := builder.Table(gotermontranscripts.Table)
	columns := gtotq.fields
	if len(columns) == 0 {
		columns = gotermontranscripts.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gtotq.sql != nil {
		selector = gtotq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gtotq.unique != nil && *gtotq.unique {
		selector.Distinct()
	}
	for _, p := range gtotq.predicates {
		p(selector)
	}
	for _, p := range gtotq.order {
		p(selector)
	}
	if offset := gtotq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gtotq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GoTermOnTranscriptsGroupBy is the group-by builder for GoTermOnTranscripts entities.
type GoTermOnTranscriptsGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gtotgb *GoTermOnTranscriptsGroupBy) Aggregate(fns ...AggregateFunc) *GoTermOnTranscriptsGroupBy {
	gtotgb.fns = append(gtotgb.fns, fns...)
	return gtotgb
}

// Scan applies the group-by query and scans the result into the given value.
func (gtotgb *GoTermOnTranscriptsGroupBy) Scan(ctx context.Context, v any) error {
	query, err := gtotgb.path(ctx)
	if err != nil {
		return err
	}
	gtotgb.sql = query
	return gtotgb.sqlScan(ctx, v)
}

func (gtotgb *GoTermOnTranscriptsGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range gtotgb.fields {
		if !gotermontranscripts.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gtotgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gtotgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gtotgb *GoTermOnTranscriptsGroupBy) sqlQuery() *sql.Selector {
	selector := gtotgb.sql.Select()
	aggregation := make([]string, 0, len(gtotgb.fns))
	for _, fn := range gtotgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(gtotgb.fields)+len(gtotgb.fns))
		for _, f := range gtotgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(gtotgb.fields...)...)
}

// GoTermOnTranscriptsSelect is the builder for selecting fields of GoTermOnTranscripts entities.
type GoTermOnTranscriptsSelect struct {
	*GoTermOnTranscriptsQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gtots *GoTermOnTranscriptsSelect) Aggregate(fns ...AggregateFunc) *GoTermOnTranscriptsSelect {
	gtots.fns = append(gtots.fns, fns...)
	return gtots
}

// Scan applies the selector query and scans the result into the given value.
func (gtots *GoTermOnTranscriptsSelect) Scan(ctx context.Context, v any) error {
	if err := gtots.prepareQuery(ctx); err != nil {
		return err
	}
	gtots.sql = gtots.GoTermOnTranscriptsQuery.sqlQuery(ctx)
	return gtots.sqlScan(ctx, v)
}

func (gtots *GoTermOnTranscriptsSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(gtots.fns))
	for _, fn := range gtots.fns {
		aggregation = append(aggregation, fn(gtots.sql))
	}
	switch n := len(*gtots.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		gtots.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		gtots.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := gtots.sql.Query()
	if err := gtots.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
