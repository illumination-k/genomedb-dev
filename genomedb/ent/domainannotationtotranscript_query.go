// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"genomedb/ent/domainannotation"
	"genomedb/ent/domainannotationtotranscript"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// DomainAnnotationToTranscriptQuery is the builder for querying DomainAnnotationToTranscript entities.
type DomainAnnotationToTranscriptQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	predicates     []predicate.DomainAnnotationToTranscript
	withDomain     *DomainAnnotationQuery
	withTranscript *TranscriptQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DomainAnnotationToTranscriptQuery builder.
func (dattq *DomainAnnotationToTranscriptQuery) Where(ps ...predicate.DomainAnnotationToTranscript) *DomainAnnotationToTranscriptQuery {
	dattq.predicates = append(dattq.predicates, ps...)
	return dattq
}

// Limit adds a limit step to the query.
func (dattq *DomainAnnotationToTranscriptQuery) Limit(limit int) *DomainAnnotationToTranscriptQuery {
	dattq.limit = &limit
	return dattq
}

// Offset adds an offset step to the query.
func (dattq *DomainAnnotationToTranscriptQuery) Offset(offset int) *DomainAnnotationToTranscriptQuery {
	dattq.offset = &offset
	return dattq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dattq *DomainAnnotationToTranscriptQuery) Unique(unique bool) *DomainAnnotationToTranscriptQuery {
	dattq.unique = &unique
	return dattq
}

// Order adds an order step to the query.
func (dattq *DomainAnnotationToTranscriptQuery) Order(o ...OrderFunc) *DomainAnnotationToTranscriptQuery {
	dattq.order = append(dattq.order, o...)
	return dattq
}

// QueryDomain chains the current query on the "domain" edge.
func (dattq *DomainAnnotationToTranscriptQuery) QueryDomain() *DomainAnnotationQuery {
	query := &DomainAnnotationQuery{config: dattq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dattq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dattq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(domainannotationtotranscript.Table, domainannotationtotranscript.DomainColumn, selector),
			sqlgraph.To(domainannotation.Table, domainannotation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, domainannotationtotranscript.DomainTable, domainannotationtotranscript.DomainColumn),
		)
		fromU = sqlgraph.SetNeighbors(dattq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTranscript chains the current query on the "transcript" edge.
func (dattq *DomainAnnotationToTranscriptQuery) QueryTranscript() *TranscriptQuery {
	query := &TranscriptQuery{config: dattq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dattq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dattq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(domainannotationtotranscript.Table, domainannotationtotranscript.TranscriptColumn, selector),
			sqlgraph.To(transcript.Table, transcript.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, domainannotationtotranscript.TranscriptTable, domainannotationtotranscript.TranscriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(dattq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DomainAnnotationToTranscript entity from the query.
// Returns a *NotFoundError when no DomainAnnotationToTranscript was found.
func (dattq *DomainAnnotationToTranscriptQuery) First(ctx context.Context) (*DomainAnnotationToTranscript, error) {
	nodes, err := dattq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{domainannotationtotranscript.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dattq *DomainAnnotationToTranscriptQuery) FirstX(ctx context.Context) *DomainAnnotationToTranscript {
	node, err := dattq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single DomainAnnotationToTranscript entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DomainAnnotationToTranscript entity is found.
// Returns a *NotFoundError when no DomainAnnotationToTranscript entities are found.
func (dattq *DomainAnnotationToTranscriptQuery) Only(ctx context.Context) (*DomainAnnotationToTranscript, error) {
	nodes, err := dattq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{domainannotationtotranscript.Label}
	default:
		return nil, &NotSingularError{domainannotationtotranscript.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dattq *DomainAnnotationToTranscriptQuery) OnlyX(ctx context.Context) *DomainAnnotationToTranscript {
	node, err := dattq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of DomainAnnotationToTranscripts.
func (dattq *DomainAnnotationToTranscriptQuery) All(ctx context.Context) ([]*DomainAnnotationToTranscript, error) {
	if err := dattq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dattq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dattq *DomainAnnotationToTranscriptQuery) AllX(ctx context.Context) []*DomainAnnotationToTranscript {
	nodes, err := dattq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (dattq *DomainAnnotationToTranscriptQuery) Count(ctx context.Context) (int, error) {
	if err := dattq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dattq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dattq *DomainAnnotationToTranscriptQuery) CountX(ctx context.Context) int {
	count, err := dattq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dattq *DomainAnnotationToTranscriptQuery) Exist(ctx context.Context) (bool, error) {
	if err := dattq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dattq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dattq *DomainAnnotationToTranscriptQuery) ExistX(ctx context.Context) bool {
	exist, err := dattq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DomainAnnotationToTranscriptQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dattq *DomainAnnotationToTranscriptQuery) Clone() *DomainAnnotationToTranscriptQuery {
	if dattq == nil {
		return nil
	}
	return &DomainAnnotationToTranscriptQuery{
		config:         dattq.config,
		limit:          dattq.limit,
		offset:         dattq.offset,
		order:          append([]OrderFunc{}, dattq.order...),
		predicates:     append([]predicate.DomainAnnotationToTranscript{}, dattq.predicates...),
		withDomain:     dattq.withDomain.Clone(),
		withTranscript: dattq.withTranscript.Clone(),
		// clone intermediate query.
		sql:    dattq.sql.Clone(),
		path:   dattq.path,
		unique: dattq.unique,
	}
}

// WithDomain tells the query-builder to eager-load the nodes that are connected to
// the "domain" edge. The optional arguments are used to configure the query builder of the edge.
func (dattq *DomainAnnotationToTranscriptQuery) WithDomain(opts ...func(*DomainAnnotationQuery)) *DomainAnnotationToTranscriptQuery {
	query := &DomainAnnotationQuery{config: dattq.config}
	for _, opt := range opts {
		opt(query)
	}
	dattq.withDomain = query
	return dattq
}

// WithTranscript tells the query-builder to eager-load the nodes that are connected to
// the "transcript" edge. The optional arguments are used to configure the query builder of the edge.
func (dattq *DomainAnnotationToTranscriptQuery) WithTranscript(opts ...func(*TranscriptQuery)) *DomainAnnotationToTranscriptQuery {
	query := &TranscriptQuery{config: dattq.config}
	for _, opt := range opts {
		opt(query)
	}
	dattq.withTranscript = query
	return dattq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DomainAnnotationID string `json:"domain_annotation_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DomainAnnotationToTranscript.Query().
//		GroupBy(domainannotationtotranscript.FieldDomainAnnotationID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dattq *DomainAnnotationToTranscriptQuery) GroupBy(field string, fields ...string) *DomainAnnotationToTranscriptGroupBy {
	grbuild := &DomainAnnotationToTranscriptGroupBy{config: dattq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dattq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dattq.sqlQuery(ctx), nil
	}
	grbuild.label = domainannotationtotranscript.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DomainAnnotationID string `json:"domain_annotation_id,omitempty"`
//	}
//
//	client.DomainAnnotationToTranscript.Query().
//		Select(domainannotationtotranscript.FieldDomainAnnotationID).
//		Scan(ctx, &v)
func (dattq *DomainAnnotationToTranscriptQuery) Select(fields ...string) *DomainAnnotationToTranscriptSelect {
	dattq.fields = append(dattq.fields, fields...)
	selbuild := &DomainAnnotationToTranscriptSelect{DomainAnnotationToTranscriptQuery: dattq}
	selbuild.label = domainannotationtotranscript.Label
	selbuild.flds, selbuild.scan = &dattq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a DomainAnnotationToTranscriptSelect configured with the given aggregations.
func (dattq *DomainAnnotationToTranscriptQuery) Aggregate(fns ...AggregateFunc) *DomainAnnotationToTranscriptSelect {
	return dattq.Select().Aggregate(fns...)
}

func (dattq *DomainAnnotationToTranscriptQuery) prepareQuery(ctx context.Context) error {
	for _, f := range dattq.fields {
		if !domainannotationtotranscript.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dattq.path != nil {
		prev, err := dattq.path(ctx)
		if err != nil {
			return err
		}
		dattq.sql = prev
	}
	return nil
}

func (dattq *DomainAnnotationToTranscriptQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DomainAnnotationToTranscript, error) {
	var (
		nodes       = []*DomainAnnotationToTranscript{}
		_spec       = dattq.querySpec()
		loadedTypes = [2]bool{
			dattq.withDomain != nil,
			dattq.withTranscript != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DomainAnnotationToTranscript).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DomainAnnotationToTranscript{config: dattq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dattq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dattq.withDomain; query != nil {
		if err := dattq.loadDomain(ctx, query, nodes, nil,
			func(n *DomainAnnotationToTranscript, e *DomainAnnotation) { n.Edges.Domain = e }); err != nil {
			return nil, err
		}
	}
	if query := dattq.withTranscript; query != nil {
		if err := dattq.loadTranscript(ctx, query, nodes, nil,
			func(n *DomainAnnotationToTranscript, e *Transcript) { n.Edges.Transcript = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dattq *DomainAnnotationToTranscriptQuery) loadDomain(ctx context.Context, query *DomainAnnotationQuery, nodes []*DomainAnnotationToTranscript, init func(*DomainAnnotationToTranscript), assign func(*DomainAnnotationToTranscript, *DomainAnnotation)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DomainAnnotationToTranscript)
	for i := range nodes {
		fk := nodes[i].DomainAnnotationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(domainannotation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "domain_annotation_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dattq *DomainAnnotationToTranscriptQuery) loadTranscript(ctx context.Context, query *TranscriptQuery, nodes []*DomainAnnotationToTranscript, init func(*DomainAnnotationToTranscript), assign func(*DomainAnnotationToTranscript, *Transcript)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*DomainAnnotationToTranscript)
	for i := range nodes {
		fk := nodes[i].TranscriptID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(transcript.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "transcript_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dattq *DomainAnnotationToTranscriptQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dattq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, dattq.driver, _spec)
}

func (dattq *DomainAnnotationToTranscriptQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := dattq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (dattq *DomainAnnotationToTranscriptQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   domainannotationtotranscript.Table,
			Columns: domainannotationtotranscript.Columns,
		},
		From:   dattq.sql,
		Unique: true,
	}
	if unique := dattq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := dattq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := dattq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dattq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dattq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dattq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dattq *DomainAnnotationToTranscriptQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dattq.driver.Dialect())
	t1 := builder.Table(domainannotationtotranscript.Table)
	columns := dattq.fields
	if len(columns) == 0 {
		columns = domainannotationtotranscript.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dattq.sql != nil {
		selector = dattq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dattq.unique != nil && *dattq.unique {
		selector.Distinct()
	}
	for _, p := range dattq.predicates {
		p(selector)
	}
	for _, p := range dattq.order {
		p(selector)
	}
	if offset := dattq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dattq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DomainAnnotationToTranscriptGroupBy is the group-by builder for DomainAnnotationToTranscript entities.
type DomainAnnotationToTranscriptGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dattgb *DomainAnnotationToTranscriptGroupBy) Aggregate(fns ...AggregateFunc) *DomainAnnotationToTranscriptGroupBy {
	dattgb.fns = append(dattgb.fns, fns...)
	return dattgb
}

// Scan applies the group-by query and scans the result into the given value.
func (dattgb *DomainAnnotationToTranscriptGroupBy) Scan(ctx context.Context, v any) error {
	query, err := dattgb.path(ctx)
	if err != nil {
		return err
	}
	dattgb.sql = query
	return dattgb.sqlScan(ctx, v)
}

func (dattgb *DomainAnnotationToTranscriptGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range dattgb.fields {
		if !domainannotationtotranscript.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dattgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dattgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dattgb *DomainAnnotationToTranscriptGroupBy) sqlQuery() *sql.Selector {
	selector := dattgb.sql.Select()
	aggregation := make([]string, 0, len(dattgb.fns))
	for _, fn := range dattgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dattgb.fields)+len(dattgb.fns))
		for _, f := range dattgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dattgb.fields...)...)
}

// DomainAnnotationToTranscriptSelect is the builder for selecting fields of DomainAnnotationToTranscript entities.
type DomainAnnotationToTranscriptSelect struct {
	*DomainAnnotationToTranscriptQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (datts *DomainAnnotationToTranscriptSelect) Aggregate(fns ...AggregateFunc) *DomainAnnotationToTranscriptSelect {
	datts.fns = append(datts.fns, fns...)
	return datts
}

// Scan applies the selector query and scans the result into the given value.
func (datts *DomainAnnotationToTranscriptSelect) Scan(ctx context.Context, v any) error {
	if err := datts.prepareQuery(ctx); err != nil {
		return err
	}
	datts.sql = datts.DomainAnnotationToTranscriptQuery.sqlQuery(ctx)
	return datts.sqlScan(ctx, v)
}

func (datts *DomainAnnotationToTranscriptSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(datts.fns))
	for _, fn := range datts.fns {
		aggregation = append(aggregation, fn(datts.sql))
	}
	switch n := len(*datts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		datts.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		datts.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := datts.sql.Query()
	if err := datts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
