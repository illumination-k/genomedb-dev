// Code generated by ent, DO NOT EDIT.

package domainannotationtotranscript

import (
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// DomainAnnotationID applies equality check predicate on the "domain_annotation_id" field. It's identical to DomainAnnotationIDEQ.
func DomainAnnotationID(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainAnnotationID), v))
	})
}

// TranscriptID applies equality check predicate on the "transcript_id" field. It's identical to TranscriptIDEQ.
func TranscriptID(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscriptID), v))
	})
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// Stop applies equality check predicate on the "stop" field. It's identical to StopEQ.
func Stop(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStop), v))
	})
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float64) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// DomainAnnotationIDEQ applies the EQ predicate on the "domain_annotation_id" field.
func DomainAnnotationIDEQ(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDNEQ applies the NEQ predicate on the "domain_annotation_id" field.
func DomainAnnotationIDNEQ(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDIn applies the In predicate on the "domain_annotation_id" field.
func DomainAnnotationIDIn(vs ...string) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDomainAnnotationID), v...))
	})
}

// DomainAnnotationIDNotIn applies the NotIn predicate on the "domain_annotation_id" field.
func DomainAnnotationIDNotIn(vs ...string) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDomainAnnotationID), v...))
	})
}

// DomainAnnotationIDGT applies the GT predicate on the "domain_annotation_id" field.
func DomainAnnotationIDGT(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDGTE applies the GTE predicate on the "domain_annotation_id" field.
func DomainAnnotationIDGTE(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDLT applies the LT predicate on the "domain_annotation_id" field.
func DomainAnnotationIDLT(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDLTE applies the LTE predicate on the "domain_annotation_id" field.
func DomainAnnotationIDLTE(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDContains applies the Contains predicate on the "domain_annotation_id" field.
func DomainAnnotationIDContains(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDHasPrefix applies the HasPrefix predicate on the "domain_annotation_id" field.
func DomainAnnotationIDHasPrefix(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDHasSuffix applies the HasSuffix predicate on the "domain_annotation_id" field.
func DomainAnnotationIDHasSuffix(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDEqualFold applies the EqualFold predicate on the "domain_annotation_id" field.
func DomainAnnotationIDEqualFold(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomainAnnotationID), v))
	})
}

// DomainAnnotationIDContainsFold applies the ContainsFold predicate on the "domain_annotation_id" field.
func DomainAnnotationIDContainsFold(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomainAnnotationID), v))
	})
}

// TranscriptIDEQ applies the EQ predicate on the "transcript_id" field.
func TranscriptIDEQ(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDNEQ applies the NEQ predicate on the "transcript_id" field.
func TranscriptIDNEQ(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDIn applies the In predicate on the "transcript_id" field.
func TranscriptIDIn(vs ...string) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTranscriptID), v...))
	})
}

// TranscriptIDNotIn applies the NotIn predicate on the "transcript_id" field.
func TranscriptIDNotIn(vs ...string) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTranscriptID), v...))
	})
}

// TranscriptIDGT applies the GT predicate on the "transcript_id" field.
func TranscriptIDGT(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDGTE applies the GTE predicate on the "transcript_id" field.
func TranscriptIDGTE(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDLT applies the LT predicate on the "transcript_id" field.
func TranscriptIDLT(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDLTE applies the LTE predicate on the "transcript_id" field.
func TranscriptIDLTE(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDContains applies the Contains predicate on the "transcript_id" field.
func TranscriptIDContains(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDHasPrefix applies the HasPrefix predicate on the "transcript_id" field.
func TranscriptIDHasPrefix(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDHasSuffix applies the HasSuffix predicate on the "transcript_id" field.
func TranscriptIDHasSuffix(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDEqualFold applies the EqualFold predicate on the "transcript_id" field.
func TranscriptIDEqualFold(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTranscriptID), v))
	})
}

// TranscriptIDContainsFold applies the ContainsFold predicate on the "transcript_id" field.
func TranscriptIDContainsFold(v string) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTranscriptID), v))
	})
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStart), v))
	})
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...int32) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStart), v...))
	})
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...int32) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStart), v...))
	})
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStart), v))
	})
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStart), v))
	})
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStart), v))
	})
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStart), v))
	})
}

// StopEQ applies the EQ predicate on the "stop" field.
func StopEQ(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStop), v))
	})
}

// StopNEQ applies the NEQ predicate on the "stop" field.
func StopNEQ(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStop), v))
	})
}

// StopIn applies the In predicate on the "stop" field.
func StopIn(vs ...int32) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStop), v...))
	})
}

// StopNotIn applies the NotIn predicate on the "stop" field.
func StopNotIn(vs ...int32) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStop), v...))
	})
}

// StopGT applies the GT predicate on the "stop" field.
func StopGT(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStop), v))
	})
}

// StopGTE applies the GTE predicate on the "stop" field.
func StopGTE(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStop), v))
	})
}

// StopLT applies the LT predicate on the "stop" field.
func StopLT(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStop), v))
	})
}

// StopLTE applies the LTE predicate on the "stop" field.
func StopLTE(v int32) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStop), v))
	})
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float64) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float64) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScore), v))
	})
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float64) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldScore), v...))
	})
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float64) predicate.DomainAnnotationToTranscript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldScore), v...))
	})
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float64) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScore), v))
	})
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float64) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScore), v))
	})
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float64) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScore), v))
	})
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float64) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScore), v))
	})
}

// HasDomain applies the HasEdge predicate on the "domain" edge.
func HasDomain() predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, DomainColumn),
			sqlgraph.To(DomainInverseTable, DomainAnnotationFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DomainTable, DomainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDomainWith applies the HasEdge predicate on the "domain" edge with a given conditions (other predicates).
func HasDomainWith(preds ...predicate.DomainAnnotation) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, DomainColumn),
			sqlgraph.To(DomainInverseTable, DomainAnnotationFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DomainTable, DomainColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranscript applies the HasEdge predicate on the "transcript" edge.
func HasTranscript() predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TranscriptColumn),
			sqlgraph.To(TranscriptInverseTable, TranscriptFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TranscriptTable, TranscriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranscriptWith applies the HasEdge predicate on the "transcript" edge with a given conditions (other predicates).
func HasTranscriptWith(preds ...predicate.Transcript) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TranscriptColumn),
			sqlgraph.To(TranscriptInverseTable, TranscriptFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TranscriptTable, TranscriptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DomainAnnotationToTranscript) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DomainAnnotationToTranscript) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DomainAnnotationToTranscript) predicate.DomainAnnotationToTranscript {
	return predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		p(s.Not())
	})
}
