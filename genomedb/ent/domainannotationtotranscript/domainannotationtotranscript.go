// Code generated by ent, DO NOT EDIT.

package domainannotationtotranscript

const (
	// Label holds the string label denoting the domainannotationtotranscript type in the database.
	Label = "domain_annotation_to_transcript"
	// FieldDomainAnnotationID holds the string denoting the domain_annotation_id field in the database.
	FieldDomainAnnotationID = "domain_annotation_id"
	// FieldTranscriptID holds the string denoting the transcript_id field in the database.
	FieldTranscriptID = "transcript_id"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldStop holds the string denoting the stop field in the database.
	FieldStop = "stop"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// EdgeDomain holds the string denoting the domain edge name in mutations.
	EdgeDomain = "domain"
	// EdgeTranscript holds the string denoting the transcript edge name in mutations.
	EdgeTranscript = "transcript"
	// DomainAnnotationFieldID holds the string denoting the ID field of the DomainAnnotation.
	DomainAnnotationFieldID = "id"
	// TranscriptFieldID holds the string denoting the ID field of the Transcript.
	TranscriptFieldID = "id"
	// Table holds the table name of the domainannotationtotranscript in the database.
	Table = "domain_annotation_to_transcripts"
	// DomainTable is the table that holds the domain relation/edge.
	DomainTable = "domain_annotation_to_transcripts"
	// DomainInverseTable is the table name for the DomainAnnotation entity.
	// It exists in this package in order to avoid circular dependency with the "domainannotation" package.
	DomainInverseTable = "domain_annotations"
	// DomainColumn is the table column denoting the domain relation/edge.
	DomainColumn = "domain_annotation_id"
	// TranscriptTable is the table that holds the transcript relation/edge.
	TranscriptTable = "domain_annotation_to_transcripts"
	// TranscriptInverseTable is the table name for the Transcript entity.
	// It exists in this package in order to avoid circular dependency with the "transcript" package.
	TranscriptInverseTable = "transcripts"
	// TranscriptColumn is the table column denoting the transcript relation/edge.
	TranscriptColumn = "transcript_id"
)

// Columns holds all SQL columns for domainannotationtotranscript fields.
var Columns = []string{
	FieldDomainAnnotationID,
	FieldTranscriptID,
	FieldStart,
	FieldStop,
	FieldScore,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// StartValidator is a validator for the "start" field. It is called by the builders before save.
	StartValidator func(int32) error
	// StopValidator is a validator for the "stop" field. It is called by the builders before save.
	StopValidator func(int32) error
)
