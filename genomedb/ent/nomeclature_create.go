// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/nomeclature"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NomeclatureCreate is the builder for creating a Nomeclature entity.
type NomeclatureCreate struct {
	config
	mutation *NomeclatureMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (nc *NomeclatureCreate) SetName(s string) *NomeclatureCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetSynonyms sets the "synonyms" field.
func (nc *NomeclatureCreate) SetSynonyms(s []string) *NomeclatureCreate {
	nc.mutation.SetSynonyms(s)
	return nc
}

// Mutation returns the NomeclatureMutation object of the builder.
func (nc *NomeclatureCreate) Mutation() *NomeclatureMutation {
	return nc.mutation
}

// Save creates the Nomeclature in the database.
func (nc *NomeclatureCreate) Save(ctx context.Context) (*Nomeclature, error) {
	var (
		err  error
		node *Nomeclature
	)
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NomeclatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			if node, err = nc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			if nc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Nomeclature)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NomeclatureMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NomeclatureCreate) SaveX(ctx context.Context) *Nomeclature {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NomeclatureCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NomeclatureCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NomeclatureCreate) check() error {
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Nomeclature.name"`)}
	}
	if _, ok := nc.mutation.Synonyms(); !ok {
		return &ValidationError{Name: "synonyms", err: errors.New(`ent: missing required field "Nomeclature.synonyms"`)}
	}
	return nil
}

func (nc *NomeclatureCreate) sqlSave(ctx context.Context) (*Nomeclature, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nc *NomeclatureCreate) createSpec() (*Nomeclature, *sqlgraph.CreateSpec) {
	var (
		_node = &Nomeclature{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nomeclature.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nomeclature.FieldID,
			},
		}
	)
	_spec.OnConflict = nc.conflict
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(nomeclature.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Synonyms(); ok {
		_spec.SetField(nomeclature.FieldSynonyms, field.TypeJSON, value)
		_node.Synonyms = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Nomeclature.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NomeclatureUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (nc *NomeclatureCreate) OnConflict(opts ...sql.ConflictOption) *NomeclatureUpsertOne {
	nc.conflict = opts
	return &NomeclatureUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Nomeclature.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NomeclatureCreate) OnConflictColumns(columns ...string) *NomeclatureUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NomeclatureUpsertOne{
		create: nc,
	}
}

type (
	// NomeclatureUpsertOne is the builder for "upsert"-ing
	//  one Nomeclature node.
	NomeclatureUpsertOne struct {
		create *NomeclatureCreate
	}

	// NomeclatureUpsert is the "OnConflict" setter.
	NomeclatureUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *NomeclatureUpsert) SetName(v string) *NomeclatureUpsert {
	u.Set(nomeclature.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NomeclatureUpsert) UpdateName() *NomeclatureUpsert {
	u.SetExcluded(nomeclature.FieldName)
	return u
}

// SetSynonyms sets the "synonyms" field.
func (u *NomeclatureUpsert) SetSynonyms(v []string) *NomeclatureUpsert {
	u.Set(nomeclature.FieldSynonyms, v)
	return u
}

// UpdateSynonyms sets the "synonyms" field to the value that was provided on create.
func (u *NomeclatureUpsert) UpdateSynonyms() *NomeclatureUpsert {
	u.SetExcluded(nomeclature.FieldSynonyms)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Nomeclature.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NomeclatureUpsertOne) UpdateNewValues() *NomeclatureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Nomeclature.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NomeclatureUpsertOne) Ignore() *NomeclatureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NomeclatureUpsertOne) DoNothing() *NomeclatureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NomeclatureCreate.OnConflict
// documentation for more info.
func (u *NomeclatureUpsertOne) Update(set func(*NomeclatureUpsert)) *NomeclatureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NomeclatureUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *NomeclatureUpsertOne) SetName(v string) *NomeclatureUpsertOne {
	return u.Update(func(s *NomeclatureUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NomeclatureUpsertOne) UpdateName() *NomeclatureUpsertOne {
	return u.Update(func(s *NomeclatureUpsert) {
		s.UpdateName()
	})
}

// SetSynonyms sets the "synonyms" field.
func (u *NomeclatureUpsertOne) SetSynonyms(v []string) *NomeclatureUpsertOne {
	return u.Update(func(s *NomeclatureUpsert) {
		s.SetSynonyms(v)
	})
}

// UpdateSynonyms sets the "synonyms" field to the value that was provided on create.
func (u *NomeclatureUpsertOne) UpdateSynonyms() *NomeclatureUpsertOne {
	return u.Update(func(s *NomeclatureUpsert) {
		s.UpdateSynonyms()
	})
}

// Exec executes the query.
func (u *NomeclatureUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NomeclatureCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NomeclatureUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NomeclatureUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NomeclatureUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NomeclatureCreateBulk is the builder for creating many Nomeclature entities in bulk.
type NomeclatureCreateBulk struct {
	config
	builders []*NomeclatureCreate
	conflict []sql.ConflictOption
}

// Save creates the Nomeclature entities in the database.
func (ncb *NomeclatureCreateBulk) Save(ctx context.Context) ([]*Nomeclature, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Nomeclature, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NomeclatureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NomeclatureCreateBulk) SaveX(ctx context.Context) []*Nomeclature {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NomeclatureCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NomeclatureCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Nomeclature.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NomeclatureUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ncb *NomeclatureCreateBulk) OnConflict(opts ...sql.ConflictOption) *NomeclatureUpsertBulk {
	ncb.conflict = opts
	return &NomeclatureUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Nomeclature.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NomeclatureCreateBulk) OnConflictColumns(columns ...string) *NomeclatureUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NomeclatureUpsertBulk{
		create: ncb,
	}
}

// NomeclatureUpsertBulk is the builder for "upsert"-ing
// a bulk of Nomeclature nodes.
type NomeclatureUpsertBulk struct {
	create *NomeclatureCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Nomeclature.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *NomeclatureUpsertBulk) UpdateNewValues() *NomeclatureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Nomeclature.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NomeclatureUpsertBulk) Ignore() *NomeclatureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NomeclatureUpsertBulk) DoNothing() *NomeclatureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NomeclatureCreateBulk.OnConflict
// documentation for more info.
func (u *NomeclatureUpsertBulk) Update(set func(*NomeclatureUpsert)) *NomeclatureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NomeclatureUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *NomeclatureUpsertBulk) SetName(v string) *NomeclatureUpsertBulk {
	return u.Update(func(s *NomeclatureUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NomeclatureUpsertBulk) UpdateName() *NomeclatureUpsertBulk {
	return u.Update(func(s *NomeclatureUpsert) {
		s.UpdateName()
	})
}

// SetSynonyms sets the "synonyms" field.
func (u *NomeclatureUpsertBulk) SetSynonyms(v []string) *NomeclatureUpsertBulk {
	return u.Update(func(s *NomeclatureUpsert) {
		s.SetSynonyms(v)
	})
}

// UpdateSynonyms sets the "synonyms" field to the value that was provided on create.
func (u *NomeclatureUpsertBulk) UpdateSynonyms() *NomeclatureUpsertBulk {
	return u.Update(func(s *NomeclatureUpsert) {
		s.UpdateSynonyms()
	})
}

// Exec executes the query.
func (u *NomeclatureUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NomeclatureCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NomeclatureCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NomeclatureUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
