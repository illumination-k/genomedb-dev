// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"genomedb/ent/keggorthlogy"
	"genomedb/ent/keggpathway"
	"genomedb/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeggOrthlogyQuery is the builder for querying KeggOrthlogy entities.
type KeggOrthlogyQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.KeggOrthlogy
	withPathways *KeggPathwayQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KeggOrthlogyQuery builder.
func (koq *KeggOrthlogyQuery) Where(ps ...predicate.KeggOrthlogy) *KeggOrthlogyQuery {
	koq.predicates = append(koq.predicates, ps...)
	return koq
}

// Limit adds a limit step to the query.
func (koq *KeggOrthlogyQuery) Limit(limit int) *KeggOrthlogyQuery {
	koq.limit = &limit
	return koq
}

// Offset adds an offset step to the query.
func (koq *KeggOrthlogyQuery) Offset(offset int) *KeggOrthlogyQuery {
	koq.offset = &offset
	return koq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (koq *KeggOrthlogyQuery) Unique(unique bool) *KeggOrthlogyQuery {
	koq.unique = &unique
	return koq
}

// Order adds an order step to the query.
func (koq *KeggOrthlogyQuery) Order(o ...OrderFunc) *KeggOrthlogyQuery {
	koq.order = append(koq.order, o...)
	return koq
}

// QueryPathways chains the current query on the "pathways" edge.
func (koq *KeggOrthlogyQuery) QueryPathways() *KeggPathwayQuery {
	query := &KeggPathwayQuery{config: koq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := koq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := koq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(keggorthlogy.Table, keggorthlogy.FieldID, selector),
			sqlgraph.To(keggpathway.Table, keggpathway.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, keggorthlogy.PathwaysTable, keggorthlogy.PathwaysPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(koq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KeggOrthlogy entity from the query.
// Returns a *NotFoundError when no KeggOrthlogy was found.
func (koq *KeggOrthlogyQuery) First(ctx context.Context) (*KeggOrthlogy, error) {
	nodes, err := koq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{keggorthlogy.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (koq *KeggOrthlogyQuery) FirstX(ctx context.Context) *KeggOrthlogy {
	node, err := koq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KeggOrthlogy ID from the query.
// Returns a *NotFoundError when no KeggOrthlogy ID was found.
func (koq *KeggOrthlogyQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = koq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{keggorthlogy.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (koq *KeggOrthlogyQuery) FirstIDX(ctx context.Context) string {
	id, err := koq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KeggOrthlogy entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KeggOrthlogy entity is found.
// Returns a *NotFoundError when no KeggOrthlogy entities are found.
func (koq *KeggOrthlogyQuery) Only(ctx context.Context) (*KeggOrthlogy, error) {
	nodes, err := koq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{keggorthlogy.Label}
	default:
		return nil, &NotSingularError{keggorthlogy.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (koq *KeggOrthlogyQuery) OnlyX(ctx context.Context) *KeggOrthlogy {
	node, err := koq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KeggOrthlogy ID in the query.
// Returns a *NotSingularError when more than one KeggOrthlogy ID is found.
// Returns a *NotFoundError when no entities are found.
func (koq *KeggOrthlogyQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = koq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{keggorthlogy.Label}
	default:
		err = &NotSingularError{keggorthlogy.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (koq *KeggOrthlogyQuery) OnlyIDX(ctx context.Context) string {
	id, err := koq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KeggOrthlogies.
func (koq *KeggOrthlogyQuery) All(ctx context.Context) ([]*KeggOrthlogy, error) {
	if err := koq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return koq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (koq *KeggOrthlogyQuery) AllX(ctx context.Context) []*KeggOrthlogy {
	nodes, err := koq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KeggOrthlogy IDs.
func (koq *KeggOrthlogyQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := koq.Select(keggorthlogy.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (koq *KeggOrthlogyQuery) IDsX(ctx context.Context) []string {
	ids, err := koq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (koq *KeggOrthlogyQuery) Count(ctx context.Context) (int, error) {
	if err := koq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return koq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (koq *KeggOrthlogyQuery) CountX(ctx context.Context) int {
	count, err := koq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (koq *KeggOrthlogyQuery) Exist(ctx context.Context) (bool, error) {
	if err := koq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return koq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (koq *KeggOrthlogyQuery) ExistX(ctx context.Context) bool {
	exist, err := koq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KeggOrthlogyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (koq *KeggOrthlogyQuery) Clone() *KeggOrthlogyQuery {
	if koq == nil {
		return nil
	}
	return &KeggOrthlogyQuery{
		config:       koq.config,
		limit:        koq.limit,
		offset:       koq.offset,
		order:        append([]OrderFunc{}, koq.order...),
		predicates:   append([]predicate.KeggOrthlogy{}, koq.predicates...),
		withPathways: koq.withPathways.Clone(),
		// clone intermediate query.
		sql:    koq.sql.Clone(),
		path:   koq.path,
		unique: koq.unique,
	}
}

// WithPathways tells the query-builder to eager-load the nodes that are connected to
// the "pathways" edge. The optional arguments are used to configure the query builder of the edge.
func (koq *KeggOrthlogyQuery) WithPathways(opts ...func(*KeggPathwayQuery)) *KeggOrthlogyQuery {
	query := &KeggPathwayQuery{config: koq.config}
	for _, opt := range opts {
		opt(query)
	}
	koq.withPathways = query
	return koq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KeggOrthlogy.Query().
//		GroupBy(keggorthlogy.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (koq *KeggOrthlogyQuery) GroupBy(field string, fields ...string) *KeggOrthlogyGroupBy {
	grbuild := &KeggOrthlogyGroupBy{config: koq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := koq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return koq.sqlQuery(ctx), nil
	}
	grbuild.label = keggorthlogy.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.KeggOrthlogy.Query().
//		Select(keggorthlogy.FieldName).
//		Scan(ctx, &v)
func (koq *KeggOrthlogyQuery) Select(fields ...string) *KeggOrthlogySelect {
	koq.fields = append(koq.fields, fields...)
	selbuild := &KeggOrthlogySelect{KeggOrthlogyQuery: koq}
	selbuild.label = keggorthlogy.Label
	selbuild.flds, selbuild.scan = &koq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a KeggOrthlogySelect configured with the given aggregations.
func (koq *KeggOrthlogyQuery) Aggregate(fns ...AggregateFunc) *KeggOrthlogySelect {
	return koq.Select().Aggregate(fns...)
}

func (koq *KeggOrthlogyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range koq.fields {
		if !keggorthlogy.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if koq.path != nil {
		prev, err := koq.path(ctx)
		if err != nil {
			return err
		}
		koq.sql = prev
	}
	return nil
}

func (koq *KeggOrthlogyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KeggOrthlogy, error) {
	var (
		nodes       = []*KeggOrthlogy{}
		_spec       = koq.querySpec()
		loadedTypes = [1]bool{
			koq.withPathways != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KeggOrthlogy).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KeggOrthlogy{config: koq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, koq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := koq.withPathways; query != nil {
		if err := koq.loadPathways(ctx, query, nodes,
			func(n *KeggOrthlogy) { n.Edges.Pathways = []*KeggPathway{} },
			func(n *KeggOrthlogy, e *KeggPathway) { n.Edges.Pathways = append(n.Edges.Pathways, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (koq *KeggOrthlogyQuery) loadPathways(ctx context.Context, query *KeggPathwayQuery, nodes []*KeggOrthlogy, init func(*KeggOrthlogy), assign func(*KeggOrthlogy, *KeggPathway)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*KeggOrthlogy)
	nids := make(map[string]map[*KeggOrthlogy]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(keggorthlogy.PathwaysTable)
		s.Join(joinT).On(s.C(keggpathway.FieldID), joinT.C(keggorthlogy.PathwaysPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(keggorthlogy.PathwaysPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(keggorthlogy.PathwaysPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullString)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := values[0].(*sql.NullString).String
			inValue := values[1].(*sql.NullString).String
			if nids[inValue] == nil {
				nids[inValue] = map[*KeggOrthlogy]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "pathways" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (koq *KeggOrthlogyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := koq.querySpec()
	_spec.Node.Columns = koq.fields
	if len(koq.fields) > 0 {
		_spec.Unique = koq.unique != nil && *koq.unique
	}
	return sqlgraph.CountNodes(ctx, koq.driver, _spec)
}

func (koq *KeggOrthlogyQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := koq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (koq *KeggOrthlogyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   keggorthlogy.Table,
			Columns: keggorthlogy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: keggorthlogy.FieldID,
			},
		},
		From:   koq.sql,
		Unique: true,
	}
	if unique := koq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := koq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keggorthlogy.FieldID)
		for i := range fields {
			if fields[i] != keggorthlogy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := koq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := koq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := koq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := koq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (koq *KeggOrthlogyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(koq.driver.Dialect())
	t1 := builder.Table(keggorthlogy.Table)
	columns := koq.fields
	if len(columns) == 0 {
		columns = keggorthlogy.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if koq.sql != nil {
		selector = koq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if koq.unique != nil && *koq.unique {
		selector.Distinct()
	}
	for _, p := range koq.predicates {
		p(selector)
	}
	for _, p := range koq.order {
		p(selector)
	}
	if offset := koq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := koq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KeggOrthlogyGroupBy is the group-by builder for KeggOrthlogy entities.
type KeggOrthlogyGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kogb *KeggOrthlogyGroupBy) Aggregate(fns ...AggregateFunc) *KeggOrthlogyGroupBy {
	kogb.fns = append(kogb.fns, fns...)
	return kogb
}

// Scan applies the group-by query and scans the result into the given value.
func (kogb *KeggOrthlogyGroupBy) Scan(ctx context.Context, v any) error {
	query, err := kogb.path(ctx)
	if err != nil {
		return err
	}
	kogb.sql = query
	return kogb.sqlScan(ctx, v)
}

func (kogb *KeggOrthlogyGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range kogb.fields {
		if !keggorthlogy.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kogb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kogb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kogb *KeggOrthlogyGroupBy) sqlQuery() *sql.Selector {
	selector := kogb.sql.Select()
	aggregation := make([]string, 0, len(kogb.fns))
	for _, fn := range kogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(kogb.fields)+len(kogb.fns))
		for _, f := range kogb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(kogb.fields...)...)
}

// KeggOrthlogySelect is the builder for selecting fields of KeggOrthlogy entities.
type KeggOrthlogySelect struct {
	*KeggOrthlogyQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (kos *KeggOrthlogySelect) Aggregate(fns ...AggregateFunc) *KeggOrthlogySelect {
	kos.fns = append(kos.fns, fns...)
	return kos
}

// Scan applies the selector query and scans the result into the given value.
func (kos *KeggOrthlogySelect) Scan(ctx context.Context, v any) error {
	if err := kos.prepareQuery(ctx); err != nil {
		return err
	}
	kos.sql = kos.KeggOrthlogyQuery.sqlQuery(ctx)
	return kos.sqlScan(ctx, v)
}

func (kos *KeggOrthlogySelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(kos.fns))
	for _, fn := range kos.fns {
		aggregation = append(aggregation, fn(kos.sql))
	}
	switch n := len(*kos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		kos.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		kos.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := kos.sql.Query()
	if err := kos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
