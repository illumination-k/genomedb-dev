// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/genome"
	"genomedb/ent/scaffold"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaffoldCreate is the builder for creating a Scaffold entity.
type ScaffoldCreate struct {
	config
	mutation *ScaffoldMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSeqname sets the "seqname" field.
func (sc *ScaffoldCreate) SetSeqname(s string) *ScaffoldCreate {
	sc.mutation.SetSeqname(s)
	return sc
}

// SetSeq sets the "seq" field.
func (sc *ScaffoldCreate) SetSeq(s string) *ScaffoldCreate {
	sc.mutation.SetSeq(s)
	return sc
}

// SetGenomeID sets the "genome" edge to the Genome entity by ID.
func (sc *ScaffoldCreate) SetGenomeID(id string) *ScaffoldCreate {
	sc.mutation.SetGenomeID(id)
	return sc
}

// SetNillableGenomeID sets the "genome" edge to the Genome entity by ID if the given value is not nil.
func (sc *ScaffoldCreate) SetNillableGenomeID(id *string) *ScaffoldCreate {
	if id != nil {
		sc = sc.SetGenomeID(*id)
	}
	return sc
}

// SetGenome sets the "genome" edge to the Genome entity.
func (sc *ScaffoldCreate) SetGenome(g *Genome) *ScaffoldCreate {
	return sc.SetGenomeID(g.ID)
}

// Mutation returns the ScaffoldMutation object of the builder.
func (sc *ScaffoldCreate) Mutation() *ScaffoldMutation {
	return sc.mutation
}

// Save creates the Scaffold in the database.
func (sc *ScaffoldCreate) Save(ctx context.Context) (*Scaffold, error) {
	var (
		err  error
		node *Scaffold
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScaffoldMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Scaffold)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ScaffoldMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScaffoldCreate) SaveX(ctx context.Context) *Scaffold {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScaffoldCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScaffoldCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScaffoldCreate) check() error {
	if _, ok := sc.mutation.Seqname(); !ok {
		return &ValidationError{Name: "seqname", err: errors.New(`ent: missing required field "Scaffold.seqname"`)}
	}
	if _, ok := sc.mutation.Seq(); !ok {
		return &ValidationError{Name: "seq", err: errors.New(`ent: missing required field "Scaffold.seq"`)}
	}
	return nil
}

func (sc *ScaffoldCreate) sqlSave(ctx context.Context) (*Scaffold, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *ScaffoldCreate) createSpec() (*Scaffold, *sqlgraph.CreateSpec) {
	var (
		_node = &Scaffold{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scaffold.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scaffold.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.Seqname(); ok {
		_spec.SetField(scaffold.FieldSeqname, field.TypeString, value)
		_node.Seqname = value
	}
	if value, ok := sc.mutation.Seq(); ok {
		_spec.SetField(scaffold.FieldSeq, field.TypeString, value)
		_node.Seq = value
	}
	if nodes := sc.mutation.GenomeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scaffold.GenomeTable,
			Columns: []string{scaffold.GenomeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: genome.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.genome_scaffolds = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scaffold.Create().
//		SetSeqname(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScaffoldUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (sc *ScaffoldCreate) OnConflict(opts ...sql.ConflictOption) *ScaffoldUpsertOne {
	sc.conflict = opts
	return &ScaffoldUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scaffold.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ScaffoldCreate) OnConflictColumns(columns ...string) *ScaffoldUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScaffoldUpsertOne{
		create: sc,
	}
}

type (
	// ScaffoldUpsertOne is the builder for "upsert"-ing
	//  one Scaffold node.
	ScaffoldUpsertOne struct {
		create *ScaffoldCreate
	}

	// ScaffoldUpsert is the "OnConflict" setter.
	ScaffoldUpsert struct {
		*sql.UpdateSet
	}
)

// SetSeqname sets the "seqname" field.
func (u *ScaffoldUpsert) SetSeqname(v string) *ScaffoldUpsert {
	u.Set(scaffold.FieldSeqname, v)
	return u
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *ScaffoldUpsert) UpdateSeqname() *ScaffoldUpsert {
	u.SetExcluded(scaffold.FieldSeqname)
	return u
}

// SetSeq sets the "seq" field.
func (u *ScaffoldUpsert) SetSeq(v string) *ScaffoldUpsert {
	u.Set(scaffold.FieldSeq, v)
	return u
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *ScaffoldUpsert) UpdateSeq() *ScaffoldUpsert {
	u.SetExcluded(scaffold.FieldSeq)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Scaffold.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ScaffoldUpsertOne) UpdateNewValues() *ScaffoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scaffold.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScaffoldUpsertOne) Ignore() *ScaffoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScaffoldUpsertOne) DoNothing() *ScaffoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScaffoldCreate.OnConflict
// documentation for more info.
func (u *ScaffoldUpsertOne) Update(set func(*ScaffoldUpsert)) *ScaffoldUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScaffoldUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *ScaffoldUpsertOne) SetSeqname(v string) *ScaffoldUpsertOne {
	return u.Update(func(s *ScaffoldUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *ScaffoldUpsertOne) UpdateSeqname() *ScaffoldUpsertOne {
	return u.Update(func(s *ScaffoldUpsert) {
		s.UpdateSeqname()
	})
}

// SetSeq sets the "seq" field.
func (u *ScaffoldUpsertOne) SetSeq(v string) *ScaffoldUpsertOne {
	return u.Update(func(s *ScaffoldUpsert) {
		s.SetSeq(v)
	})
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *ScaffoldUpsertOne) UpdateSeq() *ScaffoldUpsertOne {
	return u.Update(func(s *ScaffoldUpsert) {
		s.UpdateSeq()
	})
}

// Exec executes the query.
func (u *ScaffoldUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScaffoldCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScaffoldUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScaffoldUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScaffoldUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScaffoldCreateBulk is the builder for creating many Scaffold entities in bulk.
type ScaffoldCreateBulk struct {
	config
	builders []*ScaffoldCreate
	conflict []sql.ConflictOption
}

// Save creates the Scaffold entities in the database.
func (scb *ScaffoldCreateBulk) Save(ctx context.Context) ([]*Scaffold, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scaffold, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaffoldMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScaffoldCreateBulk) SaveX(ctx context.Context) []*Scaffold {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScaffoldCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScaffoldCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scaffold.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScaffoldUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (scb *ScaffoldCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScaffoldUpsertBulk {
	scb.conflict = opts
	return &ScaffoldUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scaffold.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ScaffoldCreateBulk) OnConflictColumns(columns ...string) *ScaffoldUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScaffoldUpsertBulk{
		create: scb,
	}
}

// ScaffoldUpsertBulk is the builder for "upsert"-ing
// a bulk of Scaffold nodes.
type ScaffoldUpsertBulk struct {
	create *ScaffoldCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Scaffold.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ScaffoldUpsertBulk) UpdateNewValues() *ScaffoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scaffold.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScaffoldUpsertBulk) Ignore() *ScaffoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScaffoldUpsertBulk) DoNothing() *ScaffoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScaffoldCreateBulk.OnConflict
// documentation for more info.
func (u *ScaffoldUpsertBulk) Update(set func(*ScaffoldUpsert)) *ScaffoldUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScaffoldUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *ScaffoldUpsertBulk) SetSeqname(v string) *ScaffoldUpsertBulk {
	return u.Update(func(s *ScaffoldUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *ScaffoldUpsertBulk) UpdateSeqname() *ScaffoldUpsertBulk {
	return u.Update(func(s *ScaffoldUpsert) {
		s.UpdateSeqname()
	})
}

// SetSeq sets the "seq" field.
func (u *ScaffoldUpsertBulk) SetSeq(v string) *ScaffoldUpsertBulk {
	return u.Update(func(s *ScaffoldUpsert) {
		s.SetSeq(v)
	})
}

// UpdateSeq sets the "seq" field to the value that was provided on create.
func (u *ScaffoldUpsertBulk) UpdateSeq() *ScaffoldUpsertBulk {
	return u.Update(func(s *ScaffoldUpsert) {
		s.UpdateSeq()
	})
}

// Exec executes the query.
func (u *ScaffoldUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScaffoldCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScaffoldCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScaffoldUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
