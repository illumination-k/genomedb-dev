// Code generated by ent, DO NOT EDIT.

package goterm

import (
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Def applies equality check predicate on the "def" field. It's identical to DefEQ.
func Def(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDef), v))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepth), v))
	})
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v Namespace) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNamespace), v))
	})
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v Namespace) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNamespace), v))
	})
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...Namespace) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNamespace), v...))
	})
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...Namespace) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNamespace), v...))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DefEQ applies the EQ predicate on the "def" field.
func DefEQ(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDef), v))
	})
}

// DefNEQ applies the NEQ predicate on the "def" field.
func DefNEQ(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDef), v))
	})
}

// DefIn applies the In predicate on the "def" field.
func DefIn(vs ...string) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDef), v...))
	})
}

// DefNotIn applies the NotIn predicate on the "def" field.
func DefNotIn(vs ...string) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDef), v...))
	})
}

// DefGT applies the GT predicate on the "def" field.
func DefGT(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDef), v))
	})
}

// DefGTE applies the GTE predicate on the "def" field.
func DefGTE(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDef), v))
	})
}

// DefLT applies the LT predicate on the "def" field.
func DefLT(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDef), v))
	})
}

// DefLTE applies the LTE predicate on the "def" field.
func DefLTE(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDef), v))
	})
}

// DefContains applies the Contains predicate on the "def" field.
func DefContains(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDef), v))
	})
}

// DefHasPrefix applies the HasPrefix predicate on the "def" field.
func DefHasPrefix(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDef), v))
	})
}

// DefHasSuffix applies the HasSuffix predicate on the "def" field.
func DefHasSuffix(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDef), v))
	})
}

// DefEqualFold applies the EqualFold predicate on the "def" field.
func DefEqualFold(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDef), v))
	})
}

// DefContainsFold applies the ContainsFold predicate on the "def" field.
func DefContainsFold(v string) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDef), v))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int32) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int32) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDepth), v))
	})
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDepth), v))
	})
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...int32) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDepth), v...))
	})
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...int32) predicate.GoTerm {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDepth), v...))
	})
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDepth), v))
	})
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDepth), v))
	})
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDepth), v))
	})
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v int32) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDepth), v))
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.GoTerm) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.GoTerm) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTranscripts applies the HasEdge predicate on the "transcripts" edge.
func HasTranscripts() predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TranscriptsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TranscriptsTable, TranscriptsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranscriptsWith applies the HasEdge predicate on the "transcripts" edge with a given conditions (other predicates).
func HasTranscriptsWith(preds ...predicate.Transcript) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TranscriptsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TranscriptsTable, TranscriptsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGotermTranscript applies the HasEdge predicate on the "goterm_transcript" edge.
func HasGotermTranscript() predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GotermTranscriptTable, GotermTranscriptColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, GotermTranscriptTable, GotermTranscriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGotermTranscriptWith applies the HasEdge predicate on the "goterm_transcript" edge with a given conditions (other predicates).
func HasGotermTranscriptWith(preds ...predicate.GoTermOnTranscripts) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GotermTranscriptInverseTable, GotermTranscriptColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, GotermTranscriptTable, GotermTranscriptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoTerm) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoTerm) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoTerm) predicate.GoTerm {
	return predicate.GoTerm(func(s *sql.Selector) {
		p(s.Not())
	})
}
