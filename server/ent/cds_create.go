// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/cds"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CdsCreate is the builder for creating a Cds entity.
type CdsCreate struct {
	config
	mutation *CdsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSeqname sets the "seqname" field.
func (cc *CdsCreate) SetSeqname(s string) *CdsCreate {
	cc.mutation.SetSeqname(s)
	return cc
}

// SetStart sets the "start" field.
func (cc *CdsCreate) SetStart(i int32) *CdsCreate {
	cc.mutation.SetStart(i)
	return cc
}

// SetEnd sets the "end" field.
func (cc *CdsCreate) SetEnd(i int32) *CdsCreate {
	cc.mutation.SetEnd(i)
	return cc
}

// SetPhase sets the "phase" field.
func (cc *CdsCreate) SetPhase(i int8) *CdsCreate {
	cc.mutation.SetPhase(i)
	return cc
}

// SetStrand sets the "strand" field.
func (cc *CdsCreate) SetStrand(s string) *CdsCreate {
	cc.mutation.SetStrand(s)
	return cc
}

// SetTranscriptID sets the "transcript" edge to the Transcript entity by ID.
func (cc *CdsCreate) SetTranscriptID(id string) *CdsCreate {
	cc.mutation.SetTranscriptID(id)
	return cc
}

// SetNillableTranscriptID sets the "transcript" edge to the Transcript entity by ID if the given value is not nil.
func (cc *CdsCreate) SetNillableTranscriptID(id *string) *CdsCreate {
	if id != nil {
		cc = cc.SetTranscriptID(*id)
	}
	return cc
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (cc *CdsCreate) SetTranscript(t *Transcript) *CdsCreate {
	return cc.SetTranscriptID(t.ID)
}

// Mutation returns the CdsMutation object of the builder.
func (cc *CdsCreate) Mutation() *CdsMutation {
	return cc.mutation
}

// Save creates the Cds in the database.
func (cc *CdsCreate) Save(ctx context.Context) (*Cds, error) {
	var (
		err  error
		node *Cds
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CdsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Cds)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CdsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CdsCreate) SaveX(ctx context.Context) *Cds {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CdsCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CdsCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CdsCreate) check() error {
	if _, ok := cc.mutation.Seqname(); !ok {
		return &ValidationError{Name: "seqname", err: errors.New(`ent: missing required field "Cds.seqname"`)}
	}
	if _, ok := cc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Cds.start"`)}
	}
	if v, ok := cc.mutation.Start(); ok {
		if err := cds.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "Cds.start": %w`, err)}
		}
	}
	if _, ok := cc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Cds.end"`)}
	}
	if v, ok := cc.mutation.End(); ok {
		if err := cds.EndValidator(v); err != nil {
			return &ValidationError{Name: "end", err: fmt.Errorf(`ent: validator failed for field "Cds.end": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Phase(); !ok {
		return &ValidationError{Name: "phase", err: errors.New(`ent: missing required field "Cds.phase"`)}
	}
	if _, ok := cc.mutation.Strand(); !ok {
		return &ValidationError{Name: "strand", err: errors.New(`ent: missing required field "Cds.strand"`)}
	}
	return nil
}

func (cc *CdsCreate) sqlSave(ctx context.Context) (*Cds, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CdsCreate) createSpec() (*Cds, *sqlgraph.CreateSpec) {
	var (
		_node = &Cds{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cds.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cds.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.Seqname(); ok {
		_spec.SetField(cds.FieldSeqname, field.TypeString, value)
		_node.Seqname = value
	}
	if value, ok := cc.mutation.Start(); ok {
		_spec.SetField(cds.FieldStart, field.TypeInt32, value)
		_node.Start = value
	}
	if value, ok := cc.mutation.End(); ok {
		_spec.SetField(cds.FieldEnd, field.TypeInt32, value)
		_node.End = value
	}
	if value, ok := cc.mutation.Phase(); ok {
		_spec.SetField(cds.FieldPhase, field.TypeInt8, value)
		_node.Phase = value
	}
	if value, ok := cc.mutation.Strand(); ok {
		_spec.SetField(cds.FieldStrand, field.TypeString, value)
		_node.Strand = value
	}
	if nodes := cc.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cds.TranscriptTable,
			Columns: []string{cds.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.transcript_cds = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cds.Create().
//		SetSeqname(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CdsUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (cc *CdsCreate) OnConflict(opts ...sql.ConflictOption) *CdsUpsertOne {
	cc.conflict = opts
	return &CdsUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cds.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CdsCreate) OnConflictColumns(columns ...string) *CdsUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CdsUpsertOne{
		create: cc,
	}
}

type (
	// CdsUpsertOne is the builder for "upsert"-ing
	//  one Cds node.
	CdsUpsertOne struct {
		create *CdsCreate
	}

	// CdsUpsert is the "OnConflict" setter.
	CdsUpsert struct {
		*sql.UpdateSet
	}
)

// SetSeqname sets the "seqname" field.
func (u *CdsUpsert) SetSeqname(v string) *CdsUpsert {
	u.Set(cds.FieldSeqname, v)
	return u
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *CdsUpsert) UpdateSeqname() *CdsUpsert {
	u.SetExcluded(cds.FieldSeqname)
	return u
}

// SetStart sets the "start" field.
func (u *CdsUpsert) SetStart(v int32) *CdsUpsert {
	u.Set(cds.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *CdsUpsert) UpdateStart() *CdsUpsert {
	u.SetExcluded(cds.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *CdsUpsert) AddStart(v int32) *CdsUpsert {
	u.Add(cds.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *CdsUpsert) SetEnd(v int32) *CdsUpsert {
	u.Set(cds.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *CdsUpsert) UpdateEnd() *CdsUpsert {
	u.SetExcluded(cds.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *CdsUpsert) AddEnd(v int32) *CdsUpsert {
	u.Add(cds.FieldEnd, v)
	return u
}

// SetPhase sets the "phase" field.
func (u *CdsUpsert) SetPhase(v int8) *CdsUpsert {
	u.Set(cds.FieldPhase, v)
	return u
}

// UpdatePhase sets the "phase" field to the value that was provided on create.
func (u *CdsUpsert) UpdatePhase() *CdsUpsert {
	u.SetExcluded(cds.FieldPhase)
	return u
}

// AddPhase adds v to the "phase" field.
func (u *CdsUpsert) AddPhase(v int8) *CdsUpsert {
	u.Add(cds.FieldPhase, v)
	return u
}

// SetStrand sets the "strand" field.
func (u *CdsUpsert) SetStrand(v string) *CdsUpsert {
	u.Set(cds.FieldStrand, v)
	return u
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *CdsUpsert) UpdateStrand() *CdsUpsert {
	u.SetExcluded(cds.FieldStrand)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Cds.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CdsUpsertOne) UpdateNewValues() *CdsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cds.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CdsUpsertOne) Ignore() *CdsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CdsUpsertOne) DoNothing() *CdsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CdsCreate.OnConflict
// documentation for more info.
func (u *CdsUpsertOne) Update(set func(*CdsUpsert)) *CdsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CdsUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *CdsUpsertOne) SetSeqname(v string) *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *CdsUpsertOne) UpdateSeqname() *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.UpdateSeqname()
	})
}

// SetStart sets the "start" field.
func (u *CdsUpsertOne) SetStart(v int32) *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *CdsUpsertOne) AddStart(v int32) *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *CdsUpsertOne) UpdateStart() *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *CdsUpsertOne) SetEnd(v int32) *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *CdsUpsertOne) AddEnd(v int32) *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *CdsUpsertOne) UpdateEnd() *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.UpdateEnd()
	})
}

// SetPhase sets the "phase" field.
func (u *CdsUpsertOne) SetPhase(v int8) *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.SetPhase(v)
	})
}

// AddPhase adds v to the "phase" field.
func (u *CdsUpsertOne) AddPhase(v int8) *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.AddPhase(v)
	})
}

// UpdatePhase sets the "phase" field to the value that was provided on create.
func (u *CdsUpsertOne) UpdatePhase() *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.UpdatePhase()
	})
}

// SetStrand sets the "strand" field.
func (u *CdsUpsertOne) SetStrand(v string) *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *CdsUpsertOne) UpdateStrand() *CdsUpsertOne {
	return u.Update(func(s *CdsUpsert) {
		s.UpdateStrand()
	})
}

// Exec executes the query.
func (u *CdsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CdsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CdsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CdsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CdsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CdsCreateBulk is the builder for creating many Cds entities in bulk.
type CdsCreateBulk struct {
	config
	builders []*CdsCreate
	conflict []sql.ConflictOption
}

// Save creates the Cds entities in the database.
func (ccb *CdsCreateBulk) Save(ctx context.Context) ([]*Cds, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cds, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CdsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CdsCreateBulk) SaveX(ctx context.Context) []*Cds {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CdsCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CdsCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cds.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CdsUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (ccb *CdsCreateBulk) OnConflict(opts ...sql.ConflictOption) *CdsUpsertBulk {
	ccb.conflict = opts
	return &CdsUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cds.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CdsCreateBulk) OnConflictColumns(columns ...string) *CdsUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CdsUpsertBulk{
		create: ccb,
	}
}

// CdsUpsertBulk is the builder for "upsert"-ing
// a bulk of Cds nodes.
type CdsUpsertBulk struct {
	create *CdsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Cds.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CdsUpsertBulk) UpdateNewValues() *CdsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cds.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CdsUpsertBulk) Ignore() *CdsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CdsUpsertBulk) DoNothing() *CdsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CdsCreateBulk.OnConflict
// documentation for more info.
func (u *CdsUpsertBulk) Update(set func(*CdsUpsert)) *CdsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CdsUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *CdsUpsertBulk) SetSeqname(v string) *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *CdsUpsertBulk) UpdateSeqname() *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.UpdateSeqname()
	})
}

// SetStart sets the "start" field.
func (u *CdsUpsertBulk) SetStart(v int32) *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *CdsUpsertBulk) AddStart(v int32) *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *CdsUpsertBulk) UpdateStart() *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *CdsUpsertBulk) SetEnd(v int32) *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *CdsUpsertBulk) AddEnd(v int32) *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *CdsUpsertBulk) UpdateEnd() *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.UpdateEnd()
	})
}

// SetPhase sets the "phase" field.
func (u *CdsUpsertBulk) SetPhase(v int8) *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.SetPhase(v)
	})
}

// AddPhase adds v to the "phase" field.
func (u *CdsUpsertBulk) AddPhase(v int8) *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.AddPhase(v)
	})
}

// UpdatePhase sets the "phase" field to the value that was provided on create.
func (u *CdsUpsertBulk) UpdatePhase() *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.UpdatePhase()
	})
}

// SetStrand sets the "strand" field.
func (u *CdsUpsertBulk) SetStrand(v string) *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *CdsUpsertBulk) UpdateStrand() *CdsUpsertBulk {
	return u.Update(func(s *CdsUpsert) {
		s.UpdateStrand()
	})
}

// Exec executes the query.
func (u *CdsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CdsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CdsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CdsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
