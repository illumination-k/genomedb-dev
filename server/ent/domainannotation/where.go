// Code generated by ent, DO NOT EDIT.

package domainannotation

import (
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.DomainAnnotation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.DomainAnnotation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// AnalysisEQ applies the EQ predicate on the "Analysis" field.
func AnalysisEQ(v Analysis) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnalysis), v))
	})
}

// AnalysisNEQ applies the NEQ predicate on the "Analysis" field.
func AnalysisNEQ(v Analysis) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnalysis), v))
	})
}

// AnalysisIn applies the In predicate on the "Analysis" field.
func AnalysisIn(vs ...Analysis) predicate.DomainAnnotation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAnalysis), v...))
	})
}

// AnalysisNotIn applies the NotIn predicate on the "Analysis" field.
func AnalysisNotIn(vs ...Analysis) predicate.DomainAnnotation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAnalysis), v...))
	})
}

// HasTranscripts applies the HasEdge predicate on the "transcripts" edge.
func HasTranscripts() predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TranscriptsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TranscriptsTable, TranscriptsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTranscriptsWith applies the HasEdge predicate on the "transcripts" edge with a given conditions (other predicates).
func HasTranscriptsWith(preds ...predicate.Transcript) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TranscriptsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TranscriptsTable, TranscriptsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDomainTranscript applies the HasEdge predicate on the "domain_transcript" edge.
func HasDomainTranscript() predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DomainTranscriptTable, DomainTranscriptColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, DomainTranscriptTable, DomainTranscriptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDomainTranscriptWith applies the HasEdge predicate on the "domain_transcript" edge with a given conditions (other predicates).
func HasDomainTranscriptWith(preds ...predicate.DomainAnnotationToTranscript) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DomainTranscriptInverseTable, DomainTranscriptColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, DomainTranscriptTable, DomainTranscriptColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DomainAnnotation) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DomainAnnotation) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DomainAnnotation) predicate.DomainAnnotation {
	return predicate.DomainAnnotation(func(s *sql.Selector) {
		p(s.Not())
	})
}
