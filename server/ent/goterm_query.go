// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"genomedb/ent/goterm"
	"genomedb/ent/gotermontranscripts"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoTermQuery is the builder for querying GoTerm entities.
type GoTermQuery struct {
	config
	limit                *int
	offset               *int
	unique               *bool
	order                []OrderFunc
	fields               []string
	predicates           []predicate.GoTerm
	withParent           *GoTermQuery
	withChildren         *GoTermQuery
	withTranscripts      *TranscriptQuery
	withGotermTranscript *GoTermOnTranscriptsQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GoTermQuery builder.
func (gtq *GoTermQuery) Where(ps ...predicate.GoTerm) *GoTermQuery {
	gtq.predicates = append(gtq.predicates, ps...)
	return gtq
}

// Limit adds a limit step to the query.
func (gtq *GoTermQuery) Limit(limit int) *GoTermQuery {
	gtq.limit = &limit
	return gtq
}

// Offset adds an offset step to the query.
func (gtq *GoTermQuery) Offset(offset int) *GoTermQuery {
	gtq.offset = &offset
	return gtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gtq *GoTermQuery) Unique(unique bool) *GoTermQuery {
	gtq.unique = &unique
	return gtq
}

// Order adds an order step to the query.
func (gtq *GoTermQuery) Order(o ...OrderFunc) *GoTermQuery {
	gtq.order = append(gtq.order, o...)
	return gtq
}

// QueryParent chains the current query on the "parent" edge.
func (gtq *GoTermQuery) QueryParent() *GoTermQuery {
	query := &GoTermQuery{config: gtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goterm.Table, goterm.FieldID, selector),
			sqlgraph.To(goterm.Table, goterm.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, goterm.ParentTable, goterm.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(gtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (gtq *GoTermQuery) QueryChildren() *GoTermQuery {
	query := &GoTermQuery{config: gtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goterm.Table, goterm.FieldID, selector),
			sqlgraph.To(goterm.Table, goterm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goterm.ChildrenTable, goterm.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(gtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTranscripts chains the current query on the "transcripts" edge.
func (gtq *GoTermQuery) QueryTranscripts() *TranscriptQuery {
	query := &TranscriptQuery{config: gtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goterm.Table, goterm.FieldID, selector),
			sqlgraph.To(transcript.Table, transcript.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, goterm.TranscriptsTable, goterm.TranscriptsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGotermTranscript chains the current query on the "goterm_transcript" edge.
func (gtq *GoTermQuery) QueryGotermTranscript() *GoTermOnTranscriptsQuery {
	query := &GoTermOnTranscriptsQuery{config: gtq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goterm.Table, goterm.FieldID, selector),
			sqlgraph.To(gotermontranscripts.Table, gotermontranscripts.GoTermColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, goterm.GotermTranscriptTable, goterm.GotermTranscriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(gtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GoTerm entity from the query.
// Returns a *NotFoundError when no GoTerm was found.
func (gtq *GoTermQuery) First(ctx context.Context) (*GoTerm, error) {
	nodes, err := gtq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{goterm.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gtq *GoTermQuery) FirstX(ctx context.Context) *GoTerm {
	node, err := gtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GoTerm ID from the query.
// Returns a *NotFoundError when no GoTerm ID was found.
func (gtq *GoTermQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = gtq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{goterm.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gtq *GoTermQuery) FirstIDX(ctx context.Context) string {
	id, err := gtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GoTerm entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GoTerm entity is found.
// Returns a *NotFoundError when no GoTerm entities are found.
func (gtq *GoTermQuery) Only(ctx context.Context) (*GoTerm, error) {
	nodes, err := gtq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{goterm.Label}
	default:
		return nil, &NotSingularError{goterm.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gtq *GoTermQuery) OnlyX(ctx context.Context) *GoTerm {
	node, err := gtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GoTerm ID in the query.
// Returns a *NotSingularError when more than one GoTerm ID is found.
// Returns a *NotFoundError when no entities are found.
func (gtq *GoTermQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = gtq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{goterm.Label}
	default:
		err = &NotSingularError{goterm.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gtq *GoTermQuery) OnlyIDX(ctx context.Context) string {
	id, err := gtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GoTerms.
func (gtq *GoTermQuery) All(ctx context.Context) ([]*GoTerm, error) {
	if err := gtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gtq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gtq *GoTermQuery) AllX(ctx context.Context) []*GoTerm {
	nodes, err := gtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GoTerm IDs.
func (gtq *GoTermQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := gtq.Select(goterm.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gtq *GoTermQuery) IDsX(ctx context.Context) []string {
	ids, err := gtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gtq *GoTermQuery) Count(ctx context.Context) (int, error) {
	if err := gtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gtq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gtq *GoTermQuery) CountX(ctx context.Context) int {
	count, err := gtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gtq *GoTermQuery) Exist(ctx context.Context) (bool, error) {
	if err := gtq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gtq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gtq *GoTermQuery) ExistX(ctx context.Context) bool {
	exist, err := gtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GoTermQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gtq *GoTermQuery) Clone() *GoTermQuery {
	if gtq == nil {
		return nil
	}
	return &GoTermQuery{
		config:               gtq.config,
		limit:                gtq.limit,
		offset:               gtq.offset,
		order:                append([]OrderFunc{}, gtq.order...),
		predicates:           append([]predicate.GoTerm{}, gtq.predicates...),
		withParent:           gtq.withParent.Clone(),
		withChildren:         gtq.withChildren.Clone(),
		withTranscripts:      gtq.withTranscripts.Clone(),
		withGotermTranscript: gtq.withGotermTranscript.Clone(),
		// clone intermediate query.
		sql:    gtq.sql.Clone(),
		path:   gtq.path,
		unique: gtq.unique,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (gtq *GoTermQuery) WithParent(opts ...func(*GoTermQuery)) *GoTermQuery {
	query := &GoTermQuery{config: gtq.config}
	for _, opt := range opts {
		opt(query)
	}
	gtq.withParent = query
	return gtq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (gtq *GoTermQuery) WithChildren(opts ...func(*GoTermQuery)) *GoTermQuery {
	query := &GoTermQuery{config: gtq.config}
	for _, opt := range opts {
		opt(query)
	}
	gtq.withChildren = query
	return gtq
}

// WithTranscripts tells the query-builder to eager-load the nodes that are connected to
// the "transcripts" edge. The optional arguments are used to configure the query builder of the edge.
func (gtq *GoTermQuery) WithTranscripts(opts ...func(*TranscriptQuery)) *GoTermQuery {
	query := &TranscriptQuery{config: gtq.config}
	for _, opt := range opts {
		opt(query)
	}
	gtq.withTranscripts = query
	return gtq
}

// WithGotermTranscript tells the query-builder to eager-load the nodes that are connected to
// the "goterm_transcript" edge. The optional arguments are used to configure the query builder of the edge.
func (gtq *GoTermQuery) WithGotermTranscript(opts ...func(*GoTermOnTranscriptsQuery)) *GoTermQuery {
	query := &GoTermOnTranscriptsQuery{config: gtq.config}
	for _, opt := range opts {
		opt(query)
	}
	gtq.withGotermTranscript = query
	return gtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Namespace goterm.Namespace `json:"namespace,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GoTerm.Query().
//		GroupBy(goterm.FieldNamespace).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gtq *GoTermQuery) GroupBy(field string, fields ...string) *GoTermGroupBy {
	grbuild := &GoTermGroupBy{config: gtq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gtq.sqlQuery(ctx), nil
	}
	grbuild.label = goterm.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Namespace goterm.Namespace `json:"namespace,omitempty"`
//	}
//
//	client.GoTerm.Query().
//		Select(goterm.FieldNamespace).
//		Scan(ctx, &v)
func (gtq *GoTermQuery) Select(fields ...string) *GoTermSelect {
	gtq.fields = append(gtq.fields, fields...)
	selbuild := &GoTermSelect{GoTermQuery: gtq}
	selbuild.label = goterm.Label
	selbuild.flds, selbuild.scan = &gtq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a GoTermSelect configured with the given aggregations.
func (gtq *GoTermQuery) Aggregate(fns ...AggregateFunc) *GoTermSelect {
	return gtq.Select().Aggregate(fns...)
}

func (gtq *GoTermQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gtq.fields {
		if !goterm.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gtq.path != nil {
		prev, err := gtq.path(ctx)
		if err != nil {
			return err
		}
		gtq.sql = prev
	}
	return nil
}

func (gtq *GoTermQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GoTerm, error) {
	var (
		nodes       = []*GoTerm{}
		withFKs     = gtq.withFKs
		_spec       = gtq.querySpec()
		loadedTypes = [4]bool{
			gtq.withParent != nil,
			gtq.withChildren != nil,
			gtq.withTranscripts != nil,
			gtq.withGotermTranscript != nil,
		}
	)
	if gtq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, goterm.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GoTerm).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GoTerm{config: gtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gtq.withParent; query != nil {
		if err := gtq.loadParent(ctx, query, nodes, nil,
			func(n *GoTerm, e *GoTerm) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := gtq.withChildren; query != nil {
		if err := gtq.loadChildren(ctx, query, nodes,
			func(n *GoTerm) { n.Edges.Children = []*GoTerm{} },
			func(n *GoTerm, e *GoTerm) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := gtq.withTranscripts; query != nil {
		if err := gtq.loadTranscripts(ctx, query, nodes,
			func(n *GoTerm) { n.Edges.Transcripts = []*Transcript{} },
			func(n *GoTerm, e *Transcript) { n.Edges.Transcripts = append(n.Edges.Transcripts, e) }); err != nil {
			return nil, err
		}
	}
	if query := gtq.withGotermTranscript; query != nil {
		if err := gtq.loadGotermTranscript(ctx, query, nodes,
			func(n *GoTerm) { n.Edges.GotermTranscript = []*GoTermOnTranscripts{} },
			func(n *GoTerm, e *GoTermOnTranscripts) {
				n.Edges.GotermTranscript = append(n.Edges.GotermTranscript, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gtq *GoTermQuery) loadParent(ctx context.Context, query *GoTermQuery, nodes []*GoTerm, init func(*GoTerm), assign func(*GoTerm, *GoTerm)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*GoTerm)
	for i := range nodes {
		if nodes[i].go_term_children == nil {
			continue
		}
		fk := *nodes[i].go_term_children
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(goterm.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "go_term_children" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gtq *GoTermQuery) loadChildren(ctx context.Context, query *GoTermQuery, nodes []*GoTerm, init func(*GoTerm), assign func(*GoTerm, *GoTerm)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*GoTerm)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GoTerm(func(s *sql.Selector) {
		s.Where(sql.InValues(goterm.ChildrenColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.go_term_children
		if fk == nil {
			return fmt.Errorf(`foreign-key "go_term_children" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "go_term_children" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gtq *GoTermQuery) loadTranscripts(ctx context.Context, query *TranscriptQuery, nodes []*GoTerm, init func(*GoTerm), assign func(*GoTerm, *Transcript)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*GoTerm)
	nids := make(map[string]map[*GoTerm]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(goterm.TranscriptsTable)
		s.Join(joinT).On(s.C(transcript.FieldID), joinT.C(goterm.TranscriptsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(goterm.TranscriptsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(goterm.TranscriptsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullString)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := values[0].(*sql.NullString).String
			inValue := values[1].(*sql.NullString).String
			if nids[inValue] == nil {
				nids[inValue] = map[*GoTerm]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "transcripts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (gtq *GoTermQuery) loadGotermTranscript(ctx context.Context, query *GoTermOnTranscriptsQuery, nodes []*GoTerm, init func(*GoTerm), assign func(*GoTerm, *GoTermOnTranscripts)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*GoTerm)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.GoTermOnTranscripts(func(s *sql.Selector) {
		s.Where(sql.InValues(goterm.GotermTranscriptColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GoTermID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "go_term_id" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (gtq *GoTermQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gtq.querySpec()
	_spec.Node.Columns = gtq.fields
	if len(gtq.fields) > 0 {
		_spec.Unique = gtq.unique != nil && *gtq.unique
	}
	return sqlgraph.CountNodes(ctx, gtq.driver, _spec)
}

func (gtq *GoTermQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := gtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (gtq *GoTermQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goterm.Table,
			Columns: goterm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: goterm.FieldID,
			},
		},
		From:   gtq.sql,
		Unique: true,
	}
	if unique := gtq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gtq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goterm.FieldID)
		for i := range fields {
			if fields[i] != goterm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gtq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gtq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gtq *GoTermQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gtq.driver.Dialect())
	t1 := builder.Table(goterm.Table)
	columns := gtq.fields
	if len(columns) == 0 {
		columns = goterm.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gtq.sql != nil {
		selector = gtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gtq.unique != nil && *gtq.unique {
		selector.Distinct()
	}
	for _, p := range gtq.predicates {
		p(selector)
	}
	for _, p := range gtq.order {
		p(selector)
	}
	if offset := gtq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gtq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GoTermGroupBy is the group-by builder for GoTerm entities.
type GoTermGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gtgb *GoTermGroupBy) Aggregate(fns ...AggregateFunc) *GoTermGroupBy {
	gtgb.fns = append(gtgb.fns, fns...)
	return gtgb
}

// Scan applies the group-by query and scans the result into the given value.
func (gtgb *GoTermGroupBy) Scan(ctx context.Context, v any) error {
	query, err := gtgb.path(ctx)
	if err != nil {
		return err
	}
	gtgb.sql = query
	return gtgb.sqlScan(ctx, v)
}

func (gtgb *GoTermGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range gtgb.fields {
		if !goterm.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gtgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gtgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gtgb *GoTermGroupBy) sqlQuery() *sql.Selector {
	selector := gtgb.sql.Select()
	aggregation := make([]string, 0, len(gtgb.fns))
	for _, fn := range gtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(gtgb.fields)+len(gtgb.fns))
		for _, f := range gtgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(gtgb.fields...)...)
}

// GoTermSelect is the builder for selecting fields of GoTerm entities.
type GoTermSelect struct {
	*GoTermQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gts *GoTermSelect) Aggregate(fns ...AggregateFunc) *GoTermSelect {
	gts.fns = append(gts.fns, fns...)
	return gts
}

// Scan applies the selector query and scans the result into the given value.
func (gts *GoTermSelect) Scan(ctx context.Context, v any) error {
	if err := gts.prepareQuery(ctx); err != nil {
		return err
	}
	gts.sql = gts.GoTermQuery.sqlQuery(ctx)
	return gts.sqlScan(ctx, v)
}

func (gts *GoTermSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(gts.fns))
	for _, fn := range gts.fns {
		aggregation = append(aggregation, fn(gts.sql))
	}
	switch n := len(*gts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		gts.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		gts.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := gts.sql.Query()
	if err := gts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
