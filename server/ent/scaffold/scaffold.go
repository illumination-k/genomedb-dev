// Code generated by ent, DO NOT EDIT.

package scaffold

const (
	// Label holds the string label denoting the scaffold type in the database.
	Label = "scaffold"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeqname holds the string denoting the seqname field in the database.
	FieldSeqname = "seqname"
	// FieldSeq holds the string denoting the seq field in the database.
	FieldSeq = "seq"
	// EdgeGenome holds the string denoting the genome edge name in mutations.
	EdgeGenome = "genome"
	// GenomeFieldID holds the string denoting the ID field of the Genome.
	GenomeFieldID = "name"
	// Table holds the table name of the scaffold in the database.
	Table = "scaffolds"
	// GenomeTable is the table that holds the genome relation/edge.
	GenomeTable = "scaffolds"
	// GenomeInverseTable is the table name for the Genome entity.
	// It exists in this package in order to avoid circular dependency with the "genome" package.
	GenomeInverseTable = "genomes"
	// GenomeColumn is the table column denoting the genome relation/edge.
	GenomeColumn = "genome_scaffolds"
)

// Columns holds all SQL columns for scaffold fields.
var Columns = []string{
	FieldID,
	FieldSeqname,
	FieldSeq,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "scaffolds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"genome_scaffolds",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
