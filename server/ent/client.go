// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"genomedb/ent/migrate"

	"genomedb/ent/genome"
	"genomedb/ent/locus"
	"genomedb/ent/scaffold"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Genome is the client for interacting with the Genome builders.
	Genome *GenomeClient
	// Locus is the client for interacting with the Locus builders.
	Locus *LocusClient
	// Scaffold is the client for interacting with the Scaffold builders.
	Scaffold *ScaffoldClient
	// Transcript is the client for interacting with the Transcript builders.
	Transcript *TranscriptClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Genome = NewGenomeClient(c.config)
	c.Locus = NewLocusClient(c.config)
	c.Scaffold = NewScaffoldClient(c.config)
	c.Transcript = NewTranscriptClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Genome:     NewGenomeClient(cfg),
		Locus:      NewLocusClient(cfg),
		Scaffold:   NewScaffoldClient(cfg),
		Transcript: NewTranscriptClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Genome:     NewGenomeClient(cfg),
		Locus:      NewLocusClient(cfg),
		Scaffold:   NewScaffoldClient(cfg),
		Transcript: NewTranscriptClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Genome.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Genome.Use(hooks...)
	c.Locus.Use(hooks...)
	c.Scaffold.Use(hooks...)
	c.Transcript.Use(hooks...)
}

// GenomeClient is a client for the Genome schema.
type GenomeClient struct {
	config
}

// NewGenomeClient returns a client for the Genome from the given config.
func NewGenomeClient(c config) *GenomeClient {
	return &GenomeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `genome.Hooks(f(g(h())))`.
func (c *GenomeClient) Use(hooks ...Hook) {
	c.hooks.Genome = append(c.hooks.Genome, hooks...)
}

// Create returns a builder for creating a Genome entity.
func (c *GenomeClient) Create() *GenomeCreate {
	mutation := newGenomeMutation(c.config, OpCreate)
	return &GenomeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Genome entities.
func (c *GenomeClient) CreateBulk(builders ...*GenomeCreate) *GenomeCreateBulk {
	return &GenomeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Genome.
func (c *GenomeClient) Update() *GenomeUpdate {
	mutation := newGenomeMutation(c.config, OpUpdate)
	return &GenomeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenomeClient) UpdateOne(ge *Genome) *GenomeUpdateOne {
	mutation := newGenomeMutation(c.config, OpUpdateOne, withGenome(ge))
	return &GenomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenomeClient) UpdateOneID(id string) *GenomeUpdateOne {
	mutation := newGenomeMutation(c.config, OpUpdateOne, withGenomeID(id))
	return &GenomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Genome.
func (c *GenomeClient) Delete() *GenomeDelete {
	mutation := newGenomeMutation(c.config, OpDelete)
	return &GenomeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GenomeClient) DeleteOne(ge *Genome) *GenomeDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GenomeClient) DeleteOneID(id string) *GenomeDeleteOne {
	builder := c.Delete().Where(genome.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenomeDeleteOne{builder}
}

// Query returns a query builder for Genome.
func (c *GenomeClient) Query() *GenomeQuery {
	return &GenomeQuery{
		config: c.config,
	}
}

// Get returns a Genome entity by its id.
func (c *GenomeClient) Get(ctx context.Context, id string) (*Genome, error) {
	return c.Query().Where(genome.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenomeClient) GetX(ctx context.Context, id string) *Genome {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocuses queries the locuses edge of a Genome.
func (c *GenomeClient) QueryLocuses(ge *Genome) *LocusQuery {
	query := &LocusQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(genome.Table, genome.FieldID, id),
			sqlgraph.To(locus.Table, locus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, genome.LocusesTable, genome.LocusesColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScaffolds queries the scaffolds edge of a Genome.
func (c *GenomeClient) QueryScaffolds(ge *Genome) *ScaffoldQuery {
	query := &ScaffoldQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(genome.Table, genome.FieldID, id),
			sqlgraph.To(scaffold.Table, scaffold.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, genome.ScaffoldsTable, genome.ScaffoldsColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenomeClient) Hooks() []Hook {
	return c.hooks.Genome
}

// LocusClient is a client for the Locus schema.
type LocusClient struct {
	config
}

// NewLocusClient returns a client for the Locus from the given config.
func NewLocusClient(c config) *LocusClient {
	return &LocusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `locus.Hooks(f(g(h())))`.
func (c *LocusClient) Use(hooks ...Hook) {
	c.hooks.Locus = append(c.hooks.Locus, hooks...)
}

// Create returns a builder for creating a Locus entity.
func (c *LocusClient) Create() *LocusCreate {
	mutation := newLocusMutation(c.config, OpCreate)
	return &LocusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Locus entities.
func (c *LocusClient) CreateBulk(builders ...*LocusCreate) *LocusCreateBulk {
	return &LocusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Locus.
func (c *LocusClient) Update() *LocusUpdate {
	mutation := newLocusMutation(c.config, OpUpdate)
	return &LocusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocusClient) UpdateOne(l *Locus) *LocusUpdateOne {
	mutation := newLocusMutation(c.config, OpUpdateOne, withLocus(l))
	return &LocusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocusClient) UpdateOneID(id string) *LocusUpdateOne {
	mutation := newLocusMutation(c.config, OpUpdateOne, withLocusID(id))
	return &LocusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Locus.
func (c *LocusClient) Delete() *LocusDelete {
	mutation := newLocusMutation(c.config, OpDelete)
	return &LocusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocusClient) DeleteOne(l *Locus) *LocusDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocusClient) DeleteOneID(id string) *LocusDeleteOne {
	builder := c.Delete().Where(locus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocusDeleteOne{builder}
}

// Query returns a query builder for Locus.
func (c *LocusClient) Query() *LocusQuery {
	return &LocusQuery{
		config: c.config,
	}
}

// Get returns a Locus entity by its id.
func (c *LocusClient) Get(ctx context.Context, id string) (*Locus, error) {
	return c.Query().Where(locus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocusClient) GetX(ctx context.Context, id string) *Locus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTranscripts queries the transcripts edge of a Locus.
func (c *LocusClient) QueryTranscripts(l *Locus) *TranscriptQuery {
	query := &TranscriptQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locus.Table, locus.FieldID, id),
			sqlgraph.To(transcript.Table, transcript.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, locus.TranscriptsTable, locus.TranscriptsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGenome queries the genome edge of a Locus.
func (c *LocusClient) QueryGenome(l *Locus) *GenomeQuery {
	query := &GenomeQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locus.Table, locus.FieldID, id),
			sqlgraph.To(genome.Table, genome.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, locus.GenomeTable, locus.GenomeColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocusClient) Hooks() []Hook {
	return c.hooks.Locus
}

// ScaffoldClient is a client for the Scaffold schema.
type ScaffoldClient struct {
	config
}

// NewScaffoldClient returns a client for the Scaffold from the given config.
func NewScaffoldClient(c config) *ScaffoldClient {
	return &ScaffoldClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scaffold.Hooks(f(g(h())))`.
func (c *ScaffoldClient) Use(hooks ...Hook) {
	c.hooks.Scaffold = append(c.hooks.Scaffold, hooks...)
}

// Create returns a builder for creating a Scaffold entity.
func (c *ScaffoldClient) Create() *ScaffoldCreate {
	mutation := newScaffoldMutation(c.config, OpCreate)
	return &ScaffoldCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Scaffold entities.
func (c *ScaffoldClient) CreateBulk(builders ...*ScaffoldCreate) *ScaffoldCreateBulk {
	return &ScaffoldCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Scaffold.
func (c *ScaffoldClient) Update() *ScaffoldUpdate {
	mutation := newScaffoldMutation(c.config, OpUpdate)
	return &ScaffoldUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScaffoldClient) UpdateOne(s *Scaffold) *ScaffoldUpdateOne {
	mutation := newScaffoldMutation(c.config, OpUpdateOne, withScaffold(s))
	return &ScaffoldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScaffoldClient) UpdateOneID(id int) *ScaffoldUpdateOne {
	mutation := newScaffoldMutation(c.config, OpUpdateOne, withScaffoldID(id))
	return &ScaffoldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scaffold.
func (c *ScaffoldClient) Delete() *ScaffoldDelete {
	mutation := newScaffoldMutation(c.config, OpDelete)
	return &ScaffoldDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScaffoldClient) DeleteOne(s *Scaffold) *ScaffoldDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScaffoldClient) DeleteOneID(id int) *ScaffoldDeleteOne {
	builder := c.Delete().Where(scaffold.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScaffoldDeleteOne{builder}
}

// Query returns a query builder for Scaffold.
func (c *ScaffoldClient) Query() *ScaffoldQuery {
	return &ScaffoldQuery{
		config: c.config,
	}
}

// Get returns a Scaffold entity by its id.
func (c *ScaffoldClient) Get(ctx context.Context, id int) (*Scaffold, error) {
	return c.Query().Where(scaffold.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScaffoldClient) GetX(ctx context.Context, id int) *Scaffold {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenome queries the genome edge of a Scaffold.
func (c *ScaffoldClient) QueryGenome(s *Scaffold) *GenomeQuery {
	query := &GenomeQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scaffold.Table, scaffold.FieldID, id),
			sqlgraph.To(genome.Table, genome.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scaffold.GenomeTable, scaffold.GenomeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScaffoldClient) Hooks() []Hook {
	return c.hooks.Scaffold
}

// TranscriptClient is a client for the Transcript schema.
type TranscriptClient struct {
	config
}

// NewTranscriptClient returns a client for the Transcript from the given config.
func NewTranscriptClient(c config) *TranscriptClient {
	return &TranscriptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transcript.Hooks(f(g(h())))`.
func (c *TranscriptClient) Use(hooks ...Hook) {
	c.hooks.Transcript = append(c.hooks.Transcript, hooks...)
}

// Create returns a builder for creating a Transcript entity.
func (c *TranscriptClient) Create() *TranscriptCreate {
	mutation := newTranscriptMutation(c.config, OpCreate)
	return &TranscriptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transcript entities.
func (c *TranscriptClient) CreateBulk(builders ...*TranscriptCreate) *TranscriptCreateBulk {
	return &TranscriptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transcript.
func (c *TranscriptClient) Update() *TranscriptUpdate {
	mutation := newTranscriptMutation(c.config, OpUpdate)
	return &TranscriptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TranscriptClient) UpdateOne(t *Transcript) *TranscriptUpdateOne {
	mutation := newTranscriptMutation(c.config, OpUpdateOne, withTranscript(t))
	return &TranscriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TranscriptClient) UpdateOneID(id string) *TranscriptUpdateOne {
	mutation := newTranscriptMutation(c.config, OpUpdateOne, withTranscriptID(id))
	return &TranscriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transcript.
func (c *TranscriptClient) Delete() *TranscriptDelete {
	mutation := newTranscriptMutation(c.config, OpDelete)
	return &TranscriptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TranscriptClient) DeleteOne(t *Transcript) *TranscriptDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TranscriptClient) DeleteOneID(id string) *TranscriptDeleteOne {
	builder := c.Delete().Where(transcript.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TranscriptDeleteOne{builder}
}

// Query returns a query builder for Transcript.
func (c *TranscriptClient) Query() *TranscriptQuery {
	return &TranscriptQuery{
		config: c.config,
	}
}

// Get returns a Transcript entity by its id.
func (c *TranscriptClient) Get(ctx context.Context, id string) (*Transcript, error) {
	return c.Query().Where(transcript.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TranscriptClient) GetX(ctx context.Context, id string) *Transcript {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocus queries the locus edge of a Transcript.
func (c *TranscriptClient) QueryLocus(t *Transcript) *LocusQuery {
	query := &LocusQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transcript.Table, transcript.FieldID, id),
			sqlgraph.To(locus.Table, locus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transcript.LocusTable, transcript.LocusColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TranscriptClient) Hooks() []Hook {
	return c.hooks.Transcript
}
