// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"genomedb/ent/migrate"

	"genomedb/ent/gene"
	"genomedb/ent/genome"
	"genomedb/ent/transcript"
	"genomedb/ent/trasnscriptstructure"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Gene is the client for interacting with the Gene builders.
	Gene *GeneClient
	// Genome is the client for interacting with the Genome builders.
	Genome *GenomeClient
	// Transcript is the client for interacting with the Transcript builders.
	Transcript *TranscriptClient
	// TrasnscriptStructure is the client for interacting with the TrasnscriptStructure builders.
	TrasnscriptStructure *TrasnscriptStructureClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Gene = NewGeneClient(c.config)
	c.Genome = NewGenomeClient(c.config)
	c.Transcript = NewTranscriptClient(c.config)
	c.TrasnscriptStructure = NewTrasnscriptStructureClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Gene:                 NewGeneClient(cfg),
		Genome:               NewGenomeClient(cfg),
		Transcript:           NewTranscriptClient(cfg),
		TrasnscriptStructure: NewTrasnscriptStructureClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Gene:                 NewGeneClient(cfg),
		Genome:               NewGenomeClient(cfg),
		Transcript:           NewTranscriptClient(cfg),
		TrasnscriptStructure: NewTrasnscriptStructureClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Gene.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Gene.Use(hooks...)
	c.Genome.Use(hooks...)
	c.Transcript.Use(hooks...)
	c.TrasnscriptStructure.Use(hooks...)
}

// GeneClient is a client for the Gene schema.
type GeneClient struct {
	config
}

// NewGeneClient returns a client for the Gene from the given config.
func NewGeneClient(c config) *GeneClient {
	return &GeneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gene.Hooks(f(g(h())))`.
func (c *GeneClient) Use(hooks ...Hook) {
	c.hooks.Gene = append(c.hooks.Gene, hooks...)
}

// Create returns a builder for creating a Gene entity.
func (c *GeneClient) Create() *GeneCreate {
	mutation := newGeneMutation(c.config, OpCreate)
	return &GeneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Gene entities.
func (c *GeneClient) CreateBulk(builders ...*GeneCreate) *GeneCreateBulk {
	return &GeneCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gene.
func (c *GeneClient) Update() *GeneUpdate {
	mutation := newGeneMutation(c.config, OpUpdate)
	return &GeneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GeneClient) UpdateOne(ge *Gene) *GeneUpdateOne {
	mutation := newGeneMutation(c.config, OpUpdateOne, withGene(ge))
	return &GeneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GeneClient) UpdateOneID(id string) *GeneUpdateOne {
	mutation := newGeneMutation(c.config, OpUpdateOne, withGeneID(id))
	return &GeneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gene.
func (c *GeneClient) Delete() *GeneDelete {
	mutation := newGeneMutation(c.config, OpDelete)
	return &GeneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GeneClient) DeleteOne(ge *Gene) *GeneDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GeneClient) DeleteOneID(id string) *GeneDeleteOne {
	builder := c.Delete().Where(gene.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GeneDeleteOne{builder}
}

// Query returns a query builder for Gene.
func (c *GeneClient) Query() *GeneQuery {
	return &GeneQuery{
		config: c.config,
	}
}

// Get returns a Gene entity by its id.
func (c *GeneClient) Get(ctx context.Context, id string) (*Gene, error) {
	return c.Query().Where(gene.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GeneClient) GetX(ctx context.Context, id string) *Gene {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GeneClient) Hooks() []Hook {
	return c.hooks.Gene
}

// GenomeClient is a client for the Genome schema.
type GenomeClient struct {
	config
}

// NewGenomeClient returns a client for the Genome from the given config.
func NewGenomeClient(c config) *GenomeClient {
	return &GenomeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `genome.Hooks(f(g(h())))`.
func (c *GenomeClient) Use(hooks ...Hook) {
	c.hooks.Genome = append(c.hooks.Genome, hooks...)
}

// Create returns a builder for creating a Genome entity.
func (c *GenomeClient) Create() *GenomeCreate {
	mutation := newGenomeMutation(c.config, OpCreate)
	return &GenomeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Genome entities.
func (c *GenomeClient) CreateBulk(builders ...*GenomeCreate) *GenomeCreateBulk {
	return &GenomeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Genome.
func (c *GenomeClient) Update() *GenomeUpdate {
	mutation := newGenomeMutation(c.config, OpUpdate)
	return &GenomeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenomeClient) UpdateOne(ge *Genome) *GenomeUpdateOne {
	mutation := newGenomeMutation(c.config, OpUpdateOne, withGenome(ge))
	return &GenomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenomeClient) UpdateOneID(id int) *GenomeUpdateOne {
	mutation := newGenomeMutation(c.config, OpUpdateOne, withGenomeID(id))
	return &GenomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Genome.
func (c *GenomeClient) Delete() *GenomeDelete {
	mutation := newGenomeMutation(c.config, OpDelete)
	return &GenomeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GenomeClient) DeleteOne(ge *Genome) *GenomeDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GenomeClient) DeleteOneID(id int) *GenomeDeleteOne {
	builder := c.Delete().Where(genome.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenomeDeleteOne{builder}
}

// Query returns a query builder for Genome.
func (c *GenomeClient) Query() *GenomeQuery {
	return &GenomeQuery{
		config: c.config,
	}
}

// Get returns a Genome entity by its id.
func (c *GenomeClient) Get(ctx context.Context, id int) (*Genome, error) {
	return c.Query().Where(genome.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenomeClient) GetX(ctx context.Context, id int) *Genome {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GenomeClient) Hooks() []Hook {
	return c.hooks.Genome
}

// TranscriptClient is a client for the Transcript schema.
type TranscriptClient struct {
	config
}

// NewTranscriptClient returns a client for the Transcript from the given config.
func NewTranscriptClient(c config) *TranscriptClient {
	return &TranscriptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transcript.Hooks(f(g(h())))`.
func (c *TranscriptClient) Use(hooks ...Hook) {
	c.hooks.Transcript = append(c.hooks.Transcript, hooks...)
}

// Create returns a builder for creating a Transcript entity.
func (c *TranscriptClient) Create() *TranscriptCreate {
	mutation := newTranscriptMutation(c.config, OpCreate)
	return &TranscriptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transcript entities.
func (c *TranscriptClient) CreateBulk(builders ...*TranscriptCreate) *TranscriptCreateBulk {
	return &TranscriptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transcript.
func (c *TranscriptClient) Update() *TranscriptUpdate {
	mutation := newTranscriptMutation(c.config, OpUpdate)
	return &TranscriptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TranscriptClient) UpdateOne(t *Transcript) *TranscriptUpdateOne {
	mutation := newTranscriptMutation(c.config, OpUpdateOne, withTranscript(t))
	return &TranscriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TranscriptClient) UpdateOneID(id string) *TranscriptUpdateOne {
	mutation := newTranscriptMutation(c.config, OpUpdateOne, withTranscriptID(id))
	return &TranscriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transcript.
func (c *TranscriptClient) Delete() *TranscriptDelete {
	mutation := newTranscriptMutation(c.config, OpDelete)
	return &TranscriptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TranscriptClient) DeleteOne(t *Transcript) *TranscriptDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TranscriptClient) DeleteOneID(id string) *TranscriptDeleteOne {
	builder := c.Delete().Where(transcript.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TranscriptDeleteOne{builder}
}

// Query returns a query builder for Transcript.
func (c *TranscriptClient) Query() *TranscriptQuery {
	return &TranscriptQuery{
		config: c.config,
	}
}

// Get returns a Transcript entity by its id.
func (c *TranscriptClient) Get(ctx context.Context, id string) (*Transcript, error) {
	return c.Query().Where(transcript.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TranscriptClient) GetX(ctx context.Context, id string) *Transcript {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TranscriptClient) Hooks() []Hook {
	return c.hooks.Transcript
}

// TrasnscriptStructureClient is a client for the TrasnscriptStructure schema.
type TrasnscriptStructureClient struct {
	config
}

// NewTrasnscriptStructureClient returns a client for the TrasnscriptStructure from the given config.
func NewTrasnscriptStructureClient(c config) *TrasnscriptStructureClient {
	return &TrasnscriptStructureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trasnscriptstructure.Hooks(f(g(h())))`.
func (c *TrasnscriptStructureClient) Use(hooks ...Hook) {
	c.hooks.TrasnscriptStructure = append(c.hooks.TrasnscriptStructure, hooks...)
}

// Create returns a builder for creating a TrasnscriptStructure entity.
func (c *TrasnscriptStructureClient) Create() *TrasnscriptStructureCreate {
	mutation := newTrasnscriptStructureMutation(c.config, OpCreate)
	return &TrasnscriptStructureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrasnscriptStructure entities.
func (c *TrasnscriptStructureClient) CreateBulk(builders ...*TrasnscriptStructureCreate) *TrasnscriptStructureCreateBulk {
	return &TrasnscriptStructureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrasnscriptStructure.
func (c *TrasnscriptStructureClient) Update() *TrasnscriptStructureUpdate {
	mutation := newTrasnscriptStructureMutation(c.config, OpUpdate)
	return &TrasnscriptStructureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrasnscriptStructureClient) UpdateOne(ts *TrasnscriptStructure) *TrasnscriptStructureUpdateOne {
	mutation := newTrasnscriptStructureMutation(c.config, OpUpdateOne, withTrasnscriptStructure(ts))
	return &TrasnscriptStructureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrasnscriptStructureClient) UpdateOneID(id int) *TrasnscriptStructureUpdateOne {
	mutation := newTrasnscriptStructureMutation(c.config, OpUpdateOne, withTrasnscriptStructureID(id))
	return &TrasnscriptStructureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrasnscriptStructure.
func (c *TrasnscriptStructureClient) Delete() *TrasnscriptStructureDelete {
	mutation := newTrasnscriptStructureMutation(c.config, OpDelete)
	return &TrasnscriptStructureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TrasnscriptStructureClient) DeleteOne(ts *TrasnscriptStructure) *TrasnscriptStructureDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TrasnscriptStructureClient) DeleteOneID(id int) *TrasnscriptStructureDeleteOne {
	builder := c.Delete().Where(trasnscriptstructure.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrasnscriptStructureDeleteOne{builder}
}

// Query returns a query builder for TrasnscriptStructure.
func (c *TrasnscriptStructureClient) Query() *TrasnscriptStructureQuery {
	return &TrasnscriptStructureQuery{
		config: c.config,
	}
}

// Get returns a TrasnscriptStructure entity by its id.
func (c *TrasnscriptStructureClient) Get(ctx context.Context, id int) (*TrasnscriptStructure, error) {
	return c.Query().Where(trasnscriptstructure.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrasnscriptStructureClient) GetX(ctx context.Context, id int) *TrasnscriptStructure {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TrasnscriptStructureClient) Hooks() []Hook {
	return c.hooks.TrasnscriptStructure
}
