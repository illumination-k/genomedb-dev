// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"genomedb/ent/domainannotation"
	"genomedb/ent/domainannotationtotranscript"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DomainAnnotationQuery is the builder for querying DomainAnnotation entities.
type DomainAnnotationQuery struct {
	config
	limit                *int
	offset               *int
	unique               *bool
	order                []OrderFunc
	fields               []string
	predicates           []predicate.DomainAnnotation
	withTranscripts      *TranscriptQuery
	withDomainTranscript *DomainAnnotationToTranscriptQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DomainAnnotationQuery builder.
func (daq *DomainAnnotationQuery) Where(ps ...predicate.DomainAnnotation) *DomainAnnotationQuery {
	daq.predicates = append(daq.predicates, ps...)
	return daq
}

// Limit adds a limit step to the query.
func (daq *DomainAnnotationQuery) Limit(limit int) *DomainAnnotationQuery {
	daq.limit = &limit
	return daq
}

// Offset adds an offset step to the query.
func (daq *DomainAnnotationQuery) Offset(offset int) *DomainAnnotationQuery {
	daq.offset = &offset
	return daq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (daq *DomainAnnotationQuery) Unique(unique bool) *DomainAnnotationQuery {
	daq.unique = &unique
	return daq
}

// Order adds an order step to the query.
func (daq *DomainAnnotationQuery) Order(o ...OrderFunc) *DomainAnnotationQuery {
	daq.order = append(daq.order, o...)
	return daq
}

// QueryTranscripts chains the current query on the "transcripts" edge.
func (daq *DomainAnnotationQuery) QueryTranscripts() *TranscriptQuery {
	query := &TranscriptQuery{config: daq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(domainannotation.Table, domainannotation.FieldID, selector),
			sqlgraph.To(transcript.Table, transcript.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, domainannotation.TranscriptsTable, domainannotation.TranscriptsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDomainTranscript chains the current query on the "domain_transcript" edge.
func (daq *DomainAnnotationQuery) QueryDomainTranscript() *DomainAnnotationToTranscriptQuery {
	query := &DomainAnnotationToTranscriptQuery{config: daq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(domainannotation.Table, domainannotation.FieldID, selector),
			sqlgraph.To(domainannotationtotranscript.Table, domainannotationtotranscript.DomainColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, domainannotation.DomainTranscriptTable, domainannotation.DomainTranscriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DomainAnnotation entity from the query.
// Returns a *NotFoundError when no DomainAnnotation was found.
func (daq *DomainAnnotationQuery) First(ctx context.Context) (*DomainAnnotation, error) {
	nodes, err := daq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{domainannotation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (daq *DomainAnnotationQuery) FirstX(ctx context.Context) *DomainAnnotation {
	node, err := daq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DomainAnnotation ID from the query.
// Returns a *NotFoundError when no DomainAnnotation ID was found.
func (daq *DomainAnnotationQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = daq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{domainannotation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (daq *DomainAnnotationQuery) FirstIDX(ctx context.Context) string {
	id, err := daq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DomainAnnotation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DomainAnnotation entity is found.
// Returns a *NotFoundError when no DomainAnnotation entities are found.
func (daq *DomainAnnotationQuery) Only(ctx context.Context) (*DomainAnnotation, error) {
	nodes, err := daq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{domainannotation.Label}
	default:
		return nil, &NotSingularError{domainannotation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (daq *DomainAnnotationQuery) OnlyX(ctx context.Context) *DomainAnnotation {
	node, err := daq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DomainAnnotation ID in the query.
// Returns a *NotSingularError when more than one DomainAnnotation ID is found.
// Returns a *NotFoundError when no entities are found.
func (daq *DomainAnnotationQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = daq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{domainannotation.Label}
	default:
		err = &NotSingularError{domainannotation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (daq *DomainAnnotationQuery) OnlyIDX(ctx context.Context) string {
	id, err := daq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DomainAnnotations.
func (daq *DomainAnnotationQuery) All(ctx context.Context) ([]*DomainAnnotation, error) {
	if err := daq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return daq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (daq *DomainAnnotationQuery) AllX(ctx context.Context) []*DomainAnnotation {
	nodes, err := daq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DomainAnnotation IDs.
func (daq *DomainAnnotationQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := daq.Select(domainannotation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (daq *DomainAnnotationQuery) IDsX(ctx context.Context) []string {
	ids, err := daq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (daq *DomainAnnotationQuery) Count(ctx context.Context) (int, error) {
	if err := daq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return daq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (daq *DomainAnnotationQuery) CountX(ctx context.Context) int {
	count, err := daq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (daq *DomainAnnotationQuery) Exist(ctx context.Context) (bool, error) {
	if err := daq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return daq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (daq *DomainAnnotationQuery) ExistX(ctx context.Context) bool {
	exist, err := daq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DomainAnnotationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (daq *DomainAnnotationQuery) Clone() *DomainAnnotationQuery {
	if daq == nil {
		return nil
	}
	return &DomainAnnotationQuery{
		config:               daq.config,
		limit:                daq.limit,
		offset:               daq.offset,
		order:                append([]OrderFunc{}, daq.order...),
		predicates:           append([]predicate.DomainAnnotation{}, daq.predicates...),
		withTranscripts:      daq.withTranscripts.Clone(),
		withDomainTranscript: daq.withDomainTranscript.Clone(),
		// clone intermediate query.
		sql:    daq.sql.Clone(),
		path:   daq.path,
		unique: daq.unique,
	}
}

// WithTranscripts tells the query-builder to eager-load the nodes that are connected to
// the "transcripts" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DomainAnnotationQuery) WithTranscripts(opts ...func(*TranscriptQuery)) *DomainAnnotationQuery {
	query := &TranscriptQuery{config: daq.config}
	for _, opt := range opts {
		opt(query)
	}
	daq.withTranscripts = query
	return daq
}

// WithDomainTranscript tells the query-builder to eager-load the nodes that are connected to
// the "domain_transcript" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DomainAnnotationQuery) WithDomainTranscript(opts ...func(*DomainAnnotationToTranscriptQuery)) *DomainAnnotationQuery {
	query := &DomainAnnotationToTranscriptQuery{config: daq.config}
	for _, opt := range opts {
		opt(query)
	}
	daq.withDomainTranscript = query
	return daq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DomainAnnotation.Query().
//		GroupBy(domainannotation.FieldDescription).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (daq *DomainAnnotationQuery) GroupBy(field string, fields ...string) *DomainAnnotationGroupBy {
	grbuild := &DomainAnnotationGroupBy{config: daq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return daq.sqlQuery(ctx), nil
	}
	grbuild.label = domainannotation.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//	}
//
//	client.DomainAnnotation.Query().
//		Select(domainannotation.FieldDescription).
//		Scan(ctx, &v)
func (daq *DomainAnnotationQuery) Select(fields ...string) *DomainAnnotationSelect {
	daq.fields = append(daq.fields, fields...)
	selbuild := &DomainAnnotationSelect{DomainAnnotationQuery: daq}
	selbuild.label = domainannotation.Label
	selbuild.flds, selbuild.scan = &daq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a DomainAnnotationSelect configured with the given aggregations.
func (daq *DomainAnnotationQuery) Aggregate(fns ...AggregateFunc) *DomainAnnotationSelect {
	return daq.Select().Aggregate(fns...)
}

func (daq *DomainAnnotationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range daq.fields {
		if !domainannotation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if daq.path != nil {
		prev, err := daq.path(ctx)
		if err != nil {
			return err
		}
		daq.sql = prev
	}
	return nil
}

func (daq *DomainAnnotationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DomainAnnotation, error) {
	var (
		nodes       = []*DomainAnnotation{}
		_spec       = daq.querySpec()
		loadedTypes = [2]bool{
			daq.withTranscripts != nil,
			daq.withDomainTranscript != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DomainAnnotation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DomainAnnotation{config: daq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, daq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := daq.withTranscripts; query != nil {
		if err := daq.loadTranscripts(ctx, query, nodes,
			func(n *DomainAnnotation) { n.Edges.Transcripts = []*Transcript{} },
			func(n *DomainAnnotation, e *Transcript) { n.Edges.Transcripts = append(n.Edges.Transcripts, e) }); err != nil {
			return nil, err
		}
	}
	if query := daq.withDomainTranscript; query != nil {
		if err := daq.loadDomainTranscript(ctx, query, nodes,
			func(n *DomainAnnotation) { n.Edges.DomainTranscript = []*DomainAnnotationToTranscript{} },
			func(n *DomainAnnotation, e *DomainAnnotationToTranscript) {
				n.Edges.DomainTranscript = append(n.Edges.DomainTranscript, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (daq *DomainAnnotationQuery) loadTranscripts(ctx context.Context, query *TranscriptQuery, nodes []*DomainAnnotation, init func(*DomainAnnotation), assign func(*DomainAnnotation, *Transcript)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*DomainAnnotation)
	nids := make(map[string]map[*DomainAnnotation]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(domainannotation.TranscriptsTable)
		s.Join(joinT).On(s.C(transcript.FieldID), joinT.C(domainannotation.TranscriptsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(domainannotation.TranscriptsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(domainannotation.TranscriptsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullString)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := values[0].(*sql.NullString).String
			inValue := values[1].(*sql.NullString).String
			if nids[inValue] == nil {
				nids[inValue] = map[*DomainAnnotation]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "transcripts" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (daq *DomainAnnotationQuery) loadDomainTranscript(ctx context.Context, query *DomainAnnotationToTranscriptQuery, nodes []*DomainAnnotation, init func(*DomainAnnotation), assign func(*DomainAnnotation, *DomainAnnotationToTranscript)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*DomainAnnotation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.DomainAnnotationToTranscript(func(s *sql.Selector) {
		s.Where(sql.InValues(domainannotation.DomainTranscriptColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.DomainAnnotationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "domain_annotation_id" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (daq *DomainAnnotationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := daq.querySpec()
	_spec.Node.Columns = daq.fields
	if len(daq.fields) > 0 {
		_spec.Unique = daq.unique != nil && *daq.unique
	}
	return sqlgraph.CountNodes(ctx, daq.driver, _spec)
}

func (daq *DomainAnnotationQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := daq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (daq *DomainAnnotationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   domainannotation.Table,
			Columns: domainannotation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: domainannotation.FieldID,
			},
		},
		From:   daq.sql,
		Unique: true,
	}
	if unique := daq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := daq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, domainannotation.FieldID)
		for i := range fields {
			if fields[i] != domainannotation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := daq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := daq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := daq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := daq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (daq *DomainAnnotationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(daq.driver.Dialect())
	t1 := builder.Table(domainannotation.Table)
	columns := daq.fields
	if len(columns) == 0 {
		columns = domainannotation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if daq.sql != nil {
		selector = daq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if daq.unique != nil && *daq.unique {
		selector.Distinct()
	}
	for _, p := range daq.predicates {
		p(selector)
	}
	for _, p := range daq.order {
		p(selector)
	}
	if offset := daq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := daq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DomainAnnotationGroupBy is the group-by builder for DomainAnnotation entities.
type DomainAnnotationGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dagb *DomainAnnotationGroupBy) Aggregate(fns ...AggregateFunc) *DomainAnnotationGroupBy {
	dagb.fns = append(dagb.fns, fns...)
	return dagb
}

// Scan applies the group-by query and scans the result into the given value.
func (dagb *DomainAnnotationGroupBy) Scan(ctx context.Context, v any) error {
	query, err := dagb.path(ctx)
	if err != nil {
		return err
	}
	dagb.sql = query
	return dagb.sqlScan(ctx, v)
}

func (dagb *DomainAnnotationGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range dagb.fields {
		if !domainannotation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dagb *DomainAnnotationGroupBy) sqlQuery() *sql.Selector {
	selector := dagb.sql.Select()
	aggregation := make([]string, 0, len(dagb.fns))
	for _, fn := range dagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dagb.fields)+len(dagb.fns))
		for _, f := range dagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dagb.fields...)...)
}

// DomainAnnotationSelect is the builder for selecting fields of DomainAnnotation entities.
type DomainAnnotationSelect struct {
	*DomainAnnotationQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (das *DomainAnnotationSelect) Aggregate(fns ...AggregateFunc) *DomainAnnotationSelect {
	das.fns = append(das.fns, fns...)
	return das
}

// Scan applies the selector query and scans the result into the given value.
func (das *DomainAnnotationSelect) Scan(ctx context.Context, v any) error {
	if err := das.prepareQuery(ctx); err != nil {
		return err
	}
	das.sql = das.DomainAnnotationQuery.sqlQuery(ctx)
	return das.sqlScan(ctx, v)
}

func (das *DomainAnnotationSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(das.fns))
	for _, fn := range das.fns {
		aggregation = append(aggregation, fn(das.sql))
	}
	switch n := len(*das.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		das.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		das.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := das.sql.Query()
	if err := das.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
