// Code generated by ent, DO NOT EDIT.

package transcript

const (
	// Label holds the string label denoting the transcript type in the database.
	Label = "transcript"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeqname holds the string denoting the seqname field in the database.
	FieldSeqname = "seqname"
	// FieldStrand holds the string denoting the strand field in the database.
	FieldStrand = "strand"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldExon holds the string denoting the exon field in the database.
	FieldExon = "exon"
	// FieldFivePrimeUtr holds the string denoting the five_prime_utr field in the database.
	FieldFivePrimeUtr = "five_prime_utr"
	// FieldThreePrimeUtr holds the string denoting the three_prime_utr field in the database.
	FieldThreePrimeUtr = "three_prime_utr"
	// FieldCds holds the string denoting the cds field in the database.
	FieldCds = "cds"
	// FieldGenomicSequence holds the string denoting the genomic_sequence field in the database.
	FieldGenomicSequence = "genomic_sequence"
	// FieldExonSequence holds the string denoting the exon_sequence field in the database.
	FieldExonSequence = "exon_sequence"
	// FieldCdsSequence holds the string denoting the cds_sequence field in the database.
	FieldCdsSequence = "cds_sequence"
	// FieldProteinSequence holds the string denoting the protein_sequence field in the database.
	FieldProteinSequence = "protein_sequence"
	// EdgeLocus holds the string denoting the locus edge name in mutations.
	EdgeLocus = "locus"
	// Table holds the table name of the transcript in the database.
	Table = "transcripts"
	// LocusTable is the table that holds the locus relation/edge.
	LocusTable = "transcripts"
	// LocusInverseTable is the table name for the Locus entity.
	// It exists in this package in order to avoid circular dependency with the "locus" package.
	LocusInverseTable = "locus"
	// LocusColumn is the table column denoting the locus relation/edge.
	LocusColumn = "locus_transcripts"
)

// Columns holds all SQL columns for transcript fields.
var Columns = []string{
	FieldID,
	FieldSeqname,
	FieldStrand,
	FieldType,
	FieldStart,
	FieldEnd,
	FieldExon,
	FieldFivePrimeUtr,
	FieldThreePrimeUtr,
	FieldCds,
	FieldGenomicSequence,
	FieldExonSequence,
	FieldCdsSequence,
	FieldProteinSequence,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transcripts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"locus_transcripts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// StartValidator is a validator for the "start" field. It is called by the builders before save.
	StartValidator func(int32) error
	// EndValidator is a validator for the "end" field. It is called by the builders before save.
	EndValidator func(int32) error
)
