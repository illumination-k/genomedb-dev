// Code generated by ent, DO NOT EDIT.

package transcript

import (
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TranscriptId applies equality check predicate on the "transcriptId" field. It's identical to TranscriptIdEQ.
func TranscriptId(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscriptId), v))
	})
}

// Gene applies equality check predicate on the "gene" field. It's identical to GeneEQ.
func Gene(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGene), v))
	})
}

// Mrna applies equality check predicate on the "mrna" field. It's identical to MrnaEQ.
func Mrna(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMrna), v))
	})
}

// Cds applies equality check predicate on the "cds" field. It's identical to CdsEQ.
func Cds(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCds), v))
	})
}

// Protein applies equality check predicate on the "protein" field. It's identical to ProteinEQ.
func Protein(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProtein), v))
	})
}

// TranscriptIdEQ applies the EQ predicate on the "transcriptId" field.
func TranscriptIdEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdNEQ applies the NEQ predicate on the "transcriptId" field.
func TranscriptIdNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdIn applies the In predicate on the "transcriptId" field.
func TranscriptIdIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTranscriptId), v...))
	})
}

// TranscriptIdNotIn applies the NotIn predicate on the "transcriptId" field.
func TranscriptIdNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTranscriptId), v...))
	})
}

// TranscriptIdGT applies the GT predicate on the "transcriptId" field.
func TranscriptIdGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdGTE applies the GTE predicate on the "transcriptId" field.
func TranscriptIdGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdLT applies the LT predicate on the "transcriptId" field.
func TranscriptIdLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdLTE applies the LTE predicate on the "transcriptId" field.
func TranscriptIdLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdContains applies the Contains predicate on the "transcriptId" field.
func TranscriptIdContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdHasPrefix applies the HasPrefix predicate on the "transcriptId" field.
func TranscriptIdHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdHasSuffix applies the HasSuffix predicate on the "transcriptId" field.
func TranscriptIdHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdEqualFold applies the EqualFold predicate on the "transcriptId" field.
func TranscriptIdEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTranscriptId), v))
	})
}

// TranscriptIdContainsFold applies the ContainsFold predicate on the "transcriptId" field.
func TranscriptIdContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTranscriptId), v))
	})
}

// GeneEQ applies the EQ predicate on the "gene" field.
func GeneEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGene), v))
	})
}

// GeneNEQ applies the NEQ predicate on the "gene" field.
func GeneNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGene), v))
	})
}

// GeneIn applies the In predicate on the "gene" field.
func GeneIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGene), v...))
	})
}

// GeneNotIn applies the NotIn predicate on the "gene" field.
func GeneNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGene), v...))
	})
}

// GeneGT applies the GT predicate on the "gene" field.
func GeneGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGene), v))
	})
}

// GeneGTE applies the GTE predicate on the "gene" field.
func GeneGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGene), v))
	})
}

// GeneLT applies the LT predicate on the "gene" field.
func GeneLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGene), v))
	})
}

// GeneLTE applies the LTE predicate on the "gene" field.
func GeneLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGene), v))
	})
}

// GeneContains applies the Contains predicate on the "gene" field.
func GeneContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGene), v))
	})
}

// GeneHasPrefix applies the HasPrefix predicate on the "gene" field.
func GeneHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGene), v))
	})
}

// GeneHasSuffix applies the HasSuffix predicate on the "gene" field.
func GeneHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGene), v))
	})
}

// GeneEqualFold applies the EqualFold predicate on the "gene" field.
func GeneEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGene), v))
	})
}

// GeneContainsFold applies the ContainsFold predicate on the "gene" field.
func GeneContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGene), v))
	})
}

// MrnaEQ applies the EQ predicate on the "mrna" field.
func MrnaEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMrna), v))
	})
}

// MrnaNEQ applies the NEQ predicate on the "mrna" field.
func MrnaNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMrna), v))
	})
}

// MrnaIn applies the In predicate on the "mrna" field.
func MrnaIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMrna), v...))
	})
}

// MrnaNotIn applies the NotIn predicate on the "mrna" field.
func MrnaNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMrna), v...))
	})
}

// MrnaGT applies the GT predicate on the "mrna" field.
func MrnaGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMrna), v))
	})
}

// MrnaGTE applies the GTE predicate on the "mrna" field.
func MrnaGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMrna), v))
	})
}

// MrnaLT applies the LT predicate on the "mrna" field.
func MrnaLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMrna), v))
	})
}

// MrnaLTE applies the LTE predicate on the "mrna" field.
func MrnaLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMrna), v))
	})
}

// MrnaContains applies the Contains predicate on the "mrna" field.
func MrnaContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMrna), v))
	})
}

// MrnaHasPrefix applies the HasPrefix predicate on the "mrna" field.
func MrnaHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMrna), v))
	})
}

// MrnaHasSuffix applies the HasSuffix predicate on the "mrna" field.
func MrnaHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMrna), v))
	})
}

// MrnaEqualFold applies the EqualFold predicate on the "mrna" field.
func MrnaEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMrna), v))
	})
}

// MrnaContainsFold applies the ContainsFold predicate on the "mrna" field.
func MrnaContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMrna), v))
	})
}

// CdsEQ applies the EQ predicate on the "cds" field.
func CdsEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCds), v))
	})
}

// CdsNEQ applies the NEQ predicate on the "cds" field.
func CdsNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCds), v))
	})
}

// CdsIn applies the In predicate on the "cds" field.
func CdsIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCds), v...))
	})
}

// CdsNotIn applies the NotIn predicate on the "cds" field.
func CdsNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCds), v...))
	})
}

// CdsGT applies the GT predicate on the "cds" field.
func CdsGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCds), v))
	})
}

// CdsGTE applies the GTE predicate on the "cds" field.
func CdsGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCds), v))
	})
}

// CdsLT applies the LT predicate on the "cds" field.
func CdsLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCds), v))
	})
}

// CdsLTE applies the LTE predicate on the "cds" field.
func CdsLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCds), v))
	})
}

// CdsContains applies the Contains predicate on the "cds" field.
func CdsContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCds), v))
	})
}

// CdsHasPrefix applies the HasPrefix predicate on the "cds" field.
func CdsHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCds), v))
	})
}

// CdsHasSuffix applies the HasSuffix predicate on the "cds" field.
func CdsHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCds), v))
	})
}

// CdsEqualFold applies the EqualFold predicate on the "cds" field.
func CdsEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCds), v))
	})
}

// CdsContainsFold applies the ContainsFold predicate on the "cds" field.
func CdsContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCds), v))
	})
}

// ProteinEQ applies the EQ predicate on the "protein" field.
func ProteinEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProtein), v))
	})
}

// ProteinNEQ applies the NEQ predicate on the "protein" field.
func ProteinNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProtein), v))
	})
}

// ProteinIn applies the In predicate on the "protein" field.
func ProteinIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProtein), v...))
	})
}

// ProteinNotIn applies the NotIn predicate on the "protein" field.
func ProteinNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProtein), v...))
	})
}

// ProteinGT applies the GT predicate on the "protein" field.
func ProteinGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProtein), v))
	})
}

// ProteinGTE applies the GTE predicate on the "protein" field.
func ProteinGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProtein), v))
	})
}

// ProteinLT applies the LT predicate on the "protein" field.
func ProteinLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProtein), v))
	})
}

// ProteinLTE applies the LTE predicate on the "protein" field.
func ProteinLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProtein), v))
	})
}

// ProteinContains applies the Contains predicate on the "protein" field.
func ProteinContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProtein), v))
	})
}

// ProteinHasPrefix applies the HasPrefix predicate on the "protein" field.
func ProteinHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProtein), v))
	})
}

// ProteinHasSuffix applies the HasSuffix predicate on the "protein" field.
func ProteinHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProtein), v))
	})
}

// ProteinEqualFold applies the EqualFold predicate on the "protein" field.
func ProteinEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProtein), v))
	})
}

// ProteinContainsFold applies the ContainsFold predicate on the "protein" field.
func ProteinContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProtein), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transcript) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transcript) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transcript) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		p(s.Not())
	})
}
