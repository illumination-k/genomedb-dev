// Code generated by ent, DO NOT EDIT.

package transcript

import (
	"genomedb/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Strand applies equality check predicate on the "strand" field. It's identical to StrandEQ.
func Strand(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStrand), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// GenomeSeq applies equality check predicate on the "genome_seq" field. It's identical to GenomeSeqEQ.
func GenomeSeq(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenomeSeq), v))
	})
}

// TranscriptSeq applies equality check predicate on the "transcript_seq" field. It's identical to TranscriptSeqEQ.
func TranscriptSeq(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscriptSeq), v))
	})
}

// CdsSeq applies equality check predicate on the "cds_seq" field. It's identical to CdsSeqEQ.
func CdsSeq(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCdsSeq), v))
	})
}

// ProteinSeq applies equality check predicate on the "protein_seq" field. It's identical to ProteinSeqEQ.
func ProteinSeq(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProteinSeq), v))
	})
}

// StrandEQ applies the EQ predicate on the "strand" field.
func StrandEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStrand), v))
	})
}

// StrandNEQ applies the NEQ predicate on the "strand" field.
func StrandNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStrand), v))
	})
}

// StrandIn applies the In predicate on the "strand" field.
func StrandIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStrand), v...))
	})
}

// StrandNotIn applies the NotIn predicate on the "strand" field.
func StrandNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStrand), v...))
	})
}

// StrandGT applies the GT predicate on the "strand" field.
func StrandGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStrand), v))
	})
}

// StrandGTE applies the GTE predicate on the "strand" field.
func StrandGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStrand), v))
	})
}

// StrandLT applies the LT predicate on the "strand" field.
func StrandLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStrand), v))
	})
}

// StrandLTE applies the LTE predicate on the "strand" field.
func StrandLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStrand), v))
	})
}

// StrandContains applies the Contains predicate on the "strand" field.
func StrandContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStrand), v))
	})
}

// StrandHasPrefix applies the HasPrefix predicate on the "strand" field.
func StrandHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStrand), v))
	})
}

// StrandHasSuffix applies the HasSuffix predicate on the "strand" field.
func StrandHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStrand), v))
	})
}

// StrandEqualFold applies the EqualFold predicate on the "strand" field.
func StrandEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStrand), v))
	})
}

// StrandContainsFold applies the ContainsFold predicate on the "strand" field.
func StrandContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStrand), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// GenomeSeqEQ applies the EQ predicate on the "genome_seq" field.
func GenomeSeqEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqNEQ applies the NEQ predicate on the "genome_seq" field.
func GenomeSeqNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqIn applies the In predicate on the "genome_seq" field.
func GenomeSeqIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGenomeSeq), v...))
	})
}

// GenomeSeqNotIn applies the NotIn predicate on the "genome_seq" field.
func GenomeSeqNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGenomeSeq), v...))
	})
}

// GenomeSeqGT applies the GT predicate on the "genome_seq" field.
func GenomeSeqGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqGTE applies the GTE predicate on the "genome_seq" field.
func GenomeSeqGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqLT applies the LT predicate on the "genome_seq" field.
func GenomeSeqLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqLTE applies the LTE predicate on the "genome_seq" field.
func GenomeSeqLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqContains applies the Contains predicate on the "genome_seq" field.
func GenomeSeqContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqHasPrefix applies the HasPrefix predicate on the "genome_seq" field.
func GenomeSeqHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqHasSuffix applies the HasSuffix predicate on the "genome_seq" field.
func GenomeSeqHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqEqualFold applies the EqualFold predicate on the "genome_seq" field.
func GenomeSeqEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGenomeSeq), v))
	})
}

// GenomeSeqContainsFold applies the ContainsFold predicate on the "genome_seq" field.
func GenomeSeqContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGenomeSeq), v))
	})
}

// TranscriptSeqEQ applies the EQ predicate on the "transcript_seq" field.
func TranscriptSeqEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqNEQ applies the NEQ predicate on the "transcript_seq" field.
func TranscriptSeqNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqIn applies the In predicate on the "transcript_seq" field.
func TranscriptSeqIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTranscriptSeq), v...))
	})
}

// TranscriptSeqNotIn applies the NotIn predicate on the "transcript_seq" field.
func TranscriptSeqNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTranscriptSeq), v...))
	})
}

// TranscriptSeqGT applies the GT predicate on the "transcript_seq" field.
func TranscriptSeqGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqGTE applies the GTE predicate on the "transcript_seq" field.
func TranscriptSeqGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqLT applies the LT predicate on the "transcript_seq" field.
func TranscriptSeqLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqLTE applies the LTE predicate on the "transcript_seq" field.
func TranscriptSeqLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqContains applies the Contains predicate on the "transcript_seq" field.
func TranscriptSeqContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqHasPrefix applies the HasPrefix predicate on the "transcript_seq" field.
func TranscriptSeqHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqHasSuffix applies the HasSuffix predicate on the "transcript_seq" field.
func TranscriptSeqHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqEqualFold applies the EqualFold predicate on the "transcript_seq" field.
func TranscriptSeqEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTranscriptSeq), v))
	})
}

// TranscriptSeqContainsFold applies the ContainsFold predicate on the "transcript_seq" field.
func TranscriptSeqContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTranscriptSeq), v))
	})
}

// CdsSeqEQ applies the EQ predicate on the "cds_seq" field.
func CdsSeqEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqNEQ applies the NEQ predicate on the "cds_seq" field.
func CdsSeqNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqIn applies the In predicate on the "cds_seq" field.
func CdsSeqIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCdsSeq), v...))
	})
}

// CdsSeqNotIn applies the NotIn predicate on the "cds_seq" field.
func CdsSeqNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCdsSeq), v...))
	})
}

// CdsSeqGT applies the GT predicate on the "cds_seq" field.
func CdsSeqGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqGTE applies the GTE predicate on the "cds_seq" field.
func CdsSeqGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqLT applies the LT predicate on the "cds_seq" field.
func CdsSeqLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqLTE applies the LTE predicate on the "cds_seq" field.
func CdsSeqLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqContains applies the Contains predicate on the "cds_seq" field.
func CdsSeqContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqHasPrefix applies the HasPrefix predicate on the "cds_seq" field.
func CdsSeqHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqHasSuffix applies the HasSuffix predicate on the "cds_seq" field.
func CdsSeqHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqEqualFold applies the EqualFold predicate on the "cds_seq" field.
func CdsSeqEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCdsSeq), v))
	})
}

// CdsSeqContainsFold applies the ContainsFold predicate on the "cds_seq" field.
func CdsSeqContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCdsSeq), v))
	})
}

// ProteinSeqEQ applies the EQ predicate on the "protein_seq" field.
func ProteinSeqEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqNEQ applies the NEQ predicate on the "protein_seq" field.
func ProteinSeqNEQ(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqIn applies the In predicate on the "protein_seq" field.
func ProteinSeqIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProteinSeq), v...))
	})
}

// ProteinSeqNotIn applies the NotIn predicate on the "protein_seq" field.
func ProteinSeqNotIn(vs ...string) predicate.Transcript {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProteinSeq), v...))
	})
}

// ProteinSeqGT applies the GT predicate on the "protein_seq" field.
func ProteinSeqGT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqGTE applies the GTE predicate on the "protein_seq" field.
func ProteinSeqGTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqLT applies the LT predicate on the "protein_seq" field.
func ProteinSeqLT(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqLTE applies the LTE predicate on the "protein_seq" field.
func ProteinSeqLTE(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqContains applies the Contains predicate on the "protein_seq" field.
func ProteinSeqContains(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqHasPrefix applies the HasPrefix predicate on the "protein_seq" field.
func ProteinSeqHasPrefix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqHasSuffix applies the HasSuffix predicate on the "protein_seq" field.
func ProteinSeqHasSuffix(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqEqualFold applies the EqualFold predicate on the "protein_seq" field.
func ProteinSeqEqualFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProteinSeq), v))
	})
}

// ProteinSeqContainsFold applies the ContainsFold predicate on the "protein_seq" field.
func ProteinSeqContainsFold(v string) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProteinSeq), v))
	})
}

// HasGene applies the HasEdge predicate on the "gene" edge.
func HasGene() predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GeneTable, GeneFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GeneTable, GeneColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGeneWith applies the HasEdge predicate on the "gene" edge with a given conditions (other predicates).
func HasGeneWith(preds ...predicate.Gene) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GeneInverseTable, GeneFieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GeneTable, GeneColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCds applies the HasEdge predicate on the "cds" edge.
func HasCds() predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CdsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CdsTable, CdsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCdsWith applies the HasEdge predicate on the "cds" edge with a given conditions (other predicates).
func HasCdsWith(preds ...predicate.Cds) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CdsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CdsTable, CdsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExon applies the HasEdge predicate on the "exon" edge.
func HasExon() predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExonTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExonTable, ExonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExonWith applies the HasEdge predicate on the "exon" edge with a given conditions (other predicates).
func HasExonWith(preds ...predicate.Exon) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExonTable, ExonColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFivePrimeUtr applies the HasEdge predicate on the "five_prime_utr" edge.
func HasFivePrimeUtr() predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FivePrimeUtrTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FivePrimeUtrTable, FivePrimeUtrColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFivePrimeUtrWith applies the HasEdge predicate on the "five_prime_utr" edge with a given conditions (other predicates).
func HasFivePrimeUtrWith(preds ...predicate.FivePrimeUtr) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FivePrimeUtrInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FivePrimeUtrTable, FivePrimeUtrColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasThreePrimeUtr applies the HasEdge predicate on the "three_prime_utr" edge.
func HasThreePrimeUtr() predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ThreePrimeUtrTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ThreePrimeUtrTable, ThreePrimeUtrColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThreePrimeUtrWith applies the HasEdge predicate on the "three_prime_utr" edge with a given conditions (other predicates).
func HasThreePrimeUtrWith(preds ...predicate.ThreePrimeUtr) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ThreePrimeUtrInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ThreePrimeUtrTable, ThreePrimeUtrColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transcript) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transcript) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transcript) predicate.Transcript {
	return predicate.Transcript(func(s *sql.Selector) {
		p(s.Not())
	})
}
