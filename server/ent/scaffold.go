// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/genome"
	"genomedb/ent/scaffold"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Scaffold is the model entity for the Scaffold schema.
type Scaffold struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Seqname holds the value of the "seqname" field.
	Seqname string `json:"seqname,omitempty"`
	// Seq holds the value of the "seq" field.
	Seq string `json:"seq,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScaffoldQuery when eager-loading is set.
	Edges            ScaffoldEdges `json:"edges"`
	genome_scaffolds *string
}

// ScaffoldEdges holds the relations/edges for other nodes in the graph.
type ScaffoldEdges struct {
	// Genome holds the value of the genome edge.
	Genome *Genome `json:"genome,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GenomeOrErr returns the Genome value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScaffoldEdges) GenomeOrErr() (*Genome, error) {
	if e.loadedTypes[0] {
		if e.Genome == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: genome.Label}
		}
		return e.Genome, nil
	}
	return nil, &NotLoadedError{edge: "genome"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scaffold) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scaffold.FieldID:
			values[i] = new(sql.NullInt64)
		case scaffold.FieldSeqname, scaffold.FieldSeq:
			values[i] = new(sql.NullString)
		case scaffold.ForeignKeys[0]: // genome_scaffolds
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Scaffold", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scaffold fields.
func (s *Scaffold) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scaffold.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case scaffold.FieldSeqname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seqname", values[i])
			} else if value.Valid {
				s.Seqname = value.String
			}
		case scaffold.FieldSeq:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				s.Seq = value.String
			}
		case scaffold.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genome_scaffolds", values[i])
			} else if value.Valid {
				s.genome_scaffolds = new(string)
				*s.genome_scaffolds = value.String
			}
		}
	}
	return nil
}

// QueryGenome queries the "genome" edge of the Scaffold entity.
func (s *Scaffold) QueryGenome() *GenomeQuery {
	return (&ScaffoldClient{config: s.config}).QueryGenome(s)
}

// Update returns a builder for updating this Scaffold.
// Note that you need to call Scaffold.Unwrap() before calling this method if this Scaffold
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scaffold) Update() *ScaffoldUpdateOne {
	return (&ScaffoldClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Scaffold entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scaffold) Unwrap() *Scaffold {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scaffold is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scaffold) String() string {
	var builder strings.Builder
	builder.WriteString("Scaffold(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("seqname=")
	builder.WriteString(s.Seqname)
	builder.WriteString(", ")
	builder.WriteString("seq=")
	builder.WriteString(s.Seq)
	builder.WriteByte(')')
	return builder.String()
}

// Scaffolds is a parsable slice of Scaffold.
type Scaffolds []*Scaffold

func (s Scaffolds) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
