// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// GenomesColumns holds the columns for the "genomes" table.
	GenomesColumns = []*schema.Column{
		{Name: "name", Type: field.TypeString},
		{Name: "codon_table", Type: field.TypeInt32},
	}
	// GenomesTable holds the schema information for the "genomes" table.
	GenomesTable = &schema.Table{
		Name:       "genomes",
		Columns:    GenomesColumns,
		PrimaryKey: []*schema.Column{GenomesColumns[0]},
	}
	// LocusColumns holds the columns for the "locus" table.
	LocusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "genome_locuses", Type: field.TypeString, Nullable: true},
	}
	// LocusTable holds the schema information for the "locus" table.
	LocusTable = &schema.Table{
		Name:       "locus",
		Columns:    LocusColumns,
		PrimaryKey: []*schema.Column{LocusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "locus_genomes_locuses",
				Columns:    []*schema.Column{LocusColumns[1]},
				RefColumns: []*schema.Column{GenomesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ScaffoldsColumns holds the columns for the "scaffolds" table.
	ScaffoldsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "seqname", Type: field.TypeString},
		{Name: "seq", Type: field.TypeString, Size: 2147483647},
		{Name: "genome_scaffolds", Type: field.TypeString, Nullable: true},
	}
	// ScaffoldsTable holds the schema information for the "scaffolds" table.
	ScaffoldsTable = &schema.Table{
		Name:       "scaffolds",
		Columns:    ScaffoldsColumns,
		PrimaryKey: []*schema.Column{ScaffoldsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scaffolds_genomes_scaffolds",
				Columns:    []*schema.Column{ScaffoldsColumns[3]},
				RefColumns: []*schema.Column{GenomesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TranscriptsColumns holds the columns for the "transcripts" table.
	TranscriptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "seqname", Type: field.TypeString},
		{Name: "strand", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "start", Type: field.TypeInt32},
		{Name: "end", Type: field.TypeInt32},
		{Name: "exon", Type: field.TypeJSON},
		{Name: "five_prime_utr", Type: field.TypeJSON},
		{Name: "three_prime_utr", Type: field.TypeJSON},
		{Name: "cds", Type: field.TypeJSON},
		{Name: "genomic_sequence", Type: field.TypeString, Size: 2147483647},
		{Name: "exon_sequence", Type: field.TypeString, Size: 2147483647},
		{Name: "cds_sequence", Type: field.TypeString, Size: 2147483647},
		{Name: "protein_sequence", Type: field.TypeString, Size: 2147483647},
		{Name: "locus_transcripts", Type: field.TypeString, Nullable: true},
	}
	// TranscriptsTable holds the schema information for the "transcripts" table.
	TranscriptsTable = &schema.Table{
		Name:       "transcripts",
		Columns:    TranscriptsColumns,
		PrimaryKey: []*schema.Column{TranscriptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transcripts_locus_transcripts",
				Columns:    []*schema.Column{TranscriptsColumns[15]},
				RefColumns: []*schema.Column{LocusColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		GenomesTable,
		LocusTable,
		ScaffoldsTable,
		TranscriptsTable,
	}
)

func init() {
	LocusTable.ForeignKeys[0].RefTable = GenomesTable
	ScaffoldsTable.ForeignKeys[0].RefTable = GenomesTable
	TranscriptsTable.ForeignKeys[0].RefTable = LocusTable
}
