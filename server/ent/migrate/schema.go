// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CdsColumns holds the columns for the "cds" table.
	CdsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "seqname", Type: field.TypeString},
		{Name: "start", Type: field.TypeInt32},
		{Name: "end", Type: field.TypeInt32},
		{Name: "frame", Type: field.TypeInt8},
		{Name: "strand", Type: field.TypeString},
		{Name: "transcript_cds", Type: field.TypeString, Nullable: true},
	}
	// CdsTable holds the schema information for the "cds" table.
	CdsTable = &schema.Table{
		Name:       "cds",
		Columns:    CdsColumns,
		PrimaryKey: []*schema.Column{CdsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cds_transcripts_cds",
				Columns:    []*schema.Column{CdsColumns[6]},
				RefColumns: []*schema.Column{TranscriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ExonsColumns holds the columns for the "exons" table.
	ExonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "seqname", Type: field.TypeString},
		{Name: "start", Type: field.TypeInt32},
		{Name: "end", Type: field.TypeInt32},
		{Name: "strand", Type: field.TypeString},
		{Name: "transcript_exon", Type: field.TypeString, Nullable: true},
	}
	// ExonsTable holds the schema information for the "exons" table.
	ExonsTable = &schema.Table{
		Name:       "exons",
		Columns:    ExonsColumns,
		PrimaryKey: []*schema.Column{ExonsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "exons_transcripts_exon",
				Columns:    []*schema.Column{ExonsColumns[5]},
				RefColumns: []*schema.Column{TranscriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FivePrimeUtrsColumns holds the columns for the "five_prime_utrs" table.
	FivePrimeUtrsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "seqname", Type: field.TypeString},
		{Name: "start", Type: field.TypeInt32},
		{Name: "end", Type: field.TypeInt32},
		{Name: "strand", Type: field.TypeString},
		{Name: "transcript_five_prime_utr", Type: field.TypeString, Nullable: true},
	}
	// FivePrimeUtrsTable holds the schema information for the "five_prime_utrs" table.
	FivePrimeUtrsTable = &schema.Table{
		Name:       "five_prime_utrs",
		Columns:    FivePrimeUtrsColumns,
		PrimaryKey: []*schema.Column{FivePrimeUtrsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "five_prime_utrs_transcripts_five_prime_utr",
				Columns:    []*schema.Column{FivePrimeUtrsColumns[5]},
				RefColumns: []*schema.Column{TranscriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GenesColumns holds the columns for the "genes" table.
	GenesColumns = []*schema.Column{
		{Name: "geneId", Type: field.TypeString},
		{Name: "genome_genes", Type: field.TypeString, Nullable: true},
	}
	// GenesTable holds the schema information for the "genes" table.
	GenesTable = &schema.Table{
		Name:       "genes",
		Columns:    GenesColumns,
		PrimaryKey: []*schema.Column{GenesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "genes_genomes_genes",
				Columns:    []*schema.Column{GenesColumns[1]},
				RefColumns: []*schema.Column{GenomesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GenomesColumns holds the columns for the "genomes" table.
	GenomesColumns = []*schema.Column{
		{Name: "name", Type: field.TypeString},
		{Name: "codon_table", Type: field.TypeInt32},
	}
	// GenomesTable holds the schema information for the "genomes" table.
	GenomesTable = &schema.Table{
		Name:       "genomes",
		Columns:    GenomesColumns,
		PrimaryKey: []*schema.Column{GenomesColumns[0]},
	}
	// ScaffoldsColumns holds the columns for the "scaffolds" table.
	ScaffoldsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "seqname", Type: field.TypeString},
		{Name: "seq", Type: field.TypeString, Size: 2147483647},
		{Name: "genome_scaffolds", Type: field.TypeString, Nullable: true},
	}
	// ScaffoldsTable holds the schema information for the "scaffolds" table.
	ScaffoldsTable = &schema.Table{
		Name:       "scaffolds",
		Columns:    ScaffoldsColumns,
		PrimaryKey: []*schema.Column{ScaffoldsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "scaffolds_genomes_scaffolds",
				Columns:    []*schema.Column{ScaffoldsColumns[3]},
				RefColumns: []*schema.Column{GenomesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ThreePrimeUtrsColumns holds the columns for the "three_prime_utrs" table.
	ThreePrimeUtrsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "seqname", Type: field.TypeString},
		{Name: "start", Type: field.TypeInt32},
		{Name: "end", Type: field.TypeInt32},
		{Name: "strand", Type: field.TypeString},
		{Name: "transcript_three_prime_utr", Type: field.TypeString, Nullable: true},
	}
	// ThreePrimeUtrsTable holds the schema information for the "three_prime_utrs" table.
	ThreePrimeUtrsTable = &schema.Table{
		Name:       "three_prime_utrs",
		Columns:    ThreePrimeUtrsColumns,
		PrimaryKey: []*schema.Column{ThreePrimeUtrsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "three_prime_utrs_transcripts_three_prime_utr",
				Columns:    []*schema.Column{ThreePrimeUtrsColumns[5]},
				RefColumns: []*schema.Column{TranscriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TranscriptsColumns holds the columns for the "transcripts" table.
	TranscriptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "strand", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "genome_seq", Type: field.TypeString, Size: 2147483647},
		{Name: "transcript_seq", Type: field.TypeString, Size: 2147483647},
		{Name: "cds_seq", Type: field.TypeString, Size: 2147483647},
		{Name: "protein_seq", Type: field.TypeString, Size: 2147483647},
		{Name: "gene_transcripts", Type: field.TypeString, Nullable: true},
	}
	// TranscriptsTable holds the schema information for the "transcripts" table.
	TranscriptsTable = &schema.Table{
		Name:       "transcripts",
		Columns:    TranscriptsColumns,
		PrimaryKey: []*schema.Column{TranscriptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transcripts_genes_transcripts",
				Columns:    []*schema.Column{TranscriptsColumns[7]},
				RefColumns: []*schema.Column{GenesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CdsTable,
		ExonsTable,
		FivePrimeUtrsTable,
		GenesTable,
		GenomesTable,
		ScaffoldsTable,
		ThreePrimeUtrsTable,
		TranscriptsTable,
	}
)

func init() {
	CdsTable.ForeignKeys[0].RefTable = TranscriptsTable
	ExonsTable.ForeignKeys[0].RefTable = TranscriptsTable
	FivePrimeUtrsTable.ForeignKeys[0].RefTable = TranscriptsTable
	GenesTable.ForeignKeys[0].RefTable = GenomesTable
	ScaffoldsTable.ForeignKeys[0].RefTable = GenomesTable
	ThreePrimeUtrsTable.ForeignKeys[0].RefTable = TranscriptsTable
	TranscriptsTable.ForeignKeys[0].RefTable = GenesTable
}
