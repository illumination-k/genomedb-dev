// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/bio/gffio"
	"genomedb/ent/goterm"
	"genomedb/ent/locus"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TranscriptCreate is the builder for creating a Transcript entity.
type TranscriptCreate struct {
	config
	mutation *TranscriptMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSeqname sets the "seqname" field.
func (tc *TranscriptCreate) SetSeqname(s string) *TranscriptCreate {
	tc.mutation.SetSeqname(s)
	return tc
}

// SetStrand sets the "strand" field.
func (tc *TranscriptCreate) SetStrand(s string) *TranscriptCreate {
	tc.mutation.SetStrand(s)
	return tc
}

// SetType sets the "type" field.
func (tc *TranscriptCreate) SetType(s string) *TranscriptCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetSource sets the "source" field.
func (tc *TranscriptCreate) SetSource(s string) *TranscriptCreate {
	tc.mutation.SetSource(s)
	return tc
}

// SetStart sets the "start" field.
func (tc *TranscriptCreate) SetStart(i int32) *TranscriptCreate {
	tc.mutation.SetStart(i)
	return tc
}

// SetEnd sets the "end" field.
func (tc *TranscriptCreate) SetEnd(i int32) *TranscriptCreate {
	tc.mutation.SetEnd(i)
	return tc
}

// SetExon sets the "exon" field.
func (tc *TranscriptCreate) SetExon(gr []gffio.GffRecord) *TranscriptCreate {
	tc.mutation.SetExon(gr)
	return tc
}

// SetFivePrimeUtr sets the "five_prime_utr" field.
func (tc *TranscriptCreate) SetFivePrimeUtr(gr []gffio.GffRecord) *TranscriptCreate {
	tc.mutation.SetFivePrimeUtr(gr)
	return tc
}

// SetThreePrimeUtr sets the "three_prime_utr" field.
func (tc *TranscriptCreate) SetThreePrimeUtr(gr []gffio.GffRecord) *TranscriptCreate {
	tc.mutation.SetThreePrimeUtr(gr)
	return tc
}

// SetCds sets the "cds" field.
func (tc *TranscriptCreate) SetCds(gr []gffio.GffRecord) *TranscriptCreate {
	tc.mutation.SetCds(gr)
	return tc
}

// SetGenomicSequence sets the "genomic_sequence" field.
func (tc *TranscriptCreate) SetGenomicSequence(s string) *TranscriptCreate {
	tc.mutation.SetGenomicSequence(s)
	return tc
}

// SetExonSequence sets the "exon_sequence" field.
func (tc *TranscriptCreate) SetExonSequence(s string) *TranscriptCreate {
	tc.mutation.SetExonSequence(s)
	return tc
}

// SetCdsSequence sets the "cds_sequence" field.
func (tc *TranscriptCreate) SetCdsSequence(s string) *TranscriptCreate {
	tc.mutation.SetCdsSequence(s)
	return tc
}

// SetProteinSequence sets the "protein_sequence" field.
func (tc *TranscriptCreate) SetProteinSequence(s string) *TranscriptCreate {
	tc.mutation.SetProteinSequence(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TranscriptCreate) SetID(s string) *TranscriptCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetLocusID sets the "locus" edge to the Locus entity by ID.
func (tc *TranscriptCreate) SetLocusID(id string) *TranscriptCreate {
	tc.mutation.SetLocusID(id)
	return tc
}

// SetNillableLocusID sets the "locus" edge to the Locus entity by ID if the given value is not nil.
func (tc *TranscriptCreate) SetNillableLocusID(id *string) *TranscriptCreate {
	if id != nil {
		tc = tc.SetLocusID(*id)
	}
	return tc
}

// SetLocus sets the "locus" edge to the Locus entity.
func (tc *TranscriptCreate) SetLocus(l *Locus) *TranscriptCreate {
	return tc.SetLocusID(l.ID)
}

// AddGotermIDs adds the "goterms" edge to the GoTerm entity by IDs.
func (tc *TranscriptCreate) AddGotermIDs(ids ...string) *TranscriptCreate {
	tc.mutation.AddGotermIDs(ids...)
	return tc
}

// AddGoterms adds the "goterms" edges to the GoTerm entity.
func (tc *TranscriptCreate) AddGoterms(g ...*GoTerm) *TranscriptCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return tc.AddGotermIDs(ids...)
}

// Mutation returns the TranscriptMutation object of the builder.
func (tc *TranscriptCreate) Mutation() *TranscriptMutation {
	return tc.mutation
}

// Save creates the Transcript in the database.
func (tc *TranscriptCreate) Save(ctx context.Context) (*Transcript, error) {
	var (
		err  error
		node *Transcript
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TranscriptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transcript)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TranscriptMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TranscriptCreate) SaveX(ctx context.Context) *Transcript {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TranscriptCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TranscriptCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TranscriptCreate) check() error {
	if _, ok := tc.mutation.Seqname(); !ok {
		return &ValidationError{Name: "seqname", err: errors.New(`ent: missing required field "Transcript.seqname"`)}
	}
	if _, ok := tc.mutation.Strand(); !ok {
		return &ValidationError{Name: "strand", err: errors.New(`ent: missing required field "Transcript.strand"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Transcript.type"`)}
	}
	if _, ok := tc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Transcript.source"`)}
	}
	if _, ok := tc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Transcript.start"`)}
	}
	if v, ok := tc.mutation.Start(); ok {
		if err := transcript.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "Transcript.start": %w`, err)}
		}
	}
	if _, ok := tc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Transcript.end"`)}
	}
	if v, ok := tc.mutation.End(); ok {
		if err := transcript.EndValidator(v); err != nil {
			return &ValidationError{Name: "end", err: fmt.Errorf(`ent: validator failed for field "Transcript.end": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Exon(); !ok {
		return &ValidationError{Name: "exon", err: errors.New(`ent: missing required field "Transcript.exon"`)}
	}
	if _, ok := tc.mutation.FivePrimeUtr(); !ok {
		return &ValidationError{Name: "five_prime_utr", err: errors.New(`ent: missing required field "Transcript.five_prime_utr"`)}
	}
	if _, ok := tc.mutation.ThreePrimeUtr(); !ok {
		return &ValidationError{Name: "three_prime_utr", err: errors.New(`ent: missing required field "Transcript.three_prime_utr"`)}
	}
	if _, ok := tc.mutation.Cds(); !ok {
		return &ValidationError{Name: "cds", err: errors.New(`ent: missing required field "Transcript.cds"`)}
	}
	if _, ok := tc.mutation.GenomicSequence(); !ok {
		return &ValidationError{Name: "genomic_sequence", err: errors.New(`ent: missing required field "Transcript.genomic_sequence"`)}
	}
	if _, ok := tc.mutation.ExonSequence(); !ok {
		return &ValidationError{Name: "exon_sequence", err: errors.New(`ent: missing required field "Transcript.exon_sequence"`)}
	}
	if _, ok := tc.mutation.CdsSequence(); !ok {
		return &ValidationError{Name: "cds_sequence", err: errors.New(`ent: missing required field "Transcript.cds_sequence"`)}
	}
	if _, ok := tc.mutation.ProteinSequence(); !ok {
		return &ValidationError{Name: "protein_sequence", err: errors.New(`ent: missing required field "Transcript.protein_sequence"`)}
	}
	return nil
}

func (tc *TranscriptCreate) sqlSave(ctx context.Context) (*Transcript, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Transcript.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (tc *TranscriptCreate) createSpec() (*Transcript, *sqlgraph.CreateSpec) {
	var (
		_node = &Transcript{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transcript.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transcript.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Seqname(); ok {
		_spec.SetField(transcript.FieldSeqname, field.TypeString, value)
		_node.Seqname = value
	}
	if value, ok := tc.mutation.Strand(); ok {
		_spec.SetField(transcript.FieldStrand, field.TypeString, value)
		_node.Strand = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(transcript.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Source(); ok {
		_spec.SetField(transcript.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := tc.mutation.Start(); ok {
		_spec.SetField(transcript.FieldStart, field.TypeInt32, value)
		_node.Start = value
	}
	if value, ok := tc.mutation.End(); ok {
		_spec.SetField(transcript.FieldEnd, field.TypeInt32, value)
		_node.End = value
	}
	if value, ok := tc.mutation.Exon(); ok {
		_spec.SetField(transcript.FieldExon, field.TypeJSON, value)
		_node.Exon = value
	}
	if value, ok := tc.mutation.FivePrimeUtr(); ok {
		_spec.SetField(transcript.FieldFivePrimeUtr, field.TypeJSON, value)
		_node.FivePrimeUtr = value
	}
	if value, ok := tc.mutation.ThreePrimeUtr(); ok {
		_spec.SetField(transcript.FieldThreePrimeUtr, field.TypeJSON, value)
		_node.ThreePrimeUtr = value
	}
	if value, ok := tc.mutation.Cds(); ok {
		_spec.SetField(transcript.FieldCds, field.TypeJSON, value)
		_node.Cds = value
	}
	if value, ok := tc.mutation.GenomicSequence(); ok {
		_spec.SetField(transcript.FieldGenomicSequence, field.TypeString, value)
		_node.GenomicSequence = value
	}
	if value, ok := tc.mutation.ExonSequence(); ok {
		_spec.SetField(transcript.FieldExonSequence, field.TypeString, value)
		_node.ExonSequence = value
	}
	if value, ok := tc.mutation.CdsSequence(); ok {
		_spec.SetField(transcript.FieldCdsSequence, field.TypeString, value)
		_node.CdsSequence = value
	}
	if value, ok := tc.mutation.ProteinSequence(); ok {
		_spec.SetField(transcript.FieldProteinSequence, field.TypeString, value)
		_node.ProteinSequence = value
	}
	if nodes := tc.mutation.LocusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcript.LocusTable,
			Columns: []string{transcript.LocusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: locus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.locus_transcripts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.GotermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   transcript.GotermsTable,
			Columns: transcript.GotermsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transcript.Create().
//		SetSeqname(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TranscriptUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (tc *TranscriptCreate) OnConflict(opts ...sql.ConflictOption) *TranscriptUpsertOne {
	tc.conflict = opts
	return &TranscriptUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transcript.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TranscriptCreate) OnConflictColumns(columns ...string) *TranscriptUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TranscriptUpsertOne{
		create: tc,
	}
}

type (
	// TranscriptUpsertOne is the builder for "upsert"-ing
	//  one Transcript node.
	TranscriptUpsertOne struct {
		create *TranscriptCreate
	}

	// TranscriptUpsert is the "OnConflict" setter.
	TranscriptUpsert struct {
		*sql.UpdateSet
	}
)

// SetSeqname sets the "seqname" field.
func (u *TranscriptUpsert) SetSeqname(v string) *TranscriptUpsert {
	u.Set(transcript.FieldSeqname, v)
	return u
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateSeqname() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldSeqname)
	return u
}

// SetStrand sets the "strand" field.
func (u *TranscriptUpsert) SetStrand(v string) *TranscriptUpsert {
	u.Set(transcript.FieldStrand, v)
	return u
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateStrand() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldStrand)
	return u
}

// SetType sets the "type" field.
func (u *TranscriptUpsert) SetType(v string) *TranscriptUpsert {
	u.Set(transcript.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateType() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldType)
	return u
}

// SetSource sets the "source" field.
func (u *TranscriptUpsert) SetSource(v string) *TranscriptUpsert {
	u.Set(transcript.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateSource() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldSource)
	return u
}

// SetStart sets the "start" field.
func (u *TranscriptUpsert) SetStart(v int32) *TranscriptUpsert {
	u.Set(transcript.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateStart() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *TranscriptUpsert) AddStart(v int32) *TranscriptUpsert {
	u.Add(transcript.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *TranscriptUpsert) SetEnd(v int32) *TranscriptUpsert {
	u.Set(transcript.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateEnd() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *TranscriptUpsert) AddEnd(v int32) *TranscriptUpsert {
	u.Add(transcript.FieldEnd, v)
	return u
}

// SetExon sets the "exon" field.
func (u *TranscriptUpsert) SetExon(v []gffio.GffRecord) *TranscriptUpsert {
	u.Set(transcript.FieldExon, v)
	return u
}

// UpdateExon sets the "exon" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateExon() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldExon)
	return u
}

// SetFivePrimeUtr sets the "five_prime_utr" field.
func (u *TranscriptUpsert) SetFivePrimeUtr(v []gffio.GffRecord) *TranscriptUpsert {
	u.Set(transcript.FieldFivePrimeUtr, v)
	return u
}

// UpdateFivePrimeUtr sets the "five_prime_utr" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateFivePrimeUtr() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldFivePrimeUtr)
	return u
}

// SetThreePrimeUtr sets the "three_prime_utr" field.
func (u *TranscriptUpsert) SetThreePrimeUtr(v []gffio.GffRecord) *TranscriptUpsert {
	u.Set(transcript.FieldThreePrimeUtr, v)
	return u
}

// UpdateThreePrimeUtr sets the "three_prime_utr" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateThreePrimeUtr() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldThreePrimeUtr)
	return u
}

// SetCds sets the "cds" field.
func (u *TranscriptUpsert) SetCds(v []gffio.GffRecord) *TranscriptUpsert {
	u.Set(transcript.FieldCds, v)
	return u
}

// UpdateCds sets the "cds" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateCds() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldCds)
	return u
}

// SetGenomicSequence sets the "genomic_sequence" field.
func (u *TranscriptUpsert) SetGenomicSequence(v string) *TranscriptUpsert {
	u.Set(transcript.FieldGenomicSequence, v)
	return u
}

// UpdateGenomicSequence sets the "genomic_sequence" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateGenomicSequence() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldGenomicSequence)
	return u
}

// SetExonSequence sets the "exon_sequence" field.
func (u *TranscriptUpsert) SetExonSequence(v string) *TranscriptUpsert {
	u.Set(transcript.FieldExonSequence, v)
	return u
}

// UpdateExonSequence sets the "exon_sequence" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateExonSequence() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldExonSequence)
	return u
}

// SetCdsSequence sets the "cds_sequence" field.
func (u *TranscriptUpsert) SetCdsSequence(v string) *TranscriptUpsert {
	u.Set(transcript.FieldCdsSequence, v)
	return u
}

// UpdateCdsSequence sets the "cds_sequence" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateCdsSequence() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldCdsSequence)
	return u
}

// SetProteinSequence sets the "protein_sequence" field.
func (u *TranscriptUpsert) SetProteinSequence(v string) *TranscriptUpsert {
	u.Set(transcript.FieldProteinSequence, v)
	return u
}

// UpdateProteinSequence sets the "protein_sequence" field to the value that was provided on create.
func (u *TranscriptUpsert) UpdateProteinSequence() *TranscriptUpsert {
	u.SetExcluded(transcript.FieldProteinSequence)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Transcript.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transcript.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TranscriptUpsertOne) UpdateNewValues() *TranscriptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(transcript.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transcript.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TranscriptUpsertOne) Ignore() *TranscriptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TranscriptUpsertOne) DoNothing() *TranscriptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TranscriptCreate.OnConflict
// documentation for more info.
func (u *TranscriptUpsertOne) Update(set func(*TranscriptUpsert)) *TranscriptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TranscriptUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *TranscriptUpsertOne) SetSeqname(v string) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateSeqname() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateSeqname()
	})
}

// SetStrand sets the "strand" field.
func (u *TranscriptUpsertOne) SetStrand(v string) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateStrand() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateStrand()
	})
}

// SetType sets the "type" field.
func (u *TranscriptUpsertOne) SetType(v string) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateType() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateType()
	})
}

// SetSource sets the "source" field.
func (u *TranscriptUpsertOne) SetSource(v string) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateSource() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateSource()
	})
}

// SetStart sets the "start" field.
func (u *TranscriptUpsertOne) SetStart(v int32) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *TranscriptUpsertOne) AddStart(v int32) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateStart() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *TranscriptUpsertOne) SetEnd(v int32) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *TranscriptUpsertOne) AddEnd(v int32) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateEnd() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateEnd()
	})
}

// SetExon sets the "exon" field.
func (u *TranscriptUpsertOne) SetExon(v []gffio.GffRecord) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetExon(v)
	})
}

// UpdateExon sets the "exon" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateExon() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateExon()
	})
}

// SetFivePrimeUtr sets the "five_prime_utr" field.
func (u *TranscriptUpsertOne) SetFivePrimeUtr(v []gffio.GffRecord) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetFivePrimeUtr(v)
	})
}

// UpdateFivePrimeUtr sets the "five_prime_utr" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateFivePrimeUtr() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateFivePrimeUtr()
	})
}

// SetThreePrimeUtr sets the "three_prime_utr" field.
func (u *TranscriptUpsertOne) SetThreePrimeUtr(v []gffio.GffRecord) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetThreePrimeUtr(v)
	})
}

// UpdateThreePrimeUtr sets the "three_prime_utr" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateThreePrimeUtr() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateThreePrimeUtr()
	})
}

// SetCds sets the "cds" field.
func (u *TranscriptUpsertOne) SetCds(v []gffio.GffRecord) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetCds(v)
	})
}

// UpdateCds sets the "cds" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateCds() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateCds()
	})
}

// SetGenomicSequence sets the "genomic_sequence" field.
func (u *TranscriptUpsertOne) SetGenomicSequence(v string) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetGenomicSequence(v)
	})
}

// UpdateGenomicSequence sets the "genomic_sequence" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateGenomicSequence() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateGenomicSequence()
	})
}

// SetExonSequence sets the "exon_sequence" field.
func (u *TranscriptUpsertOne) SetExonSequence(v string) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetExonSequence(v)
	})
}

// UpdateExonSequence sets the "exon_sequence" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateExonSequence() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateExonSequence()
	})
}

// SetCdsSequence sets the "cds_sequence" field.
func (u *TranscriptUpsertOne) SetCdsSequence(v string) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetCdsSequence(v)
	})
}

// UpdateCdsSequence sets the "cds_sequence" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateCdsSequence() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateCdsSequence()
	})
}

// SetProteinSequence sets the "protein_sequence" field.
func (u *TranscriptUpsertOne) SetProteinSequence(v string) *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetProteinSequence(v)
	})
}

// UpdateProteinSequence sets the "protein_sequence" field to the value that was provided on create.
func (u *TranscriptUpsertOne) UpdateProteinSequence() *TranscriptUpsertOne {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateProteinSequence()
	})
}

// Exec executes the query.
func (u *TranscriptUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TranscriptCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TranscriptUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TranscriptUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TranscriptUpsertOne.ID is not supported by MySQL driver. Use TranscriptUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TranscriptUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TranscriptCreateBulk is the builder for creating many Transcript entities in bulk.
type TranscriptCreateBulk struct {
	config
	builders []*TranscriptCreate
	conflict []sql.ConflictOption
}

// Save creates the Transcript entities in the database.
func (tcb *TranscriptCreateBulk) Save(ctx context.Context) ([]*Transcript, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transcript, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TranscriptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TranscriptCreateBulk) SaveX(ctx context.Context) []*Transcript {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TranscriptCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TranscriptCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Transcript.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TranscriptUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (tcb *TranscriptCreateBulk) OnConflict(opts ...sql.ConflictOption) *TranscriptUpsertBulk {
	tcb.conflict = opts
	return &TranscriptUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Transcript.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TranscriptCreateBulk) OnConflictColumns(columns ...string) *TranscriptUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TranscriptUpsertBulk{
		create: tcb,
	}
}

// TranscriptUpsertBulk is the builder for "upsert"-ing
// a bulk of Transcript nodes.
type TranscriptUpsertBulk struct {
	create *TranscriptCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Transcript.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(transcript.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TranscriptUpsertBulk) UpdateNewValues() *TranscriptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(transcript.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Transcript.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TranscriptUpsertBulk) Ignore() *TranscriptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TranscriptUpsertBulk) DoNothing() *TranscriptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TranscriptCreateBulk.OnConflict
// documentation for more info.
func (u *TranscriptUpsertBulk) Update(set func(*TranscriptUpsert)) *TranscriptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TranscriptUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *TranscriptUpsertBulk) SetSeqname(v string) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateSeqname() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateSeqname()
	})
}

// SetStrand sets the "strand" field.
func (u *TranscriptUpsertBulk) SetStrand(v string) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateStrand() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateStrand()
	})
}

// SetType sets the "type" field.
func (u *TranscriptUpsertBulk) SetType(v string) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateType() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateType()
	})
}

// SetSource sets the "source" field.
func (u *TranscriptUpsertBulk) SetSource(v string) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateSource() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateSource()
	})
}

// SetStart sets the "start" field.
func (u *TranscriptUpsertBulk) SetStart(v int32) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *TranscriptUpsertBulk) AddStart(v int32) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateStart() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *TranscriptUpsertBulk) SetEnd(v int32) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *TranscriptUpsertBulk) AddEnd(v int32) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateEnd() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateEnd()
	})
}

// SetExon sets the "exon" field.
func (u *TranscriptUpsertBulk) SetExon(v []gffio.GffRecord) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetExon(v)
	})
}

// UpdateExon sets the "exon" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateExon() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateExon()
	})
}

// SetFivePrimeUtr sets the "five_prime_utr" field.
func (u *TranscriptUpsertBulk) SetFivePrimeUtr(v []gffio.GffRecord) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetFivePrimeUtr(v)
	})
}

// UpdateFivePrimeUtr sets the "five_prime_utr" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateFivePrimeUtr() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateFivePrimeUtr()
	})
}

// SetThreePrimeUtr sets the "three_prime_utr" field.
func (u *TranscriptUpsertBulk) SetThreePrimeUtr(v []gffio.GffRecord) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetThreePrimeUtr(v)
	})
}

// UpdateThreePrimeUtr sets the "three_prime_utr" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateThreePrimeUtr() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateThreePrimeUtr()
	})
}

// SetCds sets the "cds" field.
func (u *TranscriptUpsertBulk) SetCds(v []gffio.GffRecord) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetCds(v)
	})
}

// UpdateCds sets the "cds" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateCds() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateCds()
	})
}

// SetGenomicSequence sets the "genomic_sequence" field.
func (u *TranscriptUpsertBulk) SetGenomicSequence(v string) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetGenomicSequence(v)
	})
}

// UpdateGenomicSequence sets the "genomic_sequence" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateGenomicSequence() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateGenomicSequence()
	})
}

// SetExonSequence sets the "exon_sequence" field.
func (u *TranscriptUpsertBulk) SetExonSequence(v string) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetExonSequence(v)
	})
}

// UpdateExonSequence sets the "exon_sequence" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateExonSequence() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateExonSequence()
	})
}

// SetCdsSequence sets the "cds_sequence" field.
func (u *TranscriptUpsertBulk) SetCdsSequence(v string) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetCdsSequence(v)
	})
}

// UpdateCdsSequence sets the "cds_sequence" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateCdsSequence() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateCdsSequence()
	})
}

// SetProteinSequence sets the "protein_sequence" field.
func (u *TranscriptUpsertBulk) SetProteinSequence(v string) *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.SetProteinSequence(v)
	})
}

// UpdateProteinSequence sets the "protein_sequence" field to the value that was provided on create.
func (u *TranscriptUpsertBulk) UpdateProteinSequence() *TranscriptUpsertBulk {
	return u.Update(func(s *TranscriptUpsert) {
		s.UpdateProteinSequence()
	})
}

// Exec executes the query.
func (u *TranscriptUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TranscriptCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TranscriptCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TranscriptUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
