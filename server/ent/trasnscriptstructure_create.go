// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/trasnscriptstructure"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrasnscriptStructureCreate is the builder for creating a TrasnscriptStructure entity.
type TrasnscriptStructureCreate struct {
	config
	mutation *TrasnscriptStructureMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTranscriptId sets the "transcriptId" field.
func (tsc *TrasnscriptStructureCreate) SetTranscriptId(s string) *TrasnscriptStructureCreate {
	tsc.mutation.SetTranscriptId(s)
	return tsc
}

// SetFeature sets the "feature" field.
func (tsc *TrasnscriptStructureCreate) SetFeature(s string) *TrasnscriptStructureCreate {
	tsc.mutation.SetFeature(s)
	return tsc
}

// SetSeqname sets the "seqname" field.
func (tsc *TrasnscriptStructureCreate) SetSeqname(s string) *TrasnscriptStructureCreate {
	tsc.mutation.SetSeqname(s)
	return tsc
}

// SetStart sets the "start" field.
func (tsc *TrasnscriptStructureCreate) SetStart(i int32) *TrasnscriptStructureCreate {
	tsc.mutation.SetStart(i)
	return tsc
}

// SetEnd sets the "end" field.
func (tsc *TrasnscriptStructureCreate) SetEnd(i int32) *TrasnscriptStructureCreate {
	tsc.mutation.SetEnd(i)
	return tsc
}

// SetStrand sets the "strand" field.
func (tsc *TrasnscriptStructureCreate) SetStrand(s string) *TrasnscriptStructureCreate {
	tsc.mutation.SetStrand(s)
	return tsc
}

// Mutation returns the TrasnscriptStructureMutation object of the builder.
func (tsc *TrasnscriptStructureCreate) Mutation() *TrasnscriptStructureMutation {
	return tsc.mutation
}

// Save creates the TrasnscriptStructure in the database.
func (tsc *TrasnscriptStructureCreate) Save(ctx context.Context) (*TrasnscriptStructure, error) {
	var (
		err  error
		node *TrasnscriptStructure
	)
	if len(tsc.hooks) == 0 {
		if err = tsc.check(); err != nil {
			return nil, err
		}
		node, err = tsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TrasnscriptStructureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tsc.check(); err != nil {
				return nil, err
			}
			tsc.mutation = mutation
			if node, err = tsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tsc.hooks) - 1; i >= 0; i-- {
			if tsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TrasnscriptStructure)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TrasnscriptStructureMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TrasnscriptStructureCreate) SaveX(ctx context.Context) *TrasnscriptStructure {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TrasnscriptStructureCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TrasnscriptStructureCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TrasnscriptStructureCreate) check() error {
	if _, ok := tsc.mutation.TranscriptId(); !ok {
		return &ValidationError{Name: "transcriptId", err: errors.New(`ent: missing required field "TrasnscriptStructure.transcriptId"`)}
	}
	if _, ok := tsc.mutation.Feature(); !ok {
		return &ValidationError{Name: "feature", err: errors.New(`ent: missing required field "TrasnscriptStructure.feature"`)}
	}
	if _, ok := tsc.mutation.Seqname(); !ok {
		return &ValidationError{Name: "seqname", err: errors.New(`ent: missing required field "TrasnscriptStructure.seqname"`)}
	}
	if _, ok := tsc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "TrasnscriptStructure.start"`)}
	}
	if _, ok := tsc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "TrasnscriptStructure.end"`)}
	}
	if _, ok := tsc.mutation.Strand(); !ok {
		return &ValidationError{Name: "strand", err: errors.New(`ent: missing required field "TrasnscriptStructure.strand"`)}
	}
	return nil
}

func (tsc *TrasnscriptStructureCreate) sqlSave(ctx context.Context) (*TrasnscriptStructure, error) {
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tsc *TrasnscriptStructureCreate) createSpec() (*TrasnscriptStructure, *sqlgraph.CreateSpec) {
	var (
		_node = &TrasnscriptStructure{config: tsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: trasnscriptstructure.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: trasnscriptstructure.FieldID,
			},
		}
	)
	_spec.OnConflict = tsc.conflict
	if value, ok := tsc.mutation.TranscriptId(); ok {
		_spec.SetField(trasnscriptstructure.FieldTranscriptId, field.TypeString, value)
		_node.TranscriptId = value
	}
	if value, ok := tsc.mutation.Feature(); ok {
		_spec.SetField(trasnscriptstructure.FieldFeature, field.TypeString, value)
		_node.Feature = value
	}
	if value, ok := tsc.mutation.Seqname(); ok {
		_spec.SetField(trasnscriptstructure.FieldSeqname, field.TypeString, value)
		_node.Seqname = value
	}
	if value, ok := tsc.mutation.Start(); ok {
		_spec.SetField(trasnscriptstructure.FieldStart, field.TypeInt32, value)
		_node.Start = value
	}
	if value, ok := tsc.mutation.End(); ok {
		_spec.SetField(trasnscriptstructure.FieldEnd, field.TypeInt32, value)
		_node.End = value
	}
	if value, ok := tsc.mutation.Strand(); ok {
		_spec.SetField(trasnscriptstructure.FieldStrand, field.TypeString, value)
		_node.Strand = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrasnscriptStructure.Create().
//		SetTranscriptId(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrasnscriptStructureUpsert) {
//			SetTranscriptId(v+v).
//		}).
//		Exec(ctx)
func (tsc *TrasnscriptStructureCreate) OnConflict(opts ...sql.ConflictOption) *TrasnscriptStructureUpsertOne {
	tsc.conflict = opts
	return &TrasnscriptStructureUpsertOne{
		create: tsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrasnscriptStructure.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsc *TrasnscriptStructureCreate) OnConflictColumns(columns ...string) *TrasnscriptStructureUpsertOne {
	tsc.conflict = append(tsc.conflict, sql.ConflictColumns(columns...))
	return &TrasnscriptStructureUpsertOne{
		create: tsc,
	}
}

type (
	// TrasnscriptStructureUpsertOne is the builder for "upsert"-ing
	//  one TrasnscriptStructure node.
	TrasnscriptStructureUpsertOne struct {
		create *TrasnscriptStructureCreate
	}

	// TrasnscriptStructureUpsert is the "OnConflict" setter.
	TrasnscriptStructureUpsert struct {
		*sql.UpdateSet
	}
)

// SetTranscriptId sets the "transcriptId" field.
func (u *TrasnscriptStructureUpsert) SetTranscriptId(v string) *TrasnscriptStructureUpsert {
	u.Set(trasnscriptstructure.FieldTranscriptId, v)
	return u
}

// UpdateTranscriptId sets the "transcriptId" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsert) UpdateTranscriptId() *TrasnscriptStructureUpsert {
	u.SetExcluded(trasnscriptstructure.FieldTranscriptId)
	return u
}

// SetFeature sets the "feature" field.
func (u *TrasnscriptStructureUpsert) SetFeature(v string) *TrasnscriptStructureUpsert {
	u.Set(trasnscriptstructure.FieldFeature, v)
	return u
}

// UpdateFeature sets the "feature" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsert) UpdateFeature() *TrasnscriptStructureUpsert {
	u.SetExcluded(trasnscriptstructure.FieldFeature)
	return u
}

// SetSeqname sets the "seqname" field.
func (u *TrasnscriptStructureUpsert) SetSeqname(v string) *TrasnscriptStructureUpsert {
	u.Set(trasnscriptstructure.FieldSeqname, v)
	return u
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsert) UpdateSeqname() *TrasnscriptStructureUpsert {
	u.SetExcluded(trasnscriptstructure.FieldSeqname)
	return u
}

// SetStart sets the "start" field.
func (u *TrasnscriptStructureUpsert) SetStart(v int32) *TrasnscriptStructureUpsert {
	u.Set(trasnscriptstructure.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsert) UpdateStart() *TrasnscriptStructureUpsert {
	u.SetExcluded(trasnscriptstructure.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *TrasnscriptStructureUpsert) AddStart(v int32) *TrasnscriptStructureUpsert {
	u.Add(trasnscriptstructure.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *TrasnscriptStructureUpsert) SetEnd(v int32) *TrasnscriptStructureUpsert {
	u.Set(trasnscriptstructure.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsert) UpdateEnd() *TrasnscriptStructureUpsert {
	u.SetExcluded(trasnscriptstructure.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *TrasnscriptStructureUpsert) AddEnd(v int32) *TrasnscriptStructureUpsert {
	u.Add(trasnscriptstructure.FieldEnd, v)
	return u
}

// SetStrand sets the "strand" field.
func (u *TrasnscriptStructureUpsert) SetStrand(v string) *TrasnscriptStructureUpsert {
	u.Set(trasnscriptstructure.FieldStrand, v)
	return u
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsert) UpdateStrand() *TrasnscriptStructureUpsert {
	u.SetExcluded(trasnscriptstructure.FieldStrand)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TrasnscriptStructure.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TrasnscriptStructureUpsertOne) UpdateNewValues() *TrasnscriptStructureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrasnscriptStructure.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrasnscriptStructureUpsertOne) Ignore() *TrasnscriptStructureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrasnscriptStructureUpsertOne) DoNothing() *TrasnscriptStructureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrasnscriptStructureCreate.OnConflict
// documentation for more info.
func (u *TrasnscriptStructureUpsertOne) Update(set func(*TrasnscriptStructureUpsert)) *TrasnscriptStructureUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrasnscriptStructureUpsert{UpdateSet: update})
	}))
	return u
}

// SetTranscriptId sets the "transcriptId" field.
func (u *TrasnscriptStructureUpsertOne) SetTranscriptId(v string) *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetTranscriptId(v)
	})
}

// UpdateTranscriptId sets the "transcriptId" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertOne) UpdateTranscriptId() *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateTranscriptId()
	})
}

// SetFeature sets the "feature" field.
func (u *TrasnscriptStructureUpsertOne) SetFeature(v string) *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetFeature(v)
	})
}

// UpdateFeature sets the "feature" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertOne) UpdateFeature() *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateFeature()
	})
}

// SetSeqname sets the "seqname" field.
func (u *TrasnscriptStructureUpsertOne) SetSeqname(v string) *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertOne) UpdateSeqname() *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateSeqname()
	})
}

// SetStart sets the "start" field.
func (u *TrasnscriptStructureUpsertOne) SetStart(v int32) *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *TrasnscriptStructureUpsertOne) AddStart(v int32) *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertOne) UpdateStart() *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *TrasnscriptStructureUpsertOne) SetEnd(v int32) *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *TrasnscriptStructureUpsertOne) AddEnd(v int32) *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertOne) UpdateEnd() *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateEnd()
	})
}

// SetStrand sets the "strand" field.
func (u *TrasnscriptStructureUpsertOne) SetStrand(v string) *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertOne) UpdateStrand() *TrasnscriptStructureUpsertOne {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateStrand()
	})
}

// Exec executes the query.
func (u *TrasnscriptStructureUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrasnscriptStructureCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrasnscriptStructureUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrasnscriptStructureUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrasnscriptStructureUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrasnscriptStructureCreateBulk is the builder for creating many TrasnscriptStructure entities in bulk.
type TrasnscriptStructureCreateBulk struct {
	config
	builders []*TrasnscriptStructureCreate
	conflict []sql.ConflictOption
}

// Save creates the TrasnscriptStructure entities in the database.
func (tscb *TrasnscriptStructureCreateBulk) Save(ctx context.Context) ([]*TrasnscriptStructure, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TrasnscriptStructure, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrasnscriptStructureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TrasnscriptStructureCreateBulk) SaveX(ctx context.Context) []*TrasnscriptStructure {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TrasnscriptStructureCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TrasnscriptStructureCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TrasnscriptStructure.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrasnscriptStructureUpsert) {
//			SetTranscriptId(v+v).
//		}).
//		Exec(ctx)
func (tscb *TrasnscriptStructureCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrasnscriptStructureUpsertBulk {
	tscb.conflict = opts
	return &TrasnscriptStructureUpsertBulk{
		create: tscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TrasnscriptStructure.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tscb *TrasnscriptStructureCreateBulk) OnConflictColumns(columns ...string) *TrasnscriptStructureUpsertBulk {
	tscb.conflict = append(tscb.conflict, sql.ConflictColumns(columns...))
	return &TrasnscriptStructureUpsertBulk{
		create: tscb,
	}
}

// TrasnscriptStructureUpsertBulk is the builder for "upsert"-ing
// a bulk of TrasnscriptStructure nodes.
type TrasnscriptStructureUpsertBulk struct {
	create *TrasnscriptStructureCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TrasnscriptStructure.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TrasnscriptStructureUpsertBulk) UpdateNewValues() *TrasnscriptStructureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TrasnscriptStructure.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrasnscriptStructureUpsertBulk) Ignore() *TrasnscriptStructureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrasnscriptStructureUpsertBulk) DoNothing() *TrasnscriptStructureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrasnscriptStructureCreateBulk.OnConflict
// documentation for more info.
func (u *TrasnscriptStructureUpsertBulk) Update(set func(*TrasnscriptStructureUpsert)) *TrasnscriptStructureUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrasnscriptStructureUpsert{UpdateSet: update})
	}))
	return u
}

// SetTranscriptId sets the "transcriptId" field.
func (u *TrasnscriptStructureUpsertBulk) SetTranscriptId(v string) *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetTranscriptId(v)
	})
}

// UpdateTranscriptId sets the "transcriptId" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertBulk) UpdateTranscriptId() *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateTranscriptId()
	})
}

// SetFeature sets the "feature" field.
func (u *TrasnscriptStructureUpsertBulk) SetFeature(v string) *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetFeature(v)
	})
}

// UpdateFeature sets the "feature" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertBulk) UpdateFeature() *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateFeature()
	})
}

// SetSeqname sets the "seqname" field.
func (u *TrasnscriptStructureUpsertBulk) SetSeqname(v string) *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertBulk) UpdateSeqname() *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateSeqname()
	})
}

// SetStart sets the "start" field.
func (u *TrasnscriptStructureUpsertBulk) SetStart(v int32) *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *TrasnscriptStructureUpsertBulk) AddStart(v int32) *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertBulk) UpdateStart() *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *TrasnscriptStructureUpsertBulk) SetEnd(v int32) *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *TrasnscriptStructureUpsertBulk) AddEnd(v int32) *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertBulk) UpdateEnd() *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateEnd()
	})
}

// SetStrand sets the "strand" field.
func (u *TrasnscriptStructureUpsertBulk) SetStrand(v string) *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *TrasnscriptStructureUpsertBulk) UpdateStrand() *TrasnscriptStructureUpsertBulk {
	return u.Update(func(s *TrasnscriptStructureUpsert) {
		s.UpdateStrand()
	})
}

// Exec executes the query.
func (u *TrasnscriptStructureUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrasnscriptStructureCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrasnscriptStructureCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrasnscriptStructureUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
