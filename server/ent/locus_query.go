// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"genomedb/ent/genome"
	"genomedb/ent/locus"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocusQuery is the builder for querying Locus entities.
type LocusQuery struct {
	config
	limit           *int
	offset          *int
	unique          *bool
	order           []OrderFunc
	fields          []string
	predicates      []predicate.Locus
	withTranscripts *TranscriptQuery
	withGenome      *GenomeQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LocusQuery builder.
func (lq *LocusQuery) Where(ps ...predicate.Locus) *LocusQuery {
	lq.predicates = append(lq.predicates, ps...)
	return lq
}

// Limit adds a limit step to the query.
func (lq *LocusQuery) Limit(limit int) *LocusQuery {
	lq.limit = &limit
	return lq
}

// Offset adds an offset step to the query.
func (lq *LocusQuery) Offset(offset int) *LocusQuery {
	lq.offset = &offset
	return lq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lq *LocusQuery) Unique(unique bool) *LocusQuery {
	lq.unique = &unique
	return lq
}

// Order adds an order step to the query.
func (lq *LocusQuery) Order(o ...OrderFunc) *LocusQuery {
	lq.order = append(lq.order, o...)
	return lq
}

// QueryTranscripts chains the current query on the "transcripts" edge.
func (lq *LocusQuery) QueryTranscripts() *TranscriptQuery {
	query := &TranscriptQuery{config: lq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(locus.Table, locus.FieldID, selector),
			sqlgraph.To(transcript.Table, transcript.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, locus.TranscriptsTable, locus.TranscriptsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGenome chains the current query on the "genome" edge.
func (lq *LocusQuery) QueryGenome() *GenomeQuery {
	query := &GenomeQuery{config: lq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(locus.Table, locus.FieldID, selector),
			sqlgraph.To(genome.Table, genome.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, locus.GenomeTable, locus.GenomeColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Locus entity from the query.
// Returns a *NotFoundError when no Locus was found.
func (lq *LocusQuery) First(ctx context.Context) (*Locus, error) {
	nodes, err := lq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{locus.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lq *LocusQuery) FirstX(ctx context.Context) *Locus {
	node, err := lq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Locus ID from the query.
// Returns a *NotFoundError when no Locus ID was found.
func (lq *LocusQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = lq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{locus.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lq *LocusQuery) FirstIDX(ctx context.Context) string {
	id, err := lq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Locus entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Locus entity is found.
// Returns a *NotFoundError when no Locus entities are found.
func (lq *LocusQuery) Only(ctx context.Context) (*Locus, error) {
	nodes, err := lq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{locus.Label}
	default:
		return nil, &NotSingularError{locus.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lq *LocusQuery) OnlyX(ctx context.Context) *Locus {
	node, err := lq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Locus ID in the query.
// Returns a *NotSingularError when more than one Locus ID is found.
// Returns a *NotFoundError when no entities are found.
func (lq *LocusQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = lq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{locus.Label}
	default:
		err = &NotSingularError{locus.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lq *LocusQuery) OnlyIDX(ctx context.Context) string {
	id, err := lq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LocusSlice.
func (lq *LocusQuery) All(ctx context.Context) ([]*Locus, error) {
	if err := lq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return lq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (lq *LocusQuery) AllX(ctx context.Context) []*Locus {
	nodes, err := lq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Locus IDs.
func (lq *LocusQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := lq.Select(locus.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lq *LocusQuery) IDsX(ctx context.Context) []string {
	ids, err := lq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lq *LocusQuery) Count(ctx context.Context) (int, error) {
	if err := lq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return lq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (lq *LocusQuery) CountX(ctx context.Context) int {
	count, err := lq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lq *LocusQuery) Exist(ctx context.Context) (bool, error) {
	if err := lq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return lq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (lq *LocusQuery) ExistX(ctx context.Context) bool {
	exist, err := lq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LocusQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lq *LocusQuery) Clone() *LocusQuery {
	if lq == nil {
		return nil
	}
	return &LocusQuery{
		config:          lq.config,
		limit:           lq.limit,
		offset:          lq.offset,
		order:           append([]OrderFunc{}, lq.order...),
		predicates:      append([]predicate.Locus{}, lq.predicates...),
		withTranscripts: lq.withTranscripts.Clone(),
		withGenome:      lq.withGenome.Clone(),
		// clone intermediate query.
		sql:    lq.sql.Clone(),
		path:   lq.path,
		unique: lq.unique,
	}
}

// WithTranscripts tells the query-builder to eager-load the nodes that are connected to
// the "transcripts" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocusQuery) WithTranscripts(opts ...func(*TranscriptQuery)) *LocusQuery {
	query := &TranscriptQuery{config: lq.config}
	for _, opt := range opts {
		opt(query)
	}
	lq.withTranscripts = query
	return lq
}

// WithGenome tells the query-builder to eager-load the nodes that are connected to
// the "genome" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocusQuery) WithGenome(opts ...func(*GenomeQuery)) *LocusQuery {
	query := &GenomeQuery{config: lq.config}
	for _, opt := range opts {
		opt(query)
	}
	lq.withGenome = query
	return lq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (lq *LocusQuery) GroupBy(field string, fields ...string) *LocusGroupBy {
	grbuild := &LocusGroupBy{config: lq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return lq.sqlQuery(ctx), nil
	}
	grbuild.label = locus.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (lq *LocusQuery) Select(fields ...string) *LocusSelect {
	lq.fields = append(lq.fields, fields...)
	selbuild := &LocusSelect{LocusQuery: lq}
	selbuild.label = locus.Label
	selbuild.flds, selbuild.scan = &lq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a LocusSelect configured with the given aggregations.
func (lq *LocusQuery) Aggregate(fns ...AggregateFunc) *LocusSelect {
	return lq.Select().Aggregate(fns...)
}

func (lq *LocusQuery) prepareQuery(ctx context.Context) error {
	for _, f := range lq.fields {
		if !locus.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lq.path != nil {
		prev, err := lq.path(ctx)
		if err != nil {
			return err
		}
		lq.sql = prev
	}
	return nil
}

func (lq *LocusQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Locus, error) {
	var (
		nodes       = []*Locus{}
		withFKs     = lq.withFKs
		_spec       = lq.querySpec()
		loadedTypes = [2]bool{
			lq.withTranscripts != nil,
			lq.withGenome != nil,
		}
	)
	if lq.withGenome != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, locus.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Locus).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Locus{config: lq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lq.withTranscripts; query != nil {
		if err := lq.loadTranscripts(ctx, query, nodes,
			func(n *Locus) { n.Edges.Transcripts = []*Transcript{} },
			func(n *Locus, e *Transcript) { n.Edges.Transcripts = append(n.Edges.Transcripts, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withGenome; query != nil {
		if err := lq.loadGenome(ctx, query, nodes, nil,
			func(n *Locus, e *Genome) { n.Edges.Genome = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lq *LocusQuery) loadTranscripts(ctx context.Context, query *TranscriptQuery, nodes []*Locus, init func(*Locus), assign func(*Locus, *Transcript)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Locus)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.InValues(locus.TranscriptsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.locus_transcripts
		if fk == nil {
			return fmt.Errorf(`foreign-key "locus_transcripts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locus_transcripts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocusQuery) loadGenome(ctx context.Context, query *GenomeQuery, nodes []*Locus, init func(*Locus), assign func(*Locus, *Genome)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Locus)
	for i := range nodes {
		if nodes[i].genome_locuses == nil {
			continue
		}
		fk := *nodes[i].genome_locuses
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(genome.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "genome_locuses" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lq *LocusQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lq.querySpec()
	_spec.Node.Columns = lq.fields
	if len(lq.fields) > 0 {
		_spec.Unique = lq.unique != nil && *lq.unique
	}
	return sqlgraph.CountNodes(ctx, lq.driver, _spec)
}

func (lq *LocusQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := lq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (lq *LocusQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   locus.Table,
			Columns: locus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: locus.FieldID,
			},
		},
		From:   lq.sql,
		Unique: true,
	}
	if unique := lq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := lq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, locus.FieldID)
		for i := range fields {
			if fields[i] != locus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lq *LocusQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lq.driver.Dialect())
	t1 := builder.Table(locus.Table)
	columns := lq.fields
	if len(columns) == 0 {
		columns = locus.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lq.sql != nil {
		selector = lq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lq.unique != nil && *lq.unique {
		selector.Distinct()
	}
	for _, p := range lq.predicates {
		p(selector)
	}
	for _, p := range lq.order {
		p(selector)
	}
	if offset := lq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LocusGroupBy is the group-by builder for Locus entities.
type LocusGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lgb *LocusGroupBy) Aggregate(fns ...AggregateFunc) *LocusGroupBy {
	lgb.fns = append(lgb.fns, fns...)
	return lgb
}

// Scan applies the group-by query and scans the result into the given value.
func (lgb *LocusGroupBy) Scan(ctx context.Context, v any) error {
	query, err := lgb.path(ctx)
	if err != nil {
		return err
	}
	lgb.sql = query
	return lgb.sqlScan(ctx, v)
}

func (lgb *LocusGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range lgb.fields {
		if !locus.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := lgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (lgb *LocusGroupBy) sqlQuery() *sql.Selector {
	selector := lgb.sql.Select()
	aggregation := make([]string, 0, len(lgb.fns))
	for _, fn := range lgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(lgb.fields)+len(lgb.fns))
		for _, f := range lgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(lgb.fields...)...)
}

// LocusSelect is the builder for selecting fields of Locus entities.
type LocusSelect struct {
	*LocusQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ls *LocusSelect) Aggregate(fns ...AggregateFunc) *LocusSelect {
	ls.fns = append(ls.fns, fns...)
	return ls
}

// Scan applies the selector query and scans the result into the given value.
func (ls *LocusSelect) Scan(ctx context.Context, v any) error {
	if err := ls.prepareQuery(ctx); err != nil {
		return err
	}
	ls.sql = ls.LocusQuery.sqlQuery(ctx)
	return ls.sqlScan(ctx, v)
}

func (ls *LocusSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ls.fns))
	for _, fn := range ls.fns {
		aggregation = append(aggregation, fn(ls.sql))
	}
	switch n := len(*ls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ls.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ls.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ls.sql.Query()
	if err := ls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
