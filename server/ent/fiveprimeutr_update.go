// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/fiveprimeutr"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FivePrimeUtrUpdate is the builder for updating FivePrimeUtr entities.
type FivePrimeUtrUpdate struct {
	config
	hooks    []Hook
	mutation *FivePrimeUtrMutation
}

// Where appends a list predicates to the FivePrimeUtrUpdate builder.
func (fpuu *FivePrimeUtrUpdate) Where(ps ...predicate.FivePrimeUtr) *FivePrimeUtrUpdate {
	fpuu.mutation.Where(ps...)
	return fpuu
}

// SetSeqname sets the "seqname" field.
func (fpuu *FivePrimeUtrUpdate) SetSeqname(s string) *FivePrimeUtrUpdate {
	fpuu.mutation.SetSeqname(s)
	return fpuu
}

// SetStart sets the "start" field.
func (fpuu *FivePrimeUtrUpdate) SetStart(i int32) *FivePrimeUtrUpdate {
	fpuu.mutation.ResetStart()
	fpuu.mutation.SetStart(i)
	return fpuu
}

// AddStart adds i to the "start" field.
func (fpuu *FivePrimeUtrUpdate) AddStart(i int32) *FivePrimeUtrUpdate {
	fpuu.mutation.AddStart(i)
	return fpuu
}

// SetEnd sets the "end" field.
func (fpuu *FivePrimeUtrUpdate) SetEnd(i int32) *FivePrimeUtrUpdate {
	fpuu.mutation.ResetEnd()
	fpuu.mutation.SetEnd(i)
	return fpuu
}

// AddEnd adds i to the "end" field.
func (fpuu *FivePrimeUtrUpdate) AddEnd(i int32) *FivePrimeUtrUpdate {
	fpuu.mutation.AddEnd(i)
	return fpuu
}

// SetStrand sets the "strand" field.
func (fpuu *FivePrimeUtrUpdate) SetStrand(s string) *FivePrimeUtrUpdate {
	fpuu.mutation.SetStrand(s)
	return fpuu
}

// SetTranscriptID sets the "transcript" edge to the Transcript entity by ID.
func (fpuu *FivePrimeUtrUpdate) SetTranscriptID(id string) *FivePrimeUtrUpdate {
	fpuu.mutation.SetTranscriptID(id)
	return fpuu
}

// SetNillableTranscriptID sets the "transcript" edge to the Transcript entity by ID if the given value is not nil.
func (fpuu *FivePrimeUtrUpdate) SetNillableTranscriptID(id *string) *FivePrimeUtrUpdate {
	if id != nil {
		fpuu = fpuu.SetTranscriptID(*id)
	}
	return fpuu
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (fpuu *FivePrimeUtrUpdate) SetTranscript(t *Transcript) *FivePrimeUtrUpdate {
	return fpuu.SetTranscriptID(t.ID)
}

// Mutation returns the FivePrimeUtrMutation object of the builder.
func (fpuu *FivePrimeUtrUpdate) Mutation() *FivePrimeUtrMutation {
	return fpuu.mutation
}

// ClearTranscript clears the "transcript" edge to the Transcript entity.
func (fpuu *FivePrimeUtrUpdate) ClearTranscript() *FivePrimeUtrUpdate {
	fpuu.mutation.ClearTranscript()
	return fpuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fpuu *FivePrimeUtrUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fpuu.hooks) == 0 {
		if err = fpuu.check(); err != nil {
			return 0, err
		}
		affected, err = fpuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FivePrimeUtrMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fpuu.check(); err != nil {
				return 0, err
			}
			fpuu.mutation = mutation
			affected, err = fpuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fpuu.hooks) - 1; i >= 0; i-- {
			if fpuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fpuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fpuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fpuu *FivePrimeUtrUpdate) SaveX(ctx context.Context) int {
	affected, err := fpuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fpuu *FivePrimeUtrUpdate) Exec(ctx context.Context) error {
	_, err := fpuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpuu *FivePrimeUtrUpdate) ExecX(ctx context.Context) {
	if err := fpuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpuu *FivePrimeUtrUpdate) check() error {
	if v, ok := fpuu.mutation.Start(); ok {
		if err := fiveprimeutr.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "FivePrimeUtr.start": %w`, err)}
		}
	}
	if v, ok := fpuu.mutation.End(); ok {
		if err := fiveprimeutr.EndValidator(v); err != nil {
			return &ValidationError{Name: "end", err: fmt.Errorf(`ent: validator failed for field "FivePrimeUtr.end": %w`, err)}
		}
	}
	return nil
}

func (fpuu *FivePrimeUtrUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fiveprimeutr.Table,
			Columns: fiveprimeutr.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fiveprimeutr.FieldID,
			},
		},
	}
	if ps := fpuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fpuu.mutation.Seqname(); ok {
		_spec.SetField(fiveprimeutr.FieldSeqname, field.TypeString, value)
	}
	if value, ok := fpuu.mutation.Start(); ok {
		_spec.SetField(fiveprimeutr.FieldStart, field.TypeInt32, value)
	}
	if value, ok := fpuu.mutation.AddedStart(); ok {
		_spec.AddField(fiveprimeutr.FieldStart, field.TypeInt32, value)
	}
	if value, ok := fpuu.mutation.End(); ok {
		_spec.SetField(fiveprimeutr.FieldEnd, field.TypeInt32, value)
	}
	if value, ok := fpuu.mutation.AddedEnd(); ok {
		_spec.AddField(fiveprimeutr.FieldEnd, field.TypeInt32, value)
	}
	if value, ok := fpuu.mutation.Strand(); ok {
		_spec.SetField(fiveprimeutr.FieldStrand, field.TypeString, value)
	}
	if fpuu.mutation.TranscriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fiveprimeutr.TranscriptTable,
			Columns: []string{fiveprimeutr.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fpuu.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fiveprimeutr.TranscriptTable,
			Columns: []string{fiveprimeutr.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fpuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiveprimeutr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FivePrimeUtrUpdateOne is the builder for updating a single FivePrimeUtr entity.
type FivePrimeUtrUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FivePrimeUtrMutation
}

// SetSeqname sets the "seqname" field.
func (fpuuo *FivePrimeUtrUpdateOne) SetSeqname(s string) *FivePrimeUtrUpdateOne {
	fpuuo.mutation.SetSeqname(s)
	return fpuuo
}

// SetStart sets the "start" field.
func (fpuuo *FivePrimeUtrUpdateOne) SetStart(i int32) *FivePrimeUtrUpdateOne {
	fpuuo.mutation.ResetStart()
	fpuuo.mutation.SetStart(i)
	return fpuuo
}

// AddStart adds i to the "start" field.
func (fpuuo *FivePrimeUtrUpdateOne) AddStart(i int32) *FivePrimeUtrUpdateOne {
	fpuuo.mutation.AddStart(i)
	return fpuuo
}

// SetEnd sets the "end" field.
func (fpuuo *FivePrimeUtrUpdateOne) SetEnd(i int32) *FivePrimeUtrUpdateOne {
	fpuuo.mutation.ResetEnd()
	fpuuo.mutation.SetEnd(i)
	return fpuuo
}

// AddEnd adds i to the "end" field.
func (fpuuo *FivePrimeUtrUpdateOne) AddEnd(i int32) *FivePrimeUtrUpdateOne {
	fpuuo.mutation.AddEnd(i)
	return fpuuo
}

// SetStrand sets the "strand" field.
func (fpuuo *FivePrimeUtrUpdateOne) SetStrand(s string) *FivePrimeUtrUpdateOne {
	fpuuo.mutation.SetStrand(s)
	return fpuuo
}

// SetTranscriptID sets the "transcript" edge to the Transcript entity by ID.
func (fpuuo *FivePrimeUtrUpdateOne) SetTranscriptID(id string) *FivePrimeUtrUpdateOne {
	fpuuo.mutation.SetTranscriptID(id)
	return fpuuo
}

// SetNillableTranscriptID sets the "transcript" edge to the Transcript entity by ID if the given value is not nil.
func (fpuuo *FivePrimeUtrUpdateOne) SetNillableTranscriptID(id *string) *FivePrimeUtrUpdateOne {
	if id != nil {
		fpuuo = fpuuo.SetTranscriptID(*id)
	}
	return fpuuo
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (fpuuo *FivePrimeUtrUpdateOne) SetTranscript(t *Transcript) *FivePrimeUtrUpdateOne {
	return fpuuo.SetTranscriptID(t.ID)
}

// Mutation returns the FivePrimeUtrMutation object of the builder.
func (fpuuo *FivePrimeUtrUpdateOne) Mutation() *FivePrimeUtrMutation {
	return fpuuo.mutation
}

// ClearTranscript clears the "transcript" edge to the Transcript entity.
func (fpuuo *FivePrimeUtrUpdateOne) ClearTranscript() *FivePrimeUtrUpdateOne {
	fpuuo.mutation.ClearTranscript()
	return fpuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fpuuo *FivePrimeUtrUpdateOne) Select(field string, fields ...string) *FivePrimeUtrUpdateOne {
	fpuuo.fields = append([]string{field}, fields...)
	return fpuuo
}

// Save executes the query and returns the updated FivePrimeUtr entity.
func (fpuuo *FivePrimeUtrUpdateOne) Save(ctx context.Context) (*FivePrimeUtr, error) {
	var (
		err  error
		node *FivePrimeUtr
	)
	if len(fpuuo.hooks) == 0 {
		if err = fpuuo.check(); err != nil {
			return nil, err
		}
		node, err = fpuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FivePrimeUtrMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fpuuo.check(); err != nil {
				return nil, err
			}
			fpuuo.mutation = mutation
			node, err = fpuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fpuuo.hooks) - 1; i >= 0; i-- {
			if fpuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fpuuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fpuuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FivePrimeUtr)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FivePrimeUtrMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fpuuo *FivePrimeUtrUpdateOne) SaveX(ctx context.Context) *FivePrimeUtr {
	node, err := fpuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fpuuo *FivePrimeUtrUpdateOne) Exec(ctx context.Context) error {
	_, err := fpuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpuuo *FivePrimeUtrUpdateOne) ExecX(ctx context.Context) {
	if err := fpuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpuuo *FivePrimeUtrUpdateOne) check() error {
	if v, ok := fpuuo.mutation.Start(); ok {
		if err := fiveprimeutr.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "FivePrimeUtr.start": %w`, err)}
		}
	}
	if v, ok := fpuuo.mutation.End(); ok {
		if err := fiveprimeutr.EndValidator(v); err != nil {
			return &ValidationError{Name: "end", err: fmt.Errorf(`ent: validator failed for field "FivePrimeUtr.end": %w`, err)}
		}
	}
	return nil
}

func (fpuuo *FivePrimeUtrUpdateOne) sqlSave(ctx context.Context) (_node *FivePrimeUtr, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fiveprimeutr.Table,
			Columns: fiveprimeutr.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fiveprimeutr.FieldID,
			},
		},
	}
	id, ok := fpuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FivePrimeUtr.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fpuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fiveprimeutr.FieldID)
		for _, f := range fields {
			if !fiveprimeutr.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fiveprimeutr.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fpuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fpuuo.mutation.Seqname(); ok {
		_spec.SetField(fiveprimeutr.FieldSeqname, field.TypeString, value)
	}
	if value, ok := fpuuo.mutation.Start(); ok {
		_spec.SetField(fiveprimeutr.FieldStart, field.TypeInt32, value)
	}
	if value, ok := fpuuo.mutation.AddedStart(); ok {
		_spec.AddField(fiveprimeutr.FieldStart, field.TypeInt32, value)
	}
	if value, ok := fpuuo.mutation.End(); ok {
		_spec.SetField(fiveprimeutr.FieldEnd, field.TypeInt32, value)
	}
	if value, ok := fpuuo.mutation.AddedEnd(); ok {
		_spec.AddField(fiveprimeutr.FieldEnd, field.TypeInt32, value)
	}
	if value, ok := fpuuo.mutation.Strand(); ok {
		_spec.SetField(fiveprimeutr.FieldStrand, field.TypeString, value)
	}
	if fpuuo.mutation.TranscriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fiveprimeutr.TranscriptTable,
			Columns: []string{fiveprimeutr.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fpuuo.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fiveprimeutr.TranscriptTable,
			Columns: []string{fiveprimeutr.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FivePrimeUtr{config: fpuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fpuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fiveprimeutr.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
