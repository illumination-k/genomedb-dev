// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/genome"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Genome is the model entity for the Genome schema.
type Genome struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CodonTable holds the value of the "codon_table" field.
	CodonTable int32 `json:"codon_table,omitempty"`
	// Seq holds the value of the "seq" field.
	Seq string `json:"seq,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Genome) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case genome.FieldID, genome.FieldCodonTable:
			values[i] = new(sql.NullInt64)
		case genome.FieldName, genome.FieldSeq:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Genome", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Genome fields.
func (ge *Genome) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case genome.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ge.ID = int(value.Int64)
		case genome.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ge.Name = value.String
			}
		case genome.FieldCodonTable:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field codon_table", values[i])
			} else if value.Valid {
				ge.CodonTable = int32(value.Int64)
			}
		case genome.FieldSeq:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				ge.Seq = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Genome.
// Note that you need to call Genome.Unwrap() before calling this method if this Genome
// was returned from a transaction, and the transaction was committed or rolled back.
func (ge *Genome) Update() *GenomeUpdateOne {
	return (&GenomeClient{config: ge.config}).UpdateOne(ge)
}

// Unwrap unwraps the Genome entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ge *Genome) Unwrap() *Genome {
	_tx, ok := ge.config.driver.(*txDriver)
	if !ok {
		panic("ent: Genome is not a transactional entity")
	}
	ge.config.driver = _tx.drv
	return ge
}

// String implements the fmt.Stringer.
func (ge *Genome) String() string {
	var builder strings.Builder
	builder.WriteString("Genome(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ge.ID))
	builder.WriteString("name=")
	builder.WriteString(ge.Name)
	builder.WriteString(", ")
	builder.WriteString("codon_table=")
	builder.WriteString(fmt.Sprintf("%v", ge.CodonTable))
	builder.WriteString(", ")
	builder.WriteString("seq=")
	builder.WriteString(ge.Seq)
	builder.WriteByte(')')
	return builder.String()
}

// Genomes is a parsable slice of Genome.
type Genomes []*Genome

func (ge Genomes) config(cfg config) {
	for _i := range ge {
		ge[_i].config = cfg
	}
}
