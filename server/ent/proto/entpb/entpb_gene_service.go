// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "genomedb/ent"
	gene "genomedb/ent/gene"
	genome "genomedb/ent/genome"
	transcript "genomedb/ent/transcript"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// GeneService implements GeneServiceServer
type GeneService struct {
	client *ent.Client
	UnimplementedGeneServiceServer
}

// NewGeneService returns a new GeneService
func NewGeneService(client *ent.Client) *GeneService {
	return &GeneService{
		client: client,
	}
}

// toProtoGene transforms the ent type to the pb type
func toProtoGene(e *ent.Gene) (*Gene, error) {
	v := &Gene{}
	id := e.ID
	v.Id = id
	if edg := e.Edges.Genome; edg != nil {
		id := edg.ID
		v.Genome = &Genome{
			Id: id,
		}
	}
	for _, edg := range e.Edges.Transcripts {
		id := edg.ID
		v.Transcripts = append(v.Transcripts, &Transcript{
			Id: id,
		})
	}
	return v, nil
}

// toProtoGeneList transforms a list of ent type to a list of pb type
func toProtoGeneList(e []*ent.Gene) ([]*Gene, error) {
	var pbList []*Gene
	for _, entEntity := range e {
		pbEntity, err := toProtoGene(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements GeneServiceServer.Create
func (svc *GeneService) Create(ctx context.Context, req *CreateGeneRequest) (*Gene, error) {
	gene := req.GetGene()
	m, err := svc.createBuilder(gene)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGene(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements GeneServiceServer.Get
func (svc *GeneService) Get(ctx context.Context, req *GetGeneRequest) (*Gene, error) {
	var (
		err error
		get *ent.Gene
	)
	id := req.GetId()
	switch req.GetView() {
	case GetGeneRequest_VIEW_UNSPECIFIED, GetGeneRequest_BASIC:
		get, err = svc.client.Gene.Get(ctx, id)
	case GetGeneRequest_WITH_EDGE_IDS:
		get, err = svc.client.Gene.Query().
			Where(gene.ID(id)).
			WithGenome(func(query *ent.GenomeQuery) {
				query.Select(genome.FieldID)
			}).
			WithTranscripts(func(query *ent.TranscriptQuery) {
				query.Select(transcript.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoGene(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements GeneServiceServer.Update
func (svc *GeneService) Update(ctx context.Context, req *UpdateGeneRequest) (*Gene, error) {
	gene := req.GetGene()
	geneID := gene.GetId()
	m := svc.client.Gene.UpdateOneID(geneID)
	if gene.GetGenome() != nil {
		geneGenome := gene.GetGenome().GetId()
		m.SetGenomeID(geneGenome)
	}
	for _, item := range gene.GetTranscripts() {
		transcripts := item.GetId()
		m.AddTranscriptIDs(transcripts)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGene(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements GeneServiceServer.Delete
func (svc *GeneService) Delete(ctx context.Context, req *DeleteGeneRequest) (*empty.Empty, error) {
	var err error
	id := req.GetId()
	err = svc.client.Gene.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements GeneServiceServer.List
func (svc *GeneService) List(ctx context.Context, req *ListGeneRequest) (*ListGeneResponse, error) {
	var (
		err      error
		entList  []*ent.Gene
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Gene.Query().
		Order(ent.Desc(gene.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := string(bytes)
		listQuery = listQuery.
			Where(gene.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListGeneRequest_VIEW_UNSPECIFIED, ListGeneRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListGeneRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithGenome(func(query *ent.GenomeQuery) {
				query.Select(genome.FieldID)
			}).
			WithTranscripts(func(query *ent.TranscriptQuery) {
				query.Select(transcript.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoGeneList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListGeneResponse{
			GeneList:      protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements GeneServiceServer.BatchCreate
func (svc *GeneService) BatchCreate(ctx context.Context, req *BatchCreateGenesRequest) (*BatchCreateGenesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.GeneCreate, len(requests))
	for i, req := range requests {
		gene := req.GetGene()
		var err error
		bulk[i], err = svc.createBuilder(gene)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Gene.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoGeneList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateGenesResponse{
			Genes: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *GeneService) createBuilder(gene *Gene) (*ent.GeneCreate, error) {
	m := svc.client.Gene.Create()
	if gene.GetGenome() != nil {
		geneGenome := gene.GetGenome().GetId()
		m.SetGenomeID(geneGenome)
	}
	for _, item := range gene.GetTranscripts() {
		transcripts := item.GetId()
		m.AddTranscriptIDs(transcripts)
	}
	return m, nil
}
