// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "genomedb/ent"
	gene "genomedb/ent/gene"
	genome "genomedb/ent/genome"
	scaffold "genomedb/ent/scaffold"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// GenomeService implements GenomeServiceServer
type GenomeService struct {
	client *ent.Client
	UnimplementedGenomeServiceServer
}

// NewGenomeService returns a new GenomeService
func NewGenomeService(client *ent.Client) *GenomeService {
	return &GenomeService{
		client: client,
	}
}

// toProtoGenome transforms the ent type to the pb type
func toProtoGenome(e *ent.Genome) (*Genome, error) {
	v := &Genome{}
	codon_table := e.CodonTable
	v.CodonTable = codon_table
	id := e.ID
	v.Id = id
	for _, edg := range e.Edges.Genes {
		id := edg.ID
		v.Genes = append(v.Genes, &Gene{
			Id: id,
		})
	}
	for _, edg := range e.Edges.Scaffolds {
		id := int64(edg.ID)
		v.Scaffolds = append(v.Scaffolds, &Scaffold{
			Id: id,
		})
	}
	return v, nil
}

// toProtoGenomeList transforms a list of ent type to a list of pb type
func toProtoGenomeList(e []*ent.Genome) ([]*Genome, error) {
	var pbList []*Genome
	for _, entEntity := range e {
		pbEntity, err := toProtoGenome(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements GenomeServiceServer.Create
func (svc *GenomeService) Create(ctx context.Context, req *CreateGenomeRequest) (*Genome, error) {
	genome := req.GetGenome()
	m, err := svc.createBuilder(genome)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGenome(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements GenomeServiceServer.Get
func (svc *GenomeService) Get(ctx context.Context, req *GetGenomeRequest) (*Genome, error) {
	var (
		err error
		get *ent.Genome
	)
	id := req.GetId()
	switch req.GetView() {
	case GetGenomeRequest_VIEW_UNSPECIFIED, GetGenomeRequest_BASIC:
		get, err = svc.client.Genome.Get(ctx, id)
	case GetGenomeRequest_WITH_EDGE_IDS:
		get, err = svc.client.Genome.Query().
			Where(genome.ID(id)).
			WithGenes(func(query *ent.GeneQuery) {
				query.Select(gene.FieldID)
			}).
			WithScaffolds(func(query *ent.ScaffoldQuery) {
				query.Select(scaffold.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoGenome(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements GenomeServiceServer.Update
func (svc *GenomeService) Update(ctx context.Context, req *UpdateGenomeRequest) (*Genome, error) {
	genome := req.GetGenome()
	genomeID := genome.GetId()
	m := svc.client.Genome.UpdateOneID(genomeID)
	genomeCodonTable := int32(genome.GetCodonTable())
	m.SetCodonTable(genomeCodonTable)
	for _, item := range genome.GetGenes() {
		genes := item.GetId()
		m.AddGeneIDs(genes)
	}
	for _, item := range genome.GetScaffolds() {
		scaffolds := int(item.GetId())
		m.AddScaffoldIDs(scaffolds)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGenome(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements GenomeServiceServer.Delete
func (svc *GenomeService) Delete(ctx context.Context, req *DeleteGenomeRequest) (*empty.Empty, error) {
	var err error
	id := req.GetId()
	err = svc.client.Genome.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements GenomeServiceServer.List
func (svc *GenomeService) List(ctx context.Context, req *ListGenomeRequest) (*ListGenomeResponse, error) {
	var (
		err      error
		entList  []*ent.Genome
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Genome.Query().
		Order(ent.Desc(genome.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := string(bytes)
		listQuery = listQuery.
			Where(genome.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListGenomeRequest_VIEW_UNSPECIFIED, ListGenomeRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListGenomeRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithGenes(func(query *ent.GeneQuery) {
				query.Select(gene.FieldID)
			}).
			WithScaffolds(func(query *ent.ScaffoldQuery) {
				query.Select(scaffold.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoGenomeList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListGenomeResponse{
			GenomeList:    protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements GenomeServiceServer.BatchCreate
func (svc *GenomeService) BatchCreate(ctx context.Context, req *BatchCreateGenomesRequest) (*BatchCreateGenomesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.GenomeCreate, len(requests))
	for i, req := range requests {
		genome := req.GetGenome()
		var err error
		bulk[i], err = svc.createBuilder(genome)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Genome.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoGenomeList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateGenomesResponse{
			Genomes: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *GenomeService) createBuilder(genome *Genome) (*ent.GenomeCreate, error) {
	m := svc.client.Genome.Create()
	genomeCodonTable := int32(genome.GetCodonTable())
	m.SetCodonTable(genomeCodonTable)
	for _, item := range genome.GetGenes() {
		genes := item.GetId()
		m.AddGeneIDs(genes)
	}
	for _, item := range genome.GetScaffolds() {
		scaffolds := int(item.GetId())
		m.AddScaffoldIDs(scaffolds)
	}
	return m, nil
}
