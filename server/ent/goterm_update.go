// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/goterm"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GoTermUpdate is the builder for updating GoTerm entities.
type GoTermUpdate struct {
	config
	hooks    []Hook
	mutation *GoTermMutation
}

// Where appends a list predicates to the GoTermUpdate builder.
func (gtu *GoTermUpdate) Where(ps ...predicate.GoTerm) *GoTermUpdate {
	gtu.mutation.Where(ps...)
	return gtu
}

// SetNamespace sets the "namespace" field.
func (gtu *GoTermUpdate) SetNamespace(_go goterm.Namespace) *GoTermUpdate {
	gtu.mutation.SetNamespace(_go)
	return gtu
}

// SetName sets the "name" field.
func (gtu *GoTermUpdate) SetName(s string) *GoTermUpdate {
	gtu.mutation.SetName(s)
	return gtu
}

// SetLevel sets the "level" field.
func (gtu *GoTermUpdate) SetLevel(i int32) *GoTermUpdate {
	gtu.mutation.ResetLevel()
	gtu.mutation.SetLevel(i)
	return gtu
}

// AddLevel adds i to the "level" field.
func (gtu *GoTermUpdate) AddLevel(i int32) *GoTermUpdate {
	gtu.mutation.AddLevel(i)
	return gtu
}

// SetDepth sets the "depth" field.
func (gtu *GoTermUpdate) SetDepth(i int32) *GoTermUpdate {
	gtu.mutation.ResetDepth()
	gtu.mutation.SetDepth(i)
	return gtu
}

// AddDepth adds i to the "depth" field.
func (gtu *GoTermUpdate) AddDepth(i int32) *GoTermUpdate {
	gtu.mutation.AddDepth(i)
	return gtu
}

// SetParentID sets the "parent" edge to the GoTerm entity by ID.
func (gtu *GoTermUpdate) SetParentID(id string) *GoTermUpdate {
	gtu.mutation.SetParentID(id)
	return gtu
}

// SetNillableParentID sets the "parent" edge to the GoTerm entity by ID if the given value is not nil.
func (gtu *GoTermUpdate) SetNillableParentID(id *string) *GoTermUpdate {
	if id != nil {
		gtu = gtu.SetParentID(*id)
	}
	return gtu
}

// SetParent sets the "parent" edge to the GoTerm entity.
func (gtu *GoTermUpdate) SetParent(g *GoTerm) *GoTermUpdate {
	return gtu.SetParentID(g.ID)
}

// AddChildIDs adds the "children" edge to the GoTerm entity by IDs.
func (gtu *GoTermUpdate) AddChildIDs(ids ...string) *GoTermUpdate {
	gtu.mutation.AddChildIDs(ids...)
	return gtu
}

// AddChildren adds the "children" edges to the GoTerm entity.
func (gtu *GoTermUpdate) AddChildren(g ...*GoTerm) *GoTermUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtu.AddChildIDs(ids...)
}

// AddTranscriptIDs adds the "transcripts" edge to the Transcript entity by IDs.
func (gtu *GoTermUpdate) AddTranscriptIDs(ids ...string) *GoTermUpdate {
	gtu.mutation.AddTranscriptIDs(ids...)
	return gtu
}

// AddTranscripts adds the "transcripts" edges to the Transcript entity.
func (gtu *GoTermUpdate) AddTranscripts(t ...*Transcript) *GoTermUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gtu.AddTranscriptIDs(ids...)
}

// Mutation returns the GoTermMutation object of the builder.
func (gtu *GoTermUpdate) Mutation() *GoTermMutation {
	return gtu.mutation
}

// ClearParent clears the "parent" edge to the GoTerm entity.
func (gtu *GoTermUpdate) ClearParent() *GoTermUpdate {
	gtu.mutation.ClearParent()
	return gtu
}

// ClearChildren clears all "children" edges to the GoTerm entity.
func (gtu *GoTermUpdate) ClearChildren() *GoTermUpdate {
	gtu.mutation.ClearChildren()
	return gtu
}

// RemoveChildIDs removes the "children" edge to GoTerm entities by IDs.
func (gtu *GoTermUpdate) RemoveChildIDs(ids ...string) *GoTermUpdate {
	gtu.mutation.RemoveChildIDs(ids...)
	return gtu
}

// RemoveChildren removes "children" edges to GoTerm entities.
func (gtu *GoTermUpdate) RemoveChildren(g ...*GoTerm) *GoTermUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtu.RemoveChildIDs(ids...)
}

// ClearTranscripts clears all "transcripts" edges to the Transcript entity.
func (gtu *GoTermUpdate) ClearTranscripts() *GoTermUpdate {
	gtu.mutation.ClearTranscripts()
	return gtu
}

// RemoveTranscriptIDs removes the "transcripts" edge to Transcript entities by IDs.
func (gtu *GoTermUpdate) RemoveTranscriptIDs(ids ...string) *GoTermUpdate {
	gtu.mutation.RemoveTranscriptIDs(ids...)
	return gtu
}

// RemoveTranscripts removes "transcripts" edges to Transcript entities.
func (gtu *GoTermUpdate) RemoveTranscripts(t ...*Transcript) *GoTermUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gtu.RemoveTranscriptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gtu *GoTermUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gtu.hooks) == 0 {
		if err = gtu.check(); err != nil {
			return 0, err
		}
		affected, err = gtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoTermMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gtu.check(); err != nil {
				return 0, err
			}
			gtu.mutation = mutation
			affected, err = gtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gtu.hooks) - 1; i >= 0; i-- {
			if gtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gtu *GoTermUpdate) SaveX(ctx context.Context) int {
	affected, err := gtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gtu *GoTermUpdate) Exec(ctx context.Context) error {
	_, err := gtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtu *GoTermUpdate) ExecX(ctx context.Context) {
	if err := gtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtu *GoTermUpdate) check() error {
	if v, ok := gtu.mutation.Namespace(); ok {
		if err := goterm.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "GoTerm.namespace": %w`, err)}
		}
	}
	return nil
}

func (gtu *GoTermUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goterm.Table,
			Columns: goterm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: goterm.FieldID,
			},
		},
	}
	if ps := gtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gtu.mutation.Namespace(); ok {
		_spec.SetField(goterm.FieldNamespace, field.TypeEnum, value)
	}
	if value, ok := gtu.mutation.Name(); ok {
		_spec.SetField(goterm.FieldName, field.TypeString, value)
	}
	if value, ok := gtu.mutation.Level(); ok {
		_spec.SetField(goterm.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := gtu.mutation.AddedLevel(); ok {
		_spec.AddField(goterm.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := gtu.mutation.Depth(); ok {
		_spec.SetField(goterm.FieldDepth, field.TypeInt32, value)
	}
	if value, ok := gtu.mutation.AddedDepth(); ok {
		_spec.AddField(goterm.FieldDepth, field.TypeInt32, value)
	}
	if gtu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goterm.ParentTable,
			Columns: []string{goterm.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goterm.ParentTable,
			Columns: []string{goterm.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goterm.ChildrenTable,
			Columns: []string{goterm.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !gtu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goterm.ChildrenTable,
			Columns: []string{goterm.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goterm.ChildrenTable,
			Columns: []string{goterm.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gtu.mutation.TranscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goterm.TranscriptsTable,
			Columns: goterm.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.RemovedTranscriptsIDs(); len(nodes) > 0 && !gtu.mutation.TranscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goterm.TranscriptsTable,
			Columns: goterm.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtu.mutation.TranscriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goterm.TranscriptsTable,
			Columns: goterm.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goterm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GoTermUpdateOne is the builder for updating a single GoTerm entity.
type GoTermUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoTermMutation
}

// SetNamespace sets the "namespace" field.
func (gtuo *GoTermUpdateOne) SetNamespace(_go goterm.Namespace) *GoTermUpdateOne {
	gtuo.mutation.SetNamespace(_go)
	return gtuo
}

// SetName sets the "name" field.
func (gtuo *GoTermUpdateOne) SetName(s string) *GoTermUpdateOne {
	gtuo.mutation.SetName(s)
	return gtuo
}

// SetLevel sets the "level" field.
func (gtuo *GoTermUpdateOne) SetLevel(i int32) *GoTermUpdateOne {
	gtuo.mutation.ResetLevel()
	gtuo.mutation.SetLevel(i)
	return gtuo
}

// AddLevel adds i to the "level" field.
func (gtuo *GoTermUpdateOne) AddLevel(i int32) *GoTermUpdateOne {
	gtuo.mutation.AddLevel(i)
	return gtuo
}

// SetDepth sets the "depth" field.
func (gtuo *GoTermUpdateOne) SetDepth(i int32) *GoTermUpdateOne {
	gtuo.mutation.ResetDepth()
	gtuo.mutation.SetDepth(i)
	return gtuo
}

// AddDepth adds i to the "depth" field.
func (gtuo *GoTermUpdateOne) AddDepth(i int32) *GoTermUpdateOne {
	gtuo.mutation.AddDepth(i)
	return gtuo
}

// SetParentID sets the "parent" edge to the GoTerm entity by ID.
func (gtuo *GoTermUpdateOne) SetParentID(id string) *GoTermUpdateOne {
	gtuo.mutation.SetParentID(id)
	return gtuo
}

// SetNillableParentID sets the "parent" edge to the GoTerm entity by ID if the given value is not nil.
func (gtuo *GoTermUpdateOne) SetNillableParentID(id *string) *GoTermUpdateOne {
	if id != nil {
		gtuo = gtuo.SetParentID(*id)
	}
	return gtuo
}

// SetParent sets the "parent" edge to the GoTerm entity.
func (gtuo *GoTermUpdateOne) SetParent(g *GoTerm) *GoTermUpdateOne {
	return gtuo.SetParentID(g.ID)
}

// AddChildIDs adds the "children" edge to the GoTerm entity by IDs.
func (gtuo *GoTermUpdateOne) AddChildIDs(ids ...string) *GoTermUpdateOne {
	gtuo.mutation.AddChildIDs(ids...)
	return gtuo
}

// AddChildren adds the "children" edges to the GoTerm entity.
func (gtuo *GoTermUpdateOne) AddChildren(g ...*GoTerm) *GoTermUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtuo.AddChildIDs(ids...)
}

// AddTranscriptIDs adds the "transcripts" edge to the Transcript entity by IDs.
func (gtuo *GoTermUpdateOne) AddTranscriptIDs(ids ...string) *GoTermUpdateOne {
	gtuo.mutation.AddTranscriptIDs(ids...)
	return gtuo
}

// AddTranscripts adds the "transcripts" edges to the Transcript entity.
func (gtuo *GoTermUpdateOne) AddTranscripts(t ...*Transcript) *GoTermUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gtuo.AddTranscriptIDs(ids...)
}

// Mutation returns the GoTermMutation object of the builder.
func (gtuo *GoTermUpdateOne) Mutation() *GoTermMutation {
	return gtuo.mutation
}

// ClearParent clears the "parent" edge to the GoTerm entity.
func (gtuo *GoTermUpdateOne) ClearParent() *GoTermUpdateOne {
	gtuo.mutation.ClearParent()
	return gtuo
}

// ClearChildren clears all "children" edges to the GoTerm entity.
func (gtuo *GoTermUpdateOne) ClearChildren() *GoTermUpdateOne {
	gtuo.mutation.ClearChildren()
	return gtuo
}

// RemoveChildIDs removes the "children" edge to GoTerm entities by IDs.
func (gtuo *GoTermUpdateOne) RemoveChildIDs(ids ...string) *GoTermUpdateOne {
	gtuo.mutation.RemoveChildIDs(ids...)
	return gtuo
}

// RemoveChildren removes "children" edges to GoTerm entities.
func (gtuo *GoTermUpdateOne) RemoveChildren(g ...*GoTerm) *GoTermUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gtuo.RemoveChildIDs(ids...)
}

// ClearTranscripts clears all "transcripts" edges to the Transcript entity.
func (gtuo *GoTermUpdateOne) ClearTranscripts() *GoTermUpdateOne {
	gtuo.mutation.ClearTranscripts()
	return gtuo
}

// RemoveTranscriptIDs removes the "transcripts" edge to Transcript entities by IDs.
func (gtuo *GoTermUpdateOne) RemoveTranscriptIDs(ids ...string) *GoTermUpdateOne {
	gtuo.mutation.RemoveTranscriptIDs(ids...)
	return gtuo
}

// RemoveTranscripts removes "transcripts" edges to Transcript entities.
func (gtuo *GoTermUpdateOne) RemoveTranscripts(t ...*Transcript) *GoTermUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gtuo.RemoveTranscriptIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gtuo *GoTermUpdateOne) Select(field string, fields ...string) *GoTermUpdateOne {
	gtuo.fields = append([]string{field}, fields...)
	return gtuo
}

// Save executes the query and returns the updated GoTerm entity.
func (gtuo *GoTermUpdateOne) Save(ctx context.Context) (*GoTerm, error) {
	var (
		err  error
		node *GoTerm
	)
	if len(gtuo.hooks) == 0 {
		if err = gtuo.check(); err != nil {
			return nil, err
		}
		node, err = gtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoTermMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gtuo.check(); err != nil {
				return nil, err
			}
			gtuo.mutation = mutation
			node, err = gtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gtuo.hooks) - 1; i >= 0; i-- {
			if gtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gtuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gtuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GoTerm)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GoTermMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gtuo *GoTermUpdateOne) SaveX(ctx context.Context) *GoTerm {
	node, err := gtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gtuo *GoTermUpdateOne) Exec(ctx context.Context) error {
	_, err := gtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtuo *GoTermUpdateOne) ExecX(ctx context.Context) {
	if err := gtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtuo *GoTermUpdateOne) check() error {
	if v, ok := gtuo.mutation.Namespace(); ok {
		if err := goterm.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "GoTerm.namespace": %w`, err)}
		}
	}
	return nil
}

func (gtuo *GoTermUpdateOne) sqlSave(ctx context.Context) (_node *GoTerm, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goterm.Table,
			Columns: goterm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: goterm.FieldID,
			},
		},
	}
	id, ok := gtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoTerm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goterm.FieldID)
		for _, f := range fields {
			if !goterm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goterm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gtuo.mutation.Namespace(); ok {
		_spec.SetField(goterm.FieldNamespace, field.TypeEnum, value)
	}
	if value, ok := gtuo.mutation.Name(); ok {
		_spec.SetField(goterm.FieldName, field.TypeString, value)
	}
	if value, ok := gtuo.mutation.Level(); ok {
		_spec.SetField(goterm.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := gtuo.mutation.AddedLevel(); ok {
		_spec.AddField(goterm.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := gtuo.mutation.Depth(); ok {
		_spec.SetField(goterm.FieldDepth, field.TypeInt32, value)
	}
	if value, ok := gtuo.mutation.AddedDepth(); ok {
		_spec.AddField(goterm.FieldDepth, field.TypeInt32, value)
	}
	if gtuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goterm.ParentTable,
			Columns: []string{goterm.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   goterm.ParentTable,
			Columns: []string{goterm.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goterm.ChildrenTable,
			Columns: []string{goterm.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !gtuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goterm.ChildrenTable,
			Columns: []string{goterm.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goterm.ChildrenTable,
			Columns: []string{goterm.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: goterm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gtuo.mutation.TranscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goterm.TranscriptsTable,
			Columns: goterm.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.RemovedTranscriptsIDs(); len(nodes) > 0 && !gtuo.mutation.TranscriptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goterm.TranscriptsTable,
			Columns: goterm.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gtuo.mutation.TranscriptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   goterm.TranscriptsTable,
			Columns: goterm.TranscriptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GoTerm{config: gtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goterm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
