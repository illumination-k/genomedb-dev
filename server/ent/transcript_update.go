// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/cds"
	"genomedb/ent/exon"
	"genomedb/ent/fiveprimeutr"
	"genomedb/ent/gene"
	"genomedb/ent/predicate"
	"genomedb/ent/threeprimeutr"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TranscriptUpdate is the builder for updating Transcript entities.
type TranscriptUpdate struct {
	config
	hooks    []Hook
	mutation *TranscriptMutation
}

// Where appends a list predicates to the TranscriptUpdate builder.
func (tu *TranscriptUpdate) Where(ps ...predicate.Transcript) *TranscriptUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetStrand sets the "strand" field.
func (tu *TranscriptUpdate) SetStrand(s string) *TranscriptUpdate {
	tu.mutation.SetStrand(s)
	return tu
}

// SetType sets the "type" field.
func (tu *TranscriptUpdate) SetType(s string) *TranscriptUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetGenomeSeq sets the "genome_seq" field.
func (tu *TranscriptUpdate) SetGenomeSeq(s string) *TranscriptUpdate {
	tu.mutation.SetGenomeSeq(s)
	return tu
}

// SetTranscriptSeq sets the "transcript_seq" field.
func (tu *TranscriptUpdate) SetTranscriptSeq(s string) *TranscriptUpdate {
	tu.mutation.SetTranscriptSeq(s)
	return tu
}

// SetCdsSeq sets the "cds_seq" field.
func (tu *TranscriptUpdate) SetCdsSeq(s string) *TranscriptUpdate {
	tu.mutation.SetCdsSeq(s)
	return tu
}

// SetProteinSeq sets the "protein_seq" field.
func (tu *TranscriptUpdate) SetProteinSeq(s string) *TranscriptUpdate {
	tu.mutation.SetProteinSeq(s)
	return tu
}

// SetGeneID sets the "gene" edge to the Gene entity by ID.
func (tu *TranscriptUpdate) SetGeneID(id string) *TranscriptUpdate {
	tu.mutation.SetGeneID(id)
	return tu
}

// SetNillableGeneID sets the "gene" edge to the Gene entity by ID if the given value is not nil.
func (tu *TranscriptUpdate) SetNillableGeneID(id *string) *TranscriptUpdate {
	if id != nil {
		tu = tu.SetGeneID(*id)
	}
	return tu
}

// SetGene sets the "gene" edge to the Gene entity.
func (tu *TranscriptUpdate) SetGene(g *Gene) *TranscriptUpdate {
	return tu.SetGeneID(g.ID)
}

// AddCdIDs adds the "cds" edge to the Cds entity by IDs.
func (tu *TranscriptUpdate) AddCdIDs(ids ...int) *TranscriptUpdate {
	tu.mutation.AddCdIDs(ids...)
	return tu
}

// AddCds adds the "cds" edges to the Cds entity.
func (tu *TranscriptUpdate) AddCds(c ...*Cds) *TranscriptUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCdIDs(ids...)
}

// AddExonIDs adds the "exon" edge to the Exon entity by IDs.
func (tu *TranscriptUpdate) AddExonIDs(ids ...int) *TranscriptUpdate {
	tu.mutation.AddExonIDs(ids...)
	return tu
}

// AddExon adds the "exon" edges to the Exon entity.
func (tu *TranscriptUpdate) AddExon(e ...*Exon) *TranscriptUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.AddExonIDs(ids...)
}

// AddFivePrimeUtrIDs adds the "five_prime_utr" edge to the FivePrimeUtr entity by IDs.
func (tu *TranscriptUpdate) AddFivePrimeUtrIDs(ids ...int) *TranscriptUpdate {
	tu.mutation.AddFivePrimeUtrIDs(ids...)
	return tu
}

// AddFivePrimeUtr adds the "five_prime_utr" edges to the FivePrimeUtr entity.
func (tu *TranscriptUpdate) AddFivePrimeUtr(f ...*FivePrimeUtr) *TranscriptUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.AddFivePrimeUtrIDs(ids...)
}

// AddThreePrimeUtrIDs adds the "three_prime_utr" edge to the ThreePrimeUtr entity by IDs.
func (tu *TranscriptUpdate) AddThreePrimeUtrIDs(ids ...int) *TranscriptUpdate {
	tu.mutation.AddThreePrimeUtrIDs(ids...)
	return tu
}

// AddThreePrimeUtr adds the "three_prime_utr" edges to the ThreePrimeUtr entity.
func (tu *TranscriptUpdate) AddThreePrimeUtr(t ...*ThreePrimeUtr) *TranscriptUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddThreePrimeUtrIDs(ids...)
}

// Mutation returns the TranscriptMutation object of the builder.
func (tu *TranscriptUpdate) Mutation() *TranscriptMutation {
	return tu.mutation
}

// ClearGene clears the "gene" edge to the Gene entity.
func (tu *TranscriptUpdate) ClearGene() *TranscriptUpdate {
	tu.mutation.ClearGene()
	return tu
}

// ClearCds clears all "cds" edges to the Cds entity.
func (tu *TranscriptUpdate) ClearCds() *TranscriptUpdate {
	tu.mutation.ClearCds()
	return tu
}

// RemoveCdIDs removes the "cds" edge to Cds entities by IDs.
func (tu *TranscriptUpdate) RemoveCdIDs(ids ...int) *TranscriptUpdate {
	tu.mutation.RemoveCdIDs(ids...)
	return tu
}

// RemoveCds removes "cds" edges to Cds entities.
func (tu *TranscriptUpdate) RemoveCds(c ...*Cds) *TranscriptUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCdIDs(ids...)
}

// ClearExon clears all "exon" edges to the Exon entity.
func (tu *TranscriptUpdate) ClearExon() *TranscriptUpdate {
	tu.mutation.ClearExon()
	return tu
}

// RemoveExonIDs removes the "exon" edge to Exon entities by IDs.
func (tu *TranscriptUpdate) RemoveExonIDs(ids ...int) *TranscriptUpdate {
	tu.mutation.RemoveExonIDs(ids...)
	return tu
}

// RemoveExon removes "exon" edges to Exon entities.
func (tu *TranscriptUpdate) RemoveExon(e ...*Exon) *TranscriptUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.RemoveExonIDs(ids...)
}

// ClearFivePrimeUtr clears all "five_prime_utr" edges to the FivePrimeUtr entity.
func (tu *TranscriptUpdate) ClearFivePrimeUtr() *TranscriptUpdate {
	tu.mutation.ClearFivePrimeUtr()
	return tu
}

// RemoveFivePrimeUtrIDs removes the "five_prime_utr" edge to FivePrimeUtr entities by IDs.
func (tu *TranscriptUpdate) RemoveFivePrimeUtrIDs(ids ...int) *TranscriptUpdate {
	tu.mutation.RemoveFivePrimeUtrIDs(ids...)
	return tu
}

// RemoveFivePrimeUtr removes "five_prime_utr" edges to FivePrimeUtr entities.
func (tu *TranscriptUpdate) RemoveFivePrimeUtr(f ...*FivePrimeUtr) *TranscriptUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.RemoveFivePrimeUtrIDs(ids...)
}

// ClearThreePrimeUtr clears all "three_prime_utr" edges to the ThreePrimeUtr entity.
func (tu *TranscriptUpdate) ClearThreePrimeUtr() *TranscriptUpdate {
	tu.mutation.ClearThreePrimeUtr()
	return tu
}

// RemoveThreePrimeUtrIDs removes the "three_prime_utr" edge to ThreePrimeUtr entities by IDs.
func (tu *TranscriptUpdate) RemoveThreePrimeUtrIDs(ids ...int) *TranscriptUpdate {
	tu.mutation.RemoveThreePrimeUtrIDs(ids...)
	return tu
}

// RemoveThreePrimeUtr removes "three_prime_utr" edges to ThreePrimeUtr entities.
func (tu *TranscriptUpdate) RemoveThreePrimeUtr(t ...*ThreePrimeUtr) *TranscriptUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveThreePrimeUtrIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TranscriptUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TranscriptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TranscriptUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TranscriptUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TranscriptUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TranscriptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transcript.Table,
			Columns: transcript.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transcript.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Strand(); ok {
		_spec.SetField(transcript.FieldStrand, field.TypeString, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(transcript.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.GenomeSeq(); ok {
		_spec.SetField(transcript.FieldGenomeSeq, field.TypeString, value)
	}
	if value, ok := tu.mutation.TranscriptSeq(); ok {
		_spec.SetField(transcript.FieldTranscriptSeq, field.TypeString, value)
	}
	if value, ok := tu.mutation.CdsSeq(); ok {
		_spec.SetField(transcript.FieldCdsSeq, field.TypeString, value)
	}
	if value, ok := tu.mutation.ProteinSeq(); ok {
		_spec.SetField(transcript.FieldProteinSeq, field.TypeString, value)
	}
	if tu.mutation.GeneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcript.GeneTable,
			Columns: []string{transcript.GeneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gene.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.GeneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcript.GeneTable,
			Columns: []string{transcript.GeneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gene.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.CdsTable,
			Columns: []string{transcript.CdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cds.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCdsIDs(); len(nodes) > 0 && !tu.mutation.CdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.CdsTable,
			Columns: []string{transcript.CdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cds.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.CdsTable,
			Columns: []string{transcript.CdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cds.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ExonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ExonTable,
			Columns: []string{transcript.ExonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedExonIDs(); len(nodes) > 0 && !tu.mutation.ExonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ExonTable,
			Columns: []string{transcript.ExonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ExonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ExonTable,
			Columns: []string{transcript.ExonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FivePrimeUtrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.FivePrimeUtrTable,
			Columns: []string{transcript.FivePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fiveprimeutr.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedFivePrimeUtrIDs(); len(nodes) > 0 && !tu.mutation.FivePrimeUtrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.FivePrimeUtrTable,
			Columns: []string{transcript.FivePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fiveprimeutr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FivePrimeUtrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.FivePrimeUtrTable,
			Columns: []string{transcript.FivePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fiveprimeutr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ThreePrimeUtrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ThreePrimeUtrTable,
			Columns: []string{transcript.ThreePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threeprimeutr.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedThreePrimeUtrIDs(); len(nodes) > 0 && !tu.mutation.ThreePrimeUtrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ThreePrimeUtrTable,
			Columns: []string{transcript.ThreePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threeprimeutr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ThreePrimeUtrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ThreePrimeUtrTable,
			Columns: []string{transcript.ThreePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threeprimeutr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transcript.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TranscriptUpdateOne is the builder for updating a single Transcript entity.
type TranscriptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TranscriptMutation
}

// SetStrand sets the "strand" field.
func (tuo *TranscriptUpdateOne) SetStrand(s string) *TranscriptUpdateOne {
	tuo.mutation.SetStrand(s)
	return tuo
}

// SetType sets the "type" field.
func (tuo *TranscriptUpdateOne) SetType(s string) *TranscriptUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetGenomeSeq sets the "genome_seq" field.
func (tuo *TranscriptUpdateOne) SetGenomeSeq(s string) *TranscriptUpdateOne {
	tuo.mutation.SetGenomeSeq(s)
	return tuo
}

// SetTranscriptSeq sets the "transcript_seq" field.
func (tuo *TranscriptUpdateOne) SetTranscriptSeq(s string) *TranscriptUpdateOne {
	tuo.mutation.SetTranscriptSeq(s)
	return tuo
}

// SetCdsSeq sets the "cds_seq" field.
func (tuo *TranscriptUpdateOne) SetCdsSeq(s string) *TranscriptUpdateOne {
	tuo.mutation.SetCdsSeq(s)
	return tuo
}

// SetProteinSeq sets the "protein_seq" field.
func (tuo *TranscriptUpdateOne) SetProteinSeq(s string) *TranscriptUpdateOne {
	tuo.mutation.SetProteinSeq(s)
	return tuo
}

// SetGeneID sets the "gene" edge to the Gene entity by ID.
func (tuo *TranscriptUpdateOne) SetGeneID(id string) *TranscriptUpdateOne {
	tuo.mutation.SetGeneID(id)
	return tuo
}

// SetNillableGeneID sets the "gene" edge to the Gene entity by ID if the given value is not nil.
func (tuo *TranscriptUpdateOne) SetNillableGeneID(id *string) *TranscriptUpdateOne {
	if id != nil {
		tuo = tuo.SetGeneID(*id)
	}
	return tuo
}

// SetGene sets the "gene" edge to the Gene entity.
func (tuo *TranscriptUpdateOne) SetGene(g *Gene) *TranscriptUpdateOne {
	return tuo.SetGeneID(g.ID)
}

// AddCdIDs adds the "cds" edge to the Cds entity by IDs.
func (tuo *TranscriptUpdateOne) AddCdIDs(ids ...int) *TranscriptUpdateOne {
	tuo.mutation.AddCdIDs(ids...)
	return tuo
}

// AddCds adds the "cds" edges to the Cds entity.
func (tuo *TranscriptUpdateOne) AddCds(c ...*Cds) *TranscriptUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCdIDs(ids...)
}

// AddExonIDs adds the "exon" edge to the Exon entity by IDs.
func (tuo *TranscriptUpdateOne) AddExonIDs(ids ...int) *TranscriptUpdateOne {
	tuo.mutation.AddExonIDs(ids...)
	return tuo
}

// AddExon adds the "exon" edges to the Exon entity.
func (tuo *TranscriptUpdateOne) AddExon(e ...*Exon) *TranscriptUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.AddExonIDs(ids...)
}

// AddFivePrimeUtrIDs adds the "five_prime_utr" edge to the FivePrimeUtr entity by IDs.
func (tuo *TranscriptUpdateOne) AddFivePrimeUtrIDs(ids ...int) *TranscriptUpdateOne {
	tuo.mutation.AddFivePrimeUtrIDs(ids...)
	return tuo
}

// AddFivePrimeUtr adds the "five_prime_utr" edges to the FivePrimeUtr entity.
func (tuo *TranscriptUpdateOne) AddFivePrimeUtr(f ...*FivePrimeUtr) *TranscriptUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.AddFivePrimeUtrIDs(ids...)
}

// AddThreePrimeUtrIDs adds the "three_prime_utr" edge to the ThreePrimeUtr entity by IDs.
func (tuo *TranscriptUpdateOne) AddThreePrimeUtrIDs(ids ...int) *TranscriptUpdateOne {
	tuo.mutation.AddThreePrimeUtrIDs(ids...)
	return tuo
}

// AddThreePrimeUtr adds the "three_prime_utr" edges to the ThreePrimeUtr entity.
func (tuo *TranscriptUpdateOne) AddThreePrimeUtr(t ...*ThreePrimeUtr) *TranscriptUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddThreePrimeUtrIDs(ids...)
}

// Mutation returns the TranscriptMutation object of the builder.
func (tuo *TranscriptUpdateOne) Mutation() *TranscriptMutation {
	return tuo.mutation
}

// ClearGene clears the "gene" edge to the Gene entity.
func (tuo *TranscriptUpdateOne) ClearGene() *TranscriptUpdateOne {
	tuo.mutation.ClearGene()
	return tuo
}

// ClearCds clears all "cds" edges to the Cds entity.
func (tuo *TranscriptUpdateOne) ClearCds() *TranscriptUpdateOne {
	tuo.mutation.ClearCds()
	return tuo
}

// RemoveCdIDs removes the "cds" edge to Cds entities by IDs.
func (tuo *TranscriptUpdateOne) RemoveCdIDs(ids ...int) *TranscriptUpdateOne {
	tuo.mutation.RemoveCdIDs(ids...)
	return tuo
}

// RemoveCds removes "cds" edges to Cds entities.
func (tuo *TranscriptUpdateOne) RemoveCds(c ...*Cds) *TranscriptUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCdIDs(ids...)
}

// ClearExon clears all "exon" edges to the Exon entity.
func (tuo *TranscriptUpdateOne) ClearExon() *TranscriptUpdateOne {
	tuo.mutation.ClearExon()
	return tuo
}

// RemoveExonIDs removes the "exon" edge to Exon entities by IDs.
func (tuo *TranscriptUpdateOne) RemoveExonIDs(ids ...int) *TranscriptUpdateOne {
	tuo.mutation.RemoveExonIDs(ids...)
	return tuo
}

// RemoveExon removes "exon" edges to Exon entities.
func (tuo *TranscriptUpdateOne) RemoveExon(e ...*Exon) *TranscriptUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.RemoveExonIDs(ids...)
}

// ClearFivePrimeUtr clears all "five_prime_utr" edges to the FivePrimeUtr entity.
func (tuo *TranscriptUpdateOne) ClearFivePrimeUtr() *TranscriptUpdateOne {
	tuo.mutation.ClearFivePrimeUtr()
	return tuo
}

// RemoveFivePrimeUtrIDs removes the "five_prime_utr" edge to FivePrimeUtr entities by IDs.
func (tuo *TranscriptUpdateOne) RemoveFivePrimeUtrIDs(ids ...int) *TranscriptUpdateOne {
	tuo.mutation.RemoveFivePrimeUtrIDs(ids...)
	return tuo
}

// RemoveFivePrimeUtr removes "five_prime_utr" edges to FivePrimeUtr entities.
func (tuo *TranscriptUpdateOne) RemoveFivePrimeUtr(f ...*FivePrimeUtr) *TranscriptUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.RemoveFivePrimeUtrIDs(ids...)
}

// ClearThreePrimeUtr clears all "three_prime_utr" edges to the ThreePrimeUtr entity.
func (tuo *TranscriptUpdateOne) ClearThreePrimeUtr() *TranscriptUpdateOne {
	tuo.mutation.ClearThreePrimeUtr()
	return tuo
}

// RemoveThreePrimeUtrIDs removes the "three_prime_utr" edge to ThreePrimeUtr entities by IDs.
func (tuo *TranscriptUpdateOne) RemoveThreePrimeUtrIDs(ids ...int) *TranscriptUpdateOne {
	tuo.mutation.RemoveThreePrimeUtrIDs(ids...)
	return tuo
}

// RemoveThreePrimeUtr removes "three_prime_utr" edges to ThreePrimeUtr entities.
func (tuo *TranscriptUpdateOne) RemoveThreePrimeUtr(t ...*ThreePrimeUtr) *TranscriptUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveThreePrimeUtrIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TranscriptUpdateOne) Select(field string, fields ...string) *TranscriptUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transcript entity.
func (tuo *TranscriptUpdateOne) Save(ctx context.Context) (*Transcript, error) {
	var (
		err  error
		node *Transcript
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TranscriptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transcript)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TranscriptMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TranscriptUpdateOne) SaveX(ctx context.Context) *Transcript {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TranscriptUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TranscriptUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TranscriptUpdateOne) sqlSave(ctx context.Context) (_node *Transcript, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transcript.Table,
			Columns: transcript.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transcript.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transcript.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transcript.FieldID)
		for _, f := range fields {
			if !transcript.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transcript.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Strand(); ok {
		_spec.SetField(transcript.FieldStrand, field.TypeString, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(transcript.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.GenomeSeq(); ok {
		_spec.SetField(transcript.FieldGenomeSeq, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TranscriptSeq(); ok {
		_spec.SetField(transcript.FieldTranscriptSeq, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CdsSeq(); ok {
		_spec.SetField(transcript.FieldCdsSeq, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ProteinSeq(); ok {
		_spec.SetField(transcript.FieldProteinSeq, field.TypeString, value)
	}
	if tuo.mutation.GeneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcript.GeneTable,
			Columns: []string{transcript.GeneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gene.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.GeneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transcript.GeneTable,
			Columns: []string{transcript.GeneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gene.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.CdsTable,
			Columns: []string{transcript.CdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cds.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCdsIDs(); len(nodes) > 0 && !tuo.mutation.CdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.CdsTable,
			Columns: []string{transcript.CdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cds.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.CdsTable,
			Columns: []string{transcript.CdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cds.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ExonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ExonTable,
			Columns: []string{transcript.ExonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedExonIDs(); len(nodes) > 0 && !tuo.mutation.ExonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ExonTable,
			Columns: []string{transcript.ExonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ExonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ExonTable,
			Columns: []string{transcript.ExonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FivePrimeUtrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.FivePrimeUtrTable,
			Columns: []string{transcript.FivePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fiveprimeutr.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedFivePrimeUtrIDs(); len(nodes) > 0 && !tuo.mutation.FivePrimeUtrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.FivePrimeUtrTable,
			Columns: []string{transcript.FivePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fiveprimeutr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FivePrimeUtrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.FivePrimeUtrTable,
			Columns: []string{transcript.FivePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fiveprimeutr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ThreePrimeUtrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ThreePrimeUtrTable,
			Columns: []string{transcript.ThreePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threeprimeutr.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedThreePrimeUtrIDs(); len(nodes) > 0 && !tuo.mutation.ThreePrimeUtrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ThreePrimeUtrTable,
			Columns: []string{transcript.ThreePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threeprimeutr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ThreePrimeUtrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transcript.ThreePrimeUtrTable,
			Columns: []string{transcript.ThreePrimeUtrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threeprimeutr.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transcript{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transcript.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
