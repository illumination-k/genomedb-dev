// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/exon"
	"genomedb/ent/transcript"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Exon is the model entity for the Exon schema.
type Exon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Seqname holds the value of the "seqname" field.
	Seqname string `json:"seqname,omitempty"`
	// Start holds the value of the "start" field.
	Start int32 `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End int32 `json:"end,omitempty"`
	// Strand holds the value of the "strand" field.
	Strand string `json:"strand,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExonQuery when eager-loading is set.
	Edges           ExonEdges `json:"edges"`
	transcript_exon *string
}

// ExonEdges holds the relations/edges for other nodes in the graph.
type ExonEdges struct {
	// Transcript holds the value of the transcript edge.
	Transcript *Transcript `json:"transcript,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TranscriptOrErr returns the Transcript value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExonEdges) TranscriptOrErr() (*Transcript, error) {
	if e.loadedTypes[0] {
		if e.Transcript == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: transcript.Label}
		}
		return e.Transcript, nil
	}
	return nil, &NotLoadedError{edge: "transcript"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exon) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exon.FieldID, exon.FieldStart, exon.FieldEnd:
			values[i] = new(sql.NullInt64)
		case exon.FieldSeqname, exon.FieldStrand:
			values[i] = new(sql.NullString)
		case exon.ForeignKeys[0]: // transcript_exon
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Exon", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exon fields.
func (e *Exon) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exon.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case exon.FieldSeqname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seqname", values[i])
			} else if value.Valid {
				e.Seqname = value.String
			}
		case exon.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				e.Start = int32(value.Int64)
			}
		case exon.FieldEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				e.End = int32(value.Int64)
			}
		case exon.FieldStrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field strand", values[i])
			} else if value.Valid {
				e.Strand = value.String
			}
		case exon.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transcript_exon", values[i])
			} else if value.Valid {
				e.transcript_exon = new(string)
				*e.transcript_exon = value.String
			}
		}
	}
	return nil
}

// QueryTranscript queries the "transcript" edge of the Exon entity.
func (e *Exon) QueryTranscript() *TranscriptQuery {
	return (&ExonClient{config: e.config}).QueryTranscript(e)
}

// Update returns a builder for updating this Exon.
// Note that you need to call Exon.Unwrap() before calling this method if this Exon
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exon) Update() *ExonUpdateOne {
	return (&ExonClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Exon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exon) Unwrap() *Exon {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exon is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exon) String() string {
	var builder strings.Builder
	builder.WriteString("Exon(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("seqname=")
	builder.WriteString(e.Seqname)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(fmt.Sprintf("%v", e.Start))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(fmt.Sprintf("%v", e.End))
	builder.WriteString(", ")
	builder.WriteString("strand=")
	builder.WriteString(e.Strand)
	builder.WriteByte(')')
	return builder.String()
}

// Exons is a parsable slice of Exon.
type Exons []*Exon

func (e Exons) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
