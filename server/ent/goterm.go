// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/goterm"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// GoTerm is the model entity for the GoTerm schema.
type GoTerm struct {
	config `json:"-"`
	// ID of the ent.
	// Go term id: GO:NNNNNN
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace goterm.Namespace `json:"namespace,omitempty"`
	// Go term description
	Name string `json:"name,omitempty"`
	// shortest distance from root node
	Level int32 `json:"level,omitempty"`
	// longest distance from root node
	Depth int32 `json:"depth,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoTermQuery when eager-loading is set.
	Edges            GoTermEdges `json:"edges"`
	go_term_children *string
}

// GoTermEdges holds the relations/edges for other nodes in the graph.
type GoTermEdges struct {
	// Parent holds the value of the parent edge.
	Parent *GoTerm `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*GoTerm `json:"children,omitempty"`
	// Transcripts holds the value of the transcripts edge.
	Transcripts []*Transcript `json:"transcripts,omitempty"`
	// GotermTranscript holds the value of the goterm_transcript edge.
	GotermTranscript []*GoTermOnTranscripts `json:"goterm_transcript,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoTermEdges) ParentOrErr() (*GoTerm, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: goterm.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e GoTermEdges) ChildrenOrErr() ([]*GoTerm, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// TranscriptsOrErr returns the Transcripts value or an error if the edge
// was not loaded in eager-loading.
func (e GoTermEdges) TranscriptsOrErr() ([]*Transcript, error) {
	if e.loadedTypes[2] {
		return e.Transcripts, nil
	}
	return nil, &NotLoadedError{edge: "transcripts"}
}

// GotermTranscriptOrErr returns the GotermTranscript value or an error if the edge
// was not loaded in eager-loading.
func (e GoTermEdges) GotermTranscriptOrErr() ([]*GoTermOnTranscripts, error) {
	if e.loadedTypes[3] {
		return e.GotermTranscript, nil
	}
	return nil, &NotLoadedError{edge: "goterm_transcript"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoTerm) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goterm.FieldLevel, goterm.FieldDepth:
			values[i] = new(sql.NullInt64)
		case goterm.FieldID, goterm.FieldNamespace, goterm.FieldName:
			values[i] = new(sql.NullString)
		case goterm.ForeignKeys[0]: // go_term_children
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoTerm", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoTerm fields.
func (gt *GoTerm) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goterm.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gt.ID = value.String
			}
		case goterm.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				gt.Namespace = goterm.Namespace(value.String)
			}
		case goterm.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gt.Name = value.String
			}
		case goterm.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				gt.Level = int32(value.Int64)
			}
		case goterm.FieldDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field depth", values[i])
			} else if value.Valid {
				gt.Depth = int32(value.Int64)
			}
		case goterm.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field go_term_children", values[i])
			} else if value.Valid {
				gt.go_term_children = new(string)
				*gt.go_term_children = value.String
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the GoTerm entity.
func (gt *GoTerm) QueryParent() *GoTermQuery {
	return (&GoTermClient{config: gt.config}).QueryParent(gt)
}

// QueryChildren queries the "children" edge of the GoTerm entity.
func (gt *GoTerm) QueryChildren() *GoTermQuery {
	return (&GoTermClient{config: gt.config}).QueryChildren(gt)
}

// QueryTranscripts queries the "transcripts" edge of the GoTerm entity.
func (gt *GoTerm) QueryTranscripts() *TranscriptQuery {
	return (&GoTermClient{config: gt.config}).QueryTranscripts(gt)
}

// QueryGotermTranscript queries the "goterm_transcript" edge of the GoTerm entity.
func (gt *GoTerm) QueryGotermTranscript() *GoTermOnTranscriptsQuery {
	return (&GoTermClient{config: gt.config}).QueryGotermTranscript(gt)
}

// Update returns a builder for updating this GoTerm.
// Note that you need to call GoTerm.Unwrap() before calling this method if this GoTerm
// was returned from a transaction, and the transaction was committed or rolled back.
func (gt *GoTerm) Update() *GoTermUpdateOne {
	return (&GoTermClient{config: gt.config}).UpdateOne(gt)
}

// Unwrap unwraps the GoTerm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gt *GoTerm) Unwrap() *GoTerm {
	_tx, ok := gt.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoTerm is not a transactional entity")
	}
	gt.config.driver = _tx.drv
	return gt
}

// String implements the fmt.Stringer.
func (gt *GoTerm) String() string {
	var builder strings.Builder
	builder.WriteString("GoTerm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gt.ID))
	builder.WriteString("namespace=")
	builder.WriteString(fmt.Sprintf("%v", gt.Namespace))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gt.Name)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", gt.Level))
	builder.WriteString(", ")
	builder.WriteString("depth=")
	builder.WriteString(fmt.Sprintf("%v", gt.Depth))
	builder.WriteByte(')')
	return builder.String()
}

// GoTerms is a parsable slice of GoTerm.
type GoTerms []*GoTerm

func (gt GoTerms) config(cfg config) {
	for _i := range gt {
		gt[_i].config = cfg
	}
}
