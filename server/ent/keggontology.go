// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/keggontology"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// KeggOntology is the model entity for the KeggOntology schema.
type KeggOntology struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KeggOntology) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case keggontology.FieldID, keggontology.FieldName, keggontology.FieldSymbol:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type KeggOntology", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KeggOntology fields.
func (ko *KeggOntology) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case keggontology.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ko.ID = value.String
			}
		case keggontology.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ko.Name = value.String
			}
		case keggontology.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				ko.Symbol = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this KeggOntology.
// Note that you need to call KeggOntology.Unwrap() before calling this method if this KeggOntology
// was returned from a transaction, and the transaction was committed or rolled back.
func (ko *KeggOntology) Update() *KeggOntologyUpdateOne {
	return (&KeggOntologyClient{config: ko.config}).UpdateOne(ko)
}

// Unwrap unwraps the KeggOntology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ko *KeggOntology) Unwrap() *KeggOntology {
	_tx, ok := ko.config.driver.(*txDriver)
	if !ok {
		panic("ent: KeggOntology is not a transactional entity")
	}
	ko.config.driver = _tx.drv
	return ko
}

// String implements the fmt.Stringer.
func (ko *KeggOntology) String() string {
	var builder strings.Builder
	builder.WriteString("KeggOntology(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ko.ID))
	builder.WriteString("name=")
	builder.WriteString(ko.Name)
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(ko.Symbol)
	builder.WriteByte(')')
	return builder.String()
}

// KeggOntologies is a parsable slice of KeggOntology.
type KeggOntologies []*KeggOntology

func (ko KeggOntologies) config(cfg config) {
	for _i := range ko {
		ko[_i].config = cfg
	}
}
