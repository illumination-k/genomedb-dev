// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/exon"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExonCreate is the builder for creating a Exon entity.
type ExonCreate struct {
	config
	mutation *ExonMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSeqname sets the "seqname" field.
func (ec *ExonCreate) SetSeqname(s string) *ExonCreate {
	ec.mutation.SetSeqname(s)
	return ec
}

// SetStart sets the "start" field.
func (ec *ExonCreate) SetStart(i int32) *ExonCreate {
	ec.mutation.SetStart(i)
	return ec
}

// SetEnd sets the "end" field.
func (ec *ExonCreate) SetEnd(i int32) *ExonCreate {
	ec.mutation.SetEnd(i)
	return ec
}

// SetStrand sets the "strand" field.
func (ec *ExonCreate) SetStrand(s string) *ExonCreate {
	ec.mutation.SetStrand(s)
	return ec
}

// SetTranscriptID sets the "transcript" edge to the Transcript entity by ID.
func (ec *ExonCreate) SetTranscriptID(id string) *ExonCreate {
	ec.mutation.SetTranscriptID(id)
	return ec
}

// SetNillableTranscriptID sets the "transcript" edge to the Transcript entity by ID if the given value is not nil.
func (ec *ExonCreate) SetNillableTranscriptID(id *string) *ExonCreate {
	if id != nil {
		ec = ec.SetTranscriptID(*id)
	}
	return ec
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (ec *ExonCreate) SetTranscript(t *Transcript) *ExonCreate {
	return ec.SetTranscriptID(t.ID)
}

// Mutation returns the ExonMutation object of the builder.
func (ec *ExonCreate) Mutation() *ExonMutation {
	return ec.mutation
}

// Save creates the Exon in the database.
func (ec *ExonCreate) Save(ctx context.Context) (*Exon, error) {
	var (
		err  error
		node *Exon
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Exon)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExonMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExonCreate) SaveX(ctx context.Context) *Exon {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExonCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExonCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExonCreate) check() error {
	if _, ok := ec.mutation.Seqname(); !ok {
		return &ValidationError{Name: "seqname", err: errors.New(`ent: missing required field "Exon.seqname"`)}
	}
	if _, ok := ec.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Exon.start"`)}
	}
	if v, ok := ec.mutation.Start(); ok {
		if err := exon.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "Exon.start": %w`, err)}
		}
	}
	if _, ok := ec.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Exon.end"`)}
	}
	if v, ok := ec.mutation.End(); ok {
		if err := exon.EndValidator(v); err != nil {
			return &ValidationError{Name: "end", err: fmt.Errorf(`ent: validator failed for field "Exon.end": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Strand(); !ok {
		return &ValidationError{Name: "strand", err: errors.New(`ent: missing required field "Exon.strand"`)}
	}
	return nil
}

func (ec *ExonCreate) sqlSave(ctx context.Context) (*Exon, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *ExonCreate) createSpec() (*Exon, *sqlgraph.CreateSpec) {
	var (
		_node = &Exon{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: exon.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exon.FieldID,
			},
		}
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.Seqname(); ok {
		_spec.SetField(exon.FieldSeqname, field.TypeString, value)
		_node.Seqname = value
	}
	if value, ok := ec.mutation.Start(); ok {
		_spec.SetField(exon.FieldStart, field.TypeInt32, value)
		_node.Start = value
	}
	if value, ok := ec.mutation.End(); ok {
		_spec.SetField(exon.FieldEnd, field.TypeInt32, value)
		_node.End = value
	}
	if value, ok := ec.mutation.Strand(); ok {
		_spec.SetField(exon.FieldStrand, field.TypeString, value)
		_node.Strand = value
	}
	if nodes := ec.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exon.TranscriptTable,
			Columns: []string{exon.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.transcript_exon = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exon.Create().
//		SetSeqname(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExonUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (ec *ExonCreate) OnConflict(opts ...sql.ConflictOption) *ExonUpsertOne {
	ec.conflict = opts
	return &ExonUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *ExonCreate) OnConflictColumns(columns ...string) *ExonUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &ExonUpsertOne{
		create: ec,
	}
}

type (
	// ExonUpsertOne is the builder for "upsert"-ing
	//  one Exon node.
	ExonUpsertOne struct {
		create *ExonCreate
	}

	// ExonUpsert is the "OnConflict" setter.
	ExonUpsert struct {
		*sql.UpdateSet
	}
)

// SetSeqname sets the "seqname" field.
func (u *ExonUpsert) SetSeqname(v string) *ExonUpsert {
	u.Set(exon.FieldSeqname, v)
	return u
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *ExonUpsert) UpdateSeqname() *ExonUpsert {
	u.SetExcluded(exon.FieldSeqname)
	return u
}

// SetStart sets the "start" field.
func (u *ExonUpsert) SetStart(v int32) *ExonUpsert {
	u.Set(exon.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ExonUpsert) UpdateStart() *ExonUpsert {
	u.SetExcluded(exon.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *ExonUpsert) AddStart(v int32) *ExonUpsert {
	u.Add(exon.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *ExonUpsert) SetEnd(v int32) *ExonUpsert {
	u.Set(exon.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *ExonUpsert) UpdateEnd() *ExonUpsert {
	u.SetExcluded(exon.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *ExonUpsert) AddEnd(v int32) *ExonUpsert {
	u.Add(exon.FieldEnd, v)
	return u
}

// SetStrand sets the "strand" field.
func (u *ExonUpsert) SetStrand(v string) *ExonUpsert {
	u.Set(exon.FieldStrand, v)
	return u
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *ExonUpsert) UpdateStrand() *ExonUpsert {
	u.SetExcluded(exon.FieldStrand)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Exon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExonUpsertOne) UpdateNewValues() *ExonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exon.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExonUpsertOne) Ignore() *ExonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExonUpsertOne) DoNothing() *ExonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExonCreate.OnConflict
// documentation for more info.
func (u *ExonUpsertOne) Update(set func(*ExonUpsert)) *ExonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExonUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *ExonUpsertOne) SetSeqname(v string) *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *ExonUpsertOne) UpdateSeqname() *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.UpdateSeqname()
	})
}

// SetStart sets the "start" field.
func (u *ExonUpsertOne) SetStart(v int32) *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *ExonUpsertOne) AddStart(v int32) *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ExonUpsertOne) UpdateStart() *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *ExonUpsertOne) SetEnd(v int32) *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *ExonUpsertOne) AddEnd(v int32) *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *ExonUpsertOne) UpdateEnd() *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.UpdateEnd()
	})
}

// SetStrand sets the "strand" field.
func (u *ExonUpsertOne) SetStrand(v string) *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *ExonUpsertOne) UpdateStrand() *ExonUpsertOne {
	return u.Update(func(s *ExonUpsert) {
		s.UpdateStrand()
	})
}

// Exec executes the query.
func (u *ExonUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExonCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExonUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExonUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExonUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExonCreateBulk is the builder for creating many Exon entities in bulk.
type ExonCreateBulk struct {
	config
	builders []*ExonCreate
	conflict []sql.ConflictOption
}

// Save creates the Exon entities in the database.
func (ecb *ExonCreateBulk) Save(ctx context.Context) ([]*Exon, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exon, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExonCreateBulk) SaveX(ctx context.Context) []*Exon {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExonCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExonCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExonUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (ecb *ExonCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExonUpsertBulk {
	ecb.conflict = opts
	return &ExonUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *ExonCreateBulk) OnConflictColumns(columns ...string) *ExonUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &ExonUpsertBulk{
		create: ecb,
	}
}

// ExonUpsertBulk is the builder for "upsert"-ing
// a bulk of Exon nodes.
type ExonUpsertBulk struct {
	create *ExonCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Exon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExonUpsertBulk) UpdateNewValues() *ExonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExonUpsertBulk) Ignore() *ExonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExonUpsertBulk) DoNothing() *ExonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExonCreateBulk.OnConflict
// documentation for more info.
func (u *ExonUpsertBulk) Update(set func(*ExonUpsert)) *ExonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExonUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *ExonUpsertBulk) SetSeqname(v string) *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *ExonUpsertBulk) UpdateSeqname() *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.UpdateSeqname()
	})
}

// SetStart sets the "start" field.
func (u *ExonUpsertBulk) SetStart(v int32) *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *ExonUpsertBulk) AddStart(v int32) *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *ExonUpsertBulk) UpdateStart() *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *ExonUpsertBulk) SetEnd(v int32) *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *ExonUpsertBulk) AddEnd(v int32) *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *ExonUpsertBulk) UpdateEnd() *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.UpdateEnd()
	})
}

// SetStrand sets the "strand" field.
func (u *ExonUpsertBulk) SetStrand(v string) *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *ExonUpsertBulk) UpdateStrand() *ExonUpsertBulk {
	return u.Update(func(s *ExonUpsert) {
		s.UpdateStrand()
	})
}

// Exec executes the query.
func (u *ExonUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExonCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExonCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExonUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
