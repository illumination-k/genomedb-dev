// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"genomedb/ent/predicate"
	"genomedb/ent/threeprimeutr"
	"genomedb/ent/transcript"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreePrimeUtrQuery is the builder for querying ThreePrimeUtr entities.
type ThreePrimeUtrQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	predicates     []predicate.ThreePrimeUtr
	withTranscript *TranscriptQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ThreePrimeUtrQuery builder.
func (tpuq *ThreePrimeUtrQuery) Where(ps ...predicate.ThreePrimeUtr) *ThreePrimeUtrQuery {
	tpuq.predicates = append(tpuq.predicates, ps...)
	return tpuq
}

// Limit adds a limit step to the query.
func (tpuq *ThreePrimeUtrQuery) Limit(limit int) *ThreePrimeUtrQuery {
	tpuq.limit = &limit
	return tpuq
}

// Offset adds an offset step to the query.
func (tpuq *ThreePrimeUtrQuery) Offset(offset int) *ThreePrimeUtrQuery {
	tpuq.offset = &offset
	return tpuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tpuq *ThreePrimeUtrQuery) Unique(unique bool) *ThreePrimeUtrQuery {
	tpuq.unique = &unique
	return tpuq
}

// Order adds an order step to the query.
func (tpuq *ThreePrimeUtrQuery) Order(o ...OrderFunc) *ThreePrimeUtrQuery {
	tpuq.order = append(tpuq.order, o...)
	return tpuq
}

// QueryTranscript chains the current query on the "transcript" edge.
func (tpuq *ThreePrimeUtrQuery) QueryTranscript() *TranscriptQuery {
	query := &TranscriptQuery{config: tpuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tpuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tpuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threeprimeutr.Table, threeprimeutr.FieldID, selector),
			sqlgraph.To(transcript.Table, transcript.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, threeprimeutr.TranscriptTable, threeprimeutr.TranscriptColumn),
		)
		fromU = sqlgraph.SetNeighbors(tpuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ThreePrimeUtr entity from the query.
// Returns a *NotFoundError when no ThreePrimeUtr was found.
func (tpuq *ThreePrimeUtrQuery) First(ctx context.Context) (*ThreePrimeUtr, error) {
	nodes, err := tpuq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{threeprimeutr.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tpuq *ThreePrimeUtrQuery) FirstX(ctx context.Context) *ThreePrimeUtr {
	node, err := tpuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ThreePrimeUtr ID from the query.
// Returns a *NotFoundError when no ThreePrimeUtr ID was found.
func (tpuq *ThreePrimeUtrQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tpuq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{threeprimeutr.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tpuq *ThreePrimeUtrQuery) FirstIDX(ctx context.Context) int {
	id, err := tpuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ThreePrimeUtr entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ThreePrimeUtr entity is found.
// Returns a *NotFoundError when no ThreePrimeUtr entities are found.
func (tpuq *ThreePrimeUtrQuery) Only(ctx context.Context) (*ThreePrimeUtr, error) {
	nodes, err := tpuq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{threeprimeutr.Label}
	default:
		return nil, &NotSingularError{threeprimeutr.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tpuq *ThreePrimeUtrQuery) OnlyX(ctx context.Context) *ThreePrimeUtr {
	node, err := tpuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ThreePrimeUtr ID in the query.
// Returns a *NotSingularError when more than one ThreePrimeUtr ID is found.
// Returns a *NotFoundError when no entities are found.
func (tpuq *ThreePrimeUtrQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tpuq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{threeprimeutr.Label}
	default:
		err = &NotSingularError{threeprimeutr.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tpuq *ThreePrimeUtrQuery) OnlyIDX(ctx context.Context) int {
	id, err := tpuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ThreePrimeUtrs.
func (tpuq *ThreePrimeUtrQuery) All(ctx context.Context) ([]*ThreePrimeUtr, error) {
	if err := tpuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return tpuq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tpuq *ThreePrimeUtrQuery) AllX(ctx context.Context) []*ThreePrimeUtr {
	nodes, err := tpuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ThreePrimeUtr IDs.
func (tpuq *ThreePrimeUtrQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tpuq.Select(threeprimeutr.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tpuq *ThreePrimeUtrQuery) IDsX(ctx context.Context) []int {
	ids, err := tpuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tpuq *ThreePrimeUtrQuery) Count(ctx context.Context) (int, error) {
	if err := tpuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return tpuq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tpuq *ThreePrimeUtrQuery) CountX(ctx context.Context) int {
	count, err := tpuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tpuq *ThreePrimeUtrQuery) Exist(ctx context.Context) (bool, error) {
	if err := tpuq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return tpuq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tpuq *ThreePrimeUtrQuery) ExistX(ctx context.Context) bool {
	exist, err := tpuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ThreePrimeUtrQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tpuq *ThreePrimeUtrQuery) Clone() *ThreePrimeUtrQuery {
	if tpuq == nil {
		return nil
	}
	return &ThreePrimeUtrQuery{
		config:         tpuq.config,
		limit:          tpuq.limit,
		offset:         tpuq.offset,
		order:          append([]OrderFunc{}, tpuq.order...),
		predicates:     append([]predicate.ThreePrimeUtr{}, tpuq.predicates...),
		withTranscript: tpuq.withTranscript.Clone(),
		// clone intermediate query.
		sql:    tpuq.sql.Clone(),
		path:   tpuq.path,
		unique: tpuq.unique,
	}
}

// WithTranscript tells the query-builder to eager-load the nodes that are connected to
// the "transcript" edge. The optional arguments are used to configure the query builder of the edge.
func (tpuq *ThreePrimeUtrQuery) WithTranscript(opts ...func(*TranscriptQuery)) *ThreePrimeUtrQuery {
	query := &TranscriptQuery{config: tpuq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpuq.withTranscript = query
	return tpuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Seqname string `json:"seqname,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ThreePrimeUtr.Query().
//		GroupBy(threeprimeutr.FieldSeqname).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tpuq *ThreePrimeUtrQuery) GroupBy(field string, fields ...string) *ThreePrimeUtrGroupBy {
	grbuild := &ThreePrimeUtrGroupBy{config: tpuq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := tpuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return tpuq.sqlQuery(ctx), nil
	}
	grbuild.label = threeprimeutr.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Seqname string `json:"seqname,omitempty"`
//	}
//
//	client.ThreePrimeUtr.Query().
//		Select(threeprimeutr.FieldSeqname).
//		Scan(ctx, &v)
func (tpuq *ThreePrimeUtrQuery) Select(fields ...string) *ThreePrimeUtrSelect {
	tpuq.fields = append(tpuq.fields, fields...)
	selbuild := &ThreePrimeUtrSelect{ThreePrimeUtrQuery: tpuq}
	selbuild.label = threeprimeutr.Label
	selbuild.flds, selbuild.scan = &tpuq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ThreePrimeUtrSelect configured with the given aggregations.
func (tpuq *ThreePrimeUtrQuery) Aggregate(fns ...AggregateFunc) *ThreePrimeUtrSelect {
	return tpuq.Select().Aggregate(fns...)
}

func (tpuq *ThreePrimeUtrQuery) prepareQuery(ctx context.Context) error {
	for _, f := range tpuq.fields {
		if !threeprimeutr.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tpuq.path != nil {
		prev, err := tpuq.path(ctx)
		if err != nil {
			return err
		}
		tpuq.sql = prev
	}
	return nil
}

func (tpuq *ThreePrimeUtrQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ThreePrimeUtr, error) {
	var (
		nodes       = []*ThreePrimeUtr{}
		withFKs     = tpuq.withFKs
		_spec       = tpuq.querySpec()
		loadedTypes = [1]bool{
			tpuq.withTranscript != nil,
		}
	)
	if tpuq.withTranscript != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, threeprimeutr.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ThreePrimeUtr).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ThreePrimeUtr{config: tpuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tpuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tpuq.withTranscript; query != nil {
		if err := tpuq.loadTranscript(ctx, query, nodes, nil,
			func(n *ThreePrimeUtr, e *Transcript) { n.Edges.Transcript = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tpuq *ThreePrimeUtrQuery) loadTranscript(ctx context.Context, query *TranscriptQuery, nodes []*ThreePrimeUtr, init func(*ThreePrimeUtr), assign func(*ThreePrimeUtr, *Transcript)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ThreePrimeUtr)
	for i := range nodes {
		if nodes[i].transcript_three_prime_utr == nil {
			continue
		}
		fk := *nodes[i].transcript_three_prime_utr
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(transcript.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "transcript_three_prime_utr" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tpuq *ThreePrimeUtrQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tpuq.querySpec()
	_spec.Node.Columns = tpuq.fields
	if len(tpuq.fields) > 0 {
		_spec.Unique = tpuq.unique != nil && *tpuq.unique
	}
	return sqlgraph.CountNodes(ctx, tpuq.driver, _spec)
}

func (tpuq *ThreePrimeUtrQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := tpuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (tpuq *ThreePrimeUtrQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   threeprimeutr.Table,
			Columns: threeprimeutr.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: threeprimeutr.FieldID,
			},
		},
		From:   tpuq.sql,
		Unique: true,
	}
	if unique := tpuq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := tpuq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threeprimeutr.FieldID)
		for i := range fields {
			if fields[i] != threeprimeutr.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tpuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tpuq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tpuq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tpuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tpuq *ThreePrimeUtrQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tpuq.driver.Dialect())
	t1 := builder.Table(threeprimeutr.Table)
	columns := tpuq.fields
	if len(columns) == 0 {
		columns = threeprimeutr.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tpuq.sql != nil {
		selector = tpuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tpuq.unique != nil && *tpuq.unique {
		selector.Distinct()
	}
	for _, p := range tpuq.predicates {
		p(selector)
	}
	for _, p := range tpuq.order {
		p(selector)
	}
	if offset := tpuq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tpuq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ThreePrimeUtrGroupBy is the group-by builder for ThreePrimeUtr entities.
type ThreePrimeUtrGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tpugb *ThreePrimeUtrGroupBy) Aggregate(fns ...AggregateFunc) *ThreePrimeUtrGroupBy {
	tpugb.fns = append(tpugb.fns, fns...)
	return tpugb
}

// Scan applies the group-by query and scans the result into the given value.
func (tpugb *ThreePrimeUtrGroupBy) Scan(ctx context.Context, v any) error {
	query, err := tpugb.path(ctx)
	if err != nil {
		return err
	}
	tpugb.sql = query
	return tpugb.sqlScan(ctx, v)
}

func (tpugb *ThreePrimeUtrGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range tpugb.fields {
		if !threeprimeutr.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := tpugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tpugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tpugb *ThreePrimeUtrGroupBy) sqlQuery() *sql.Selector {
	selector := tpugb.sql.Select()
	aggregation := make([]string, 0, len(tpugb.fns))
	for _, fn := range tpugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(tpugb.fields)+len(tpugb.fns))
		for _, f := range tpugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(tpugb.fields...)...)
}

// ThreePrimeUtrSelect is the builder for selecting fields of ThreePrimeUtr entities.
type ThreePrimeUtrSelect struct {
	*ThreePrimeUtrQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tpus *ThreePrimeUtrSelect) Aggregate(fns ...AggregateFunc) *ThreePrimeUtrSelect {
	tpus.fns = append(tpus.fns, fns...)
	return tpus
}

// Scan applies the selector query and scans the result into the given value.
func (tpus *ThreePrimeUtrSelect) Scan(ctx context.Context, v any) error {
	if err := tpus.prepareQuery(ctx); err != nil {
		return err
	}
	tpus.sql = tpus.ThreePrimeUtrQuery.sqlQuery(ctx)
	return tpus.sqlScan(ctx, v)
}

func (tpus *ThreePrimeUtrSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(tpus.fns))
	for _, fn := range tpus.fns {
		aggregation = append(aggregation, fn(tpus.sql))
	}
	switch n := len(*tpus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		tpus.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		tpus.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := tpus.sql.Query()
	if err := tpus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
