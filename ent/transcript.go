// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"genomedb/ent/transcript"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Transcript is the model entity for the Transcript schema.
type Transcript struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Gene holds the value of the "gene" field.
	Gene string `json:"gene,omitempty"`
	// Mrna holds the value of the "mrna" field.
	Mrna string `json:"mrna,omitempty"`
	// Cds holds the value of the "cds" field.
	Cds string `json:"cds,omitempty"`
	// Protein holds the value of the "protein" field.
	Protein string `json:"protein,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transcript) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transcript.FieldID, transcript.FieldGene, transcript.FieldMrna, transcript.FieldCds, transcript.FieldProtein:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transcript", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transcript fields.
func (t *Transcript) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transcript.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case transcript.FieldGene:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gene", values[i])
			} else if value.Valid {
				t.Gene = value.String
			}
		case transcript.FieldMrna:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mrna", values[i])
			} else if value.Valid {
				t.Mrna = value.String
			}
		case transcript.FieldCds:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cds", values[i])
			} else if value.Valid {
				t.Cds = value.String
			}
		case transcript.FieldProtein:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protein", values[i])
			} else if value.Valid {
				t.Protein = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Transcript.
// Note that you need to call Transcript.Unwrap() before calling this method if this Transcript
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transcript) Update() *TranscriptUpdateOne {
	return (&TranscriptClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transcript entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transcript) Unwrap() *Transcript {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transcript is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transcript) String() string {
	var builder strings.Builder
	builder.WriteString("Transcript(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("gene=")
	builder.WriteString(t.Gene)
	builder.WriteString(", ")
	builder.WriteString("mrna=")
	builder.WriteString(t.Mrna)
	builder.WriteString(", ")
	builder.WriteString("cds=")
	builder.WriteString(t.Cds)
	builder.WriteString(", ")
	builder.WriteString("protein=")
	builder.WriteString(t.Protein)
	builder.WriteByte(')')
	return builder.String()
}

// Transcripts is a parsable slice of Transcript.
type Transcripts []*Transcript

func (t Transcripts) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
