// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/fiveprimeutr"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FivePrimeUtrCreate is the builder for creating a FivePrimeUtr entity.
type FivePrimeUtrCreate struct {
	config
	mutation *FivePrimeUtrMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSeqname sets the "seqname" field.
func (fpuc *FivePrimeUtrCreate) SetSeqname(s string) *FivePrimeUtrCreate {
	fpuc.mutation.SetSeqname(s)
	return fpuc
}

// SetStart sets the "start" field.
func (fpuc *FivePrimeUtrCreate) SetStart(i int32) *FivePrimeUtrCreate {
	fpuc.mutation.SetStart(i)
	return fpuc
}

// SetEnd sets the "end" field.
func (fpuc *FivePrimeUtrCreate) SetEnd(i int32) *FivePrimeUtrCreate {
	fpuc.mutation.SetEnd(i)
	return fpuc
}

// SetStrand sets the "strand" field.
func (fpuc *FivePrimeUtrCreate) SetStrand(s string) *FivePrimeUtrCreate {
	fpuc.mutation.SetStrand(s)
	return fpuc
}

// SetTranscriptID sets the "transcript" edge to the Transcript entity by ID.
func (fpuc *FivePrimeUtrCreate) SetTranscriptID(id string) *FivePrimeUtrCreate {
	fpuc.mutation.SetTranscriptID(id)
	return fpuc
}

// SetNillableTranscriptID sets the "transcript" edge to the Transcript entity by ID if the given value is not nil.
func (fpuc *FivePrimeUtrCreate) SetNillableTranscriptID(id *string) *FivePrimeUtrCreate {
	if id != nil {
		fpuc = fpuc.SetTranscriptID(*id)
	}
	return fpuc
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (fpuc *FivePrimeUtrCreate) SetTranscript(t *Transcript) *FivePrimeUtrCreate {
	return fpuc.SetTranscriptID(t.ID)
}

// Mutation returns the FivePrimeUtrMutation object of the builder.
func (fpuc *FivePrimeUtrCreate) Mutation() *FivePrimeUtrMutation {
	return fpuc.mutation
}

// Save creates the FivePrimeUtr in the database.
func (fpuc *FivePrimeUtrCreate) Save(ctx context.Context) (*FivePrimeUtr, error) {
	var (
		err  error
		node *FivePrimeUtr
	)
	if len(fpuc.hooks) == 0 {
		if err = fpuc.check(); err != nil {
			return nil, err
		}
		node, err = fpuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FivePrimeUtrMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fpuc.check(); err != nil {
				return nil, err
			}
			fpuc.mutation = mutation
			if node, err = fpuc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fpuc.hooks) - 1; i >= 0; i-- {
			if fpuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fpuc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fpuc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FivePrimeUtr)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FivePrimeUtrMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fpuc *FivePrimeUtrCreate) SaveX(ctx context.Context) *FivePrimeUtr {
	v, err := fpuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fpuc *FivePrimeUtrCreate) Exec(ctx context.Context) error {
	_, err := fpuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpuc *FivePrimeUtrCreate) ExecX(ctx context.Context) {
	if err := fpuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpuc *FivePrimeUtrCreate) check() error {
	if _, ok := fpuc.mutation.Seqname(); !ok {
		return &ValidationError{Name: "seqname", err: errors.New(`ent: missing required field "FivePrimeUtr.seqname"`)}
	}
	if _, ok := fpuc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "FivePrimeUtr.start"`)}
	}
	if v, ok := fpuc.mutation.Start(); ok {
		if err := fiveprimeutr.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "FivePrimeUtr.start": %w`, err)}
		}
	}
	if _, ok := fpuc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "FivePrimeUtr.end"`)}
	}
	if v, ok := fpuc.mutation.End(); ok {
		if err := fiveprimeutr.EndValidator(v); err != nil {
			return &ValidationError{Name: "end", err: fmt.Errorf(`ent: validator failed for field "FivePrimeUtr.end": %w`, err)}
		}
	}
	if _, ok := fpuc.mutation.Strand(); !ok {
		return &ValidationError{Name: "strand", err: errors.New(`ent: missing required field "FivePrimeUtr.strand"`)}
	}
	return nil
}

func (fpuc *FivePrimeUtrCreate) sqlSave(ctx context.Context) (*FivePrimeUtr, error) {
	_node, _spec := fpuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fpuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fpuc *FivePrimeUtrCreate) createSpec() (*FivePrimeUtr, *sqlgraph.CreateSpec) {
	var (
		_node = &FivePrimeUtr{config: fpuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fiveprimeutr.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fiveprimeutr.FieldID,
			},
		}
	)
	_spec.OnConflict = fpuc.conflict
	if value, ok := fpuc.mutation.Seqname(); ok {
		_spec.SetField(fiveprimeutr.FieldSeqname, field.TypeString, value)
		_node.Seqname = value
	}
	if value, ok := fpuc.mutation.Start(); ok {
		_spec.SetField(fiveprimeutr.FieldStart, field.TypeInt32, value)
		_node.Start = value
	}
	if value, ok := fpuc.mutation.End(); ok {
		_spec.SetField(fiveprimeutr.FieldEnd, field.TypeInt32, value)
		_node.End = value
	}
	if value, ok := fpuc.mutation.Strand(); ok {
		_spec.SetField(fiveprimeutr.FieldStrand, field.TypeString, value)
		_node.Strand = value
	}
	if nodes := fpuc.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fiveprimeutr.TranscriptTable,
			Columns: []string{fiveprimeutr.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.transcript_five_prime_utr = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FivePrimeUtr.Create().
//		SetSeqname(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FivePrimeUtrUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (fpuc *FivePrimeUtrCreate) OnConflict(opts ...sql.ConflictOption) *FivePrimeUtrUpsertOne {
	fpuc.conflict = opts
	return &FivePrimeUtrUpsertOne{
		create: fpuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FivePrimeUtr.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fpuc *FivePrimeUtrCreate) OnConflictColumns(columns ...string) *FivePrimeUtrUpsertOne {
	fpuc.conflict = append(fpuc.conflict, sql.ConflictColumns(columns...))
	return &FivePrimeUtrUpsertOne{
		create: fpuc,
	}
}

type (
	// FivePrimeUtrUpsertOne is the builder for "upsert"-ing
	//  one FivePrimeUtr node.
	FivePrimeUtrUpsertOne struct {
		create *FivePrimeUtrCreate
	}

	// FivePrimeUtrUpsert is the "OnConflict" setter.
	FivePrimeUtrUpsert struct {
		*sql.UpdateSet
	}
)

// SetSeqname sets the "seqname" field.
func (u *FivePrimeUtrUpsert) SetSeqname(v string) *FivePrimeUtrUpsert {
	u.Set(fiveprimeutr.FieldSeqname, v)
	return u
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *FivePrimeUtrUpsert) UpdateSeqname() *FivePrimeUtrUpsert {
	u.SetExcluded(fiveprimeutr.FieldSeqname)
	return u
}

// SetStart sets the "start" field.
func (u *FivePrimeUtrUpsert) SetStart(v int32) *FivePrimeUtrUpsert {
	u.Set(fiveprimeutr.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *FivePrimeUtrUpsert) UpdateStart() *FivePrimeUtrUpsert {
	u.SetExcluded(fiveprimeutr.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *FivePrimeUtrUpsert) AddStart(v int32) *FivePrimeUtrUpsert {
	u.Add(fiveprimeutr.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *FivePrimeUtrUpsert) SetEnd(v int32) *FivePrimeUtrUpsert {
	u.Set(fiveprimeutr.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *FivePrimeUtrUpsert) UpdateEnd() *FivePrimeUtrUpsert {
	u.SetExcluded(fiveprimeutr.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *FivePrimeUtrUpsert) AddEnd(v int32) *FivePrimeUtrUpsert {
	u.Add(fiveprimeutr.FieldEnd, v)
	return u
}

// SetStrand sets the "strand" field.
func (u *FivePrimeUtrUpsert) SetStrand(v string) *FivePrimeUtrUpsert {
	u.Set(fiveprimeutr.FieldStrand, v)
	return u
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *FivePrimeUtrUpsert) UpdateStrand() *FivePrimeUtrUpsert {
	u.SetExcluded(fiveprimeutr.FieldStrand)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FivePrimeUtr.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FivePrimeUtrUpsertOne) UpdateNewValues() *FivePrimeUtrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FivePrimeUtr.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FivePrimeUtrUpsertOne) Ignore() *FivePrimeUtrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FivePrimeUtrUpsertOne) DoNothing() *FivePrimeUtrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FivePrimeUtrCreate.OnConflict
// documentation for more info.
func (u *FivePrimeUtrUpsertOne) Update(set func(*FivePrimeUtrUpsert)) *FivePrimeUtrUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FivePrimeUtrUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *FivePrimeUtrUpsertOne) SetSeqname(v string) *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *FivePrimeUtrUpsertOne) UpdateSeqname() *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.UpdateSeqname()
	})
}

// SetStart sets the "start" field.
func (u *FivePrimeUtrUpsertOne) SetStart(v int32) *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *FivePrimeUtrUpsertOne) AddStart(v int32) *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *FivePrimeUtrUpsertOne) UpdateStart() *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *FivePrimeUtrUpsertOne) SetEnd(v int32) *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *FivePrimeUtrUpsertOne) AddEnd(v int32) *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *FivePrimeUtrUpsertOne) UpdateEnd() *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.UpdateEnd()
	})
}

// SetStrand sets the "strand" field.
func (u *FivePrimeUtrUpsertOne) SetStrand(v string) *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *FivePrimeUtrUpsertOne) UpdateStrand() *FivePrimeUtrUpsertOne {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.UpdateStrand()
	})
}

// Exec executes the query.
func (u *FivePrimeUtrUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FivePrimeUtrCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FivePrimeUtrUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FivePrimeUtrUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FivePrimeUtrUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FivePrimeUtrCreateBulk is the builder for creating many FivePrimeUtr entities in bulk.
type FivePrimeUtrCreateBulk struct {
	config
	builders []*FivePrimeUtrCreate
	conflict []sql.ConflictOption
}

// Save creates the FivePrimeUtr entities in the database.
func (fpucb *FivePrimeUtrCreateBulk) Save(ctx context.Context) ([]*FivePrimeUtr, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fpucb.builders))
	nodes := make([]*FivePrimeUtr, len(fpucb.builders))
	mutators := make([]Mutator, len(fpucb.builders))
	for i := range fpucb.builders {
		func(i int, root context.Context) {
			builder := fpucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FivePrimeUtrMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fpucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fpucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fpucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fpucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fpucb *FivePrimeUtrCreateBulk) SaveX(ctx context.Context) []*FivePrimeUtr {
	v, err := fpucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fpucb *FivePrimeUtrCreateBulk) Exec(ctx context.Context) error {
	_, err := fpucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpucb *FivePrimeUtrCreateBulk) ExecX(ctx context.Context) {
	if err := fpucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FivePrimeUtr.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FivePrimeUtrUpsert) {
//			SetSeqname(v+v).
//		}).
//		Exec(ctx)
func (fpucb *FivePrimeUtrCreateBulk) OnConflict(opts ...sql.ConflictOption) *FivePrimeUtrUpsertBulk {
	fpucb.conflict = opts
	return &FivePrimeUtrUpsertBulk{
		create: fpucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FivePrimeUtr.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fpucb *FivePrimeUtrCreateBulk) OnConflictColumns(columns ...string) *FivePrimeUtrUpsertBulk {
	fpucb.conflict = append(fpucb.conflict, sql.ConflictColumns(columns...))
	return &FivePrimeUtrUpsertBulk{
		create: fpucb,
	}
}

// FivePrimeUtrUpsertBulk is the builder for "upsert"-ing
// a bulk of FivePrimeUtr nodes.
type FivePrimeUtrUpsertBulk struct {
	create *FivePrimeUtrCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FivePrimeUtr.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FivePrimeUtrUpsertBulk) UpdateNewValues() *FivePrimeUtrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FivePrimeUtr.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FivePrimeUtrUpsertBulk) Ignore() *FivePrimeUtrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FivePrimeUtrUpsertBulk) DoNothing() *FivePrimeUtrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FivePrimeUtrCreateBulk.OnConflict
// documentation for more info.
func (u *FivePrimeUtrUpsertBulk) Update(set func(*FivePrimeUtrUpsert)) *FivePrimeUtrUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FivePrimeUtrUpsert{UpdateSet: update})
	}))
	return u
}

// SetSeqname sets the "seqname" field.
func (u *FivePrimeUtrUpsertBulk) SetSeqname(v string) *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.SetSeqname(v)
	})
}

// UpdateSeqname sets the "seqname" field to the value that was provided on create.
func (u *FivePrimeUtrUpsertBulk) UpdateSeqname() *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.UpdateSeqname()
	})
}

// SetStart sets the "start" field.
func (u *FivePrimeUtrUpsertBulk) SetStart(v int32) *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *FivePrimeUtrUpsertBulk) AddStart(v int32) *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *FivePrimeUtrUpsertBulk) UpdateStart() *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *FivePrimeUtrUpsertBulk) SetEnd(v int32) *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *FivePrimeUtrUpsertBulk) AddEnd(v int32) *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *FivePrimeUtrUpsertBulk) UpdateEnd() *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.UpdateEnd()
	})
}

// SetStrand sets the "strand" field.
func (u *FivePrimeUtrUpsertBulk) SetStrand(v string) *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.SetStrand(v)
	})
}

// UpdateStrand sets the "strand" field to the value that was provided on create.
func (u *FivePrimeUtrUpsertBulk) UpdateStrand() *FivePrimeUtrUpsertBulk {
	return u.Update(func(s *FivePrimeUtrUpsert) {
		s.UpdateStrand()
	})
}

// Exec executes the query.
func (u *FivePrimeUtrUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FivePrimeUtrCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FivePrimeUtrCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FivePrimeUtrUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
