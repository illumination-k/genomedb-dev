// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "genomedb/ent"
	cds "genomedb/ent/cds"
	exon "genomedb/ent/exon"
	fiveprimeutr "genomedb/ent/fiveprimeutr"
	gene "genomedb/ent/gene"
	threeprimeutr "genomedb/ent/threeprimeutr"
	transcript "genomedb/ent/transcript"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// TranscriptService implements TranscriptServiceServer
type TranscriptService struct {
	client *ent.Client
	UnimplementedTranscriptServiceServer
}

// NewTranscriptService returns a new TranscriptService
func NewTranscriptService(client *ent.Client) *TranscriptService {
	return &TranscriptService{
		client: client,
	}
}

// toProtoTranscript transforms the ent type to the pb type
func toProtoTranscript(e *ent.Transcript) (*Transcript, error) {
	v := &Transcript{}
	cds_seq := e.CdsSeq
	v.CdsSeq = cds_seq
	genome_seq := e.GenomeSeq
	v.GenomeSeq = genome_seq
	id := e.ID
	v.Id = id
	protein_seq := e.ProteinSeq
	v.ProteinSeq = protein_seq
	strand := e.Strand
	v.Strand = strand
	transcript_seq := e.TranscriptSeq
	v.TranscriptSeq = transcript_seq
	_type := e.Type
	v.Type = _type
	for _, edg := range e.Edges.Cds {
		id := int64(edg.ID)
		v.Cds = append(v.Cds, &Cds{
			Id: id,
		})
	}
	for _, edg := range e.Edges.Exon {
		id := int64(edg.ID)
		v.Exon = append(v.Exon, &Exon{
			Id: id,
		})
	}
	for _, edg := range e.Edges.FivePrimeUtr {
		id := int64(edg.ID)
		v.FivePrimeUtr = append(v.FivePrimeUtr, &FivePrimeUtr{
			Id: id,
		})
	}
	if edg := e.Edges.Gene; edg != nil {
		id := edg.ID
		v.Gene = &Gene{
			Id: id,
		}
	}
	for _, edg := range e.Edges.ThreePrimeUtr {
		id := int64(edg.ID)
		v.ThreePrimeUtr = append(v.ThreePrimeUtr, &ThreePrimeUtr{
			Id: id,
		})
	}
	return v, nil
}

// toProtoTranscriptList transforms a list of ent type to a list of pb type
func toProtoTranscriptList(e []*ent.Transcript) ([]*Transcript, error) {
	var pbList []*Transcript
	for _, entEntity := range e {
		pbEntity, err := toProtoTranscript(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements TranscriptServiceServer.Create
func (svc *TranscriptService) Create(ctx context.Context, req *CreateTranscriptRequest) (*Transcript, error) {
	transcript := req.GetTranscript()
	m, err := svc.createBuilder(transcript)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTranscript(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements TranscriptServiceServer.Get
func (svc *TranscriptService) Get(ctx context.Context, req *GetTranscriptRequest) (*Transcript, error) {
	var (
		err error
		get *ent.Transcript
	)
	id := req.GetId()
	switch req.GetView() {
	case GetTranscriptRequest_VIEW_UNSPECIFIED, GetTranscriptRequest_BASIC:
		get, err = svc.client.Transcript.Get(ctx, id)
	case GetTranscriptRequest_WITH_EDGE_IDS:
		get, err = svc.client.Transcript.Query().
			Where(transcript.ID(id)).
			WithCds(func(query *ent.CdsQuery) {
				query.Select(cds.FieldID)
			}).
			WithExon(func(query *ent.ExonQuery) {
				query.Select(exon.FieldID)
			}).
			WithFivePrimeUtr(func(query *ent.FivePrimeUtrQuery) {
				query.Select(fiveprimeutr.FieldID)
			}).
			WithGene(func(query *ent.GeneQuery) {
				query.Select(gene.FieldID)
			}).
			WithThreePrimeUtr(func(query *ent.ThreePrimeUtrQuery) {
				query.Select(threeprimeutr.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoTranscript(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements TranscriptServiceServer.Update
func (svc *TranscriptService) Update(ctx context.Context, req *UpdateTranscriptRequest) (*Transcript, error) {
	transcript := req.GetTranscript()
	transcriptID := transcript.GetId()
	m := svc.client.Transcript.UpdateOneID(transcriptID)
	transcriptCdsSeq := transcript.GetCdsSeq()
	m.SetCdsSeq(transcriptCdsSeq)
	transcriptGenomeSeq := transcript.GetGenomeSeq()
	m.SetGenomeSeq(transcriptGenomeSeq)
	transcriptProteinSeq := transcript.GetProteinSeq()
	m.SetProteinSeq(transcriptProteinSeq)
	transcriptStrand := transcript.GetStrand()
	m.SetStrand(transcriptStrand)
	transcriptTranscriptSeq := transcript.GetTranscriptSeq()
	m.SetTranscriptSeq(transcriptTranscriptSeq)
	transcriptType := transcript.GetType()
	m.SetType(transcriptType)
	for _, item := range transcript.GetCds() {
		cds := int(item.GetId())
		m.AddCdIDs(cds)
	}
	for _, item := range transcript.GetExon() {
		exon := int(item.GetId())
		m.AddExonIDs(exon)
	}
	for _, item := range transcript.GetFivePrimeUtr() {
		fiveprimeutr := int(item.GetId())
		m.AddFivePrimeUtrIDs(fiveprimeutr)
	}
	if transcript.GetGene() != nil {
		transcriptGene := transcript.GetGene().GetId()
		m.SetGeneID(transcriptGene)
	}
	for _, item := range transcript.GetThreePrimeUtr() {
		threeprimeutr := int(item.GetId())
		m.AddThreePrimeUtrIDs(threeprimeutr)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTranscript(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements TranscriptServiceServer.Delete
func (svc *TranscriptService) Delete(ctx context.Context, req *DeleteTranscriptRequest) (*empty.Empty, error) {
	var err error
	id := req.GetId()
	err = svc.client.Transcript.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements TranscriptServiceServer.List
func (svc *TranscriptService) List(ctx context.Context, req *ListTranscriptRequest) (*ListTranscriptResponse, error) {
	var (
		err      error
		entList  []*ent.Transcript
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Transcript.Query().
		Order(ent.Desc(transcript.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := string(bytes)
		listQuery = listQuery.
			Where(transcript.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListTranscriptRequest_VIEW_UNSPECIFIED, ListTranscriptRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListTranscriptRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithCds(func(query *ent.CdsQuery) {
				query.Select(cds.FieldID)
			}).
			WithExon(func(query *ent.ExonQuery) {
				query.Select(exon.FieldID)
			}).
			WithFivePrimeUtr(func(query *ent.FivePrimeUtrQuery) {
				query.Select(fiveprimeutr.FieldID)
			}).
			WithGene(func(query *ent.GeneQuery) {
				query.Select(gene.FieldID)
			}).
			WithThreePrimeUtr(func(query *ent.ThreePrimeUtrQuery) {
				query.Select(threeprimeutr.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoTranscriptList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListTranscriptResponse{
			TranscriptList: protoList,
			NextPageToken:  nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements TranscriptServiceServer.BatchCreate
func (svc *TranscriptService) BatchCreate(ctx context.Context, req *BatchCreateTranscriptsRequest) (*BatchCreateTranscriptsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.TranscriptCreate, len(requests))
	for i, req := range requests {
		transcript := req.GetTranscript()
		var err error
		bulk[i], err = svc.createBuilder(transcript)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Transcript.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoTranscriptList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateTranscriptsResponse{
			Transcripts: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *TranscriptService) createBuilder(transcript *Transcript) (*ent.TranscriptCreate, error) {
	m := svc.client.Transcript.Create()
	transcriptCdsSeq := transcript.GetCdsSeq()
	m.SetCdsSeq(transcriptCdsSeq)
	transcriptGenomeSeq := transcript.GetGenomeSeq()
	m.SetGenomeSeq(transcriptGenomeSeq)
	transcriptProteinSeq := transcript.GetProteinSeq()
	m.SetProteinSeq(transcriptProteinSeq)
	transcriptStrand := transcript.GetStrand()
	m.SetStrand(transcriptStrand)
	transcriptTranscriptSeq := transcript.GetTranscriptSeq()
	m.SetTranscriptSeq(transcriptTranscriptSeq)
	transcriptType := transcript.GetType()
	m.SetType(transcriptType)
	for _, item := range transcript.GetCds() {
		cds := int(item.GetId())
		m.AddCdIDs(cds)
	}
	for _, item := range transcript.GetExon() {
		exon := int(item.GetId())
		m.AddExonIDs(exon)
	}
	for _, item := range transcript.GetFivePrimeUtr() {
		fiveprimeutr := int(item.GetId())
		m.AddFivePrimeUtrIDs(fiveprimeutr)
	}
	if transcript.GetGene() != nil {
		transcriptGene := transcript.GetGene().GetId()
		m.SetGeneID(transcriptGene)
	}
	for _, item := range transcript.GetThreePrimeUtr() {
		threeprimeutr := int(item.GetId())
		m.AddThreePrimeUtrIDs(threeprimeutr)
	}
	return m, nil
}
