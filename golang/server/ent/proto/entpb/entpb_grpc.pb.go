// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: entpb/entpb.proto

package entpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeneServiceClient is the client API for GeneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneServiceClient interface {
	Create(ctx context.Context, in *CreateGeneRequest, opts ...grpc.CallOption) (*Gene, error)
	Get(ctx context.Context, in *GetGeneRequest, opts ...grpc.CallOption) (*Gene, error)
	Update(ctx context.Context, in *UpdateGeneRequest, opts ...grpc.CallOption) (*Gene, error)
	Delete(ctx context.Context, in *DeleteGeneRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ListGeneRequest, opts ...grpc.CallOption) (*ListGeneResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateGenesRequest, opts ...grpc.CallOption) (*BatchCreateGenesResponse, error)
}

type geneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneServiceClient(cc grpc.ClientConnInterface) GeneServiceClient {
	return &geneServiceClient{cc}
}

func (c *geneServiceClient) Create(ctx context.Context, in *CreateGeneRequest, opts ...grpc.CallOption) (*Gene, error) {
	out := new(Gene)
	err := c.cc.Invoke(ctx, "/entpb.GeneService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneServiceClient) Get(ctx context.Context, in *GetGeneRequest, opts ...grpc.CallOption) (*Gene, error) {
	out := new(Gene)
	err := c.cc.Invoke(ctx, "/entpb.GeneService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneServiceClient) Update(ctx context.Context, in *UpdateGeneRequest, opts ...grpc.CallOption) (*Gene, error) {
	out := new(Gene)
	err := c.cc.Invoke(ctx, "/entpb.GeneService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneServiceClient) Delete(ctx context.Context, in *DeleteGeneRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.GeneService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneServiceClient) List(ctx context.Context, in *ListGeneRequest, opts ...grpc.CallOption) (*ListGeneResponse, error) {
	out := new(ListGeneResponse)
	err := c.cc.Invoke(ctx, "/entpb.GeneService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geneServiceClient) BatchCreate(ctx context.Context, in *BatchCreateGenesRequest, opts ...grpc.CallOption) (*BatchCreateGenesResponse, error) {
	out := new(BatchCreateGenesResponse)
	err := c.cc.Invoke(ctx, "/entpb.GeneService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneServiceServer is the server API for GeneService service.
// All implementations must embed UnimplementedGeneServiceServer
// for forward compatibility
type GeneServiceServer interface {
	Create(context.Context, *CreateGeneRequest) (*Gene, error)
	Get(context.Context, *GetGeneRequest) (*Gene, error)
	Update(context.Context, *UpdateGeneRequest) (*Gene, error)
	Delete(context.Context, *DeleteGeneRequest) (*empty.Empty, error)
	List(context.Context, *ListGeneRequest) (*ListGeneResponse, error)
	BatchCreate(context.Context, *BatchCreateGenesRequest) (*BatchCreateGenesResponse, error)
	mustEmbedUnimplementedGeneServiceServer()
}

// UnimplementedGeneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeneServiceServer struct {
}

func (UnimplementedGeneServiceServer) Create(context.Context, *CreateGeneRequest) (*Gene, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGeneServiceServer) Get(context.Context, *GetGeneRequest) (*Gene, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGeneServiceServer) Update(context.Context, *UpdateGeneRequest) (*Gene, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGeneServiceServer) Delete(context.Context, *DeleteGeneRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGeneServiceServer) List(context.Context, *ListGeneRequest) (*ListGeneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGeneServiceServer) BatchCreate(context.Context, *BatchCreateGenesRequest) (*BatchCreateGenesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedGeneServiceServer) mustEmbedUnimplementedGeneServiceServer() {}

// UnsafeGeneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneServiceServer will
// result in compilation errors.
type UnsafeGeneServiceServer interface {
	mustEmbedUnimplementedGeneServiceServer()
}

func RegisterGeneServiceServer(s grpc.ServiceRegistrar, srv GeneServiceServer) {
	s.RegisterService(&GeneService_ServiceDesc, srv)
}

func _GeneService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGeneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GeneService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneServiceServer).Create(ctx, req.(*CreateGeneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GeneService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneServiceServer).Get(ctx, req.(*GetGeneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGeneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GeneService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneServiceServer).Update(ctx, req.(*UpdateGeneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGeneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GeneService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneServiceServer).Delete(ctx, req.(*DeleteGeneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGeneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GeneService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneServiceServer).List(ctx, req.(*ListGeneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateGenesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GeneService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneServiceServer).BatchCreate(ctx, req.(*BatchCreateGenesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneService_ServiceDesc is the grpc.ServiceDesc for GeneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.GeneService",
	HandlerType: (*GeneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GeneService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GeneService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GeneService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GeneService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GeneService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _GeneService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// GenomeServiceClient is the client API for GenomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenomeServiceClient interface {
	Create(ctx context.Context, in *CreateGenomeRequest, opts ...grpc.CallOption) (*Genome, error)
	Get(ctx context.Context, in *GetGenomeRequest, opts ...grpc.CallOption) (*Genome, error)
	Update(ctx context.Context, in *UpdateGenomeRequest, opts ...grpc.CallOption) (*Genome, error)
	Delete(ctx context.Context, in *DeleteGenomeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ListGenomeRequest, opts ...grpc.CallOption) (*ListGenomeResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateGenomesRequest, opts ...grpc.CallOption) (*BatchCreateGenomesResponse, error)
}

type genomeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenomeServiceClient(cc grpc.ClientConnInterface) GenomeServiceClient {
	return &genomeServiceClient{cc}
}

func (c *genomeServiceClient) Create(ctx context.Context, in *CreateGenomeRequest, opts ...grpc.CallOption) (*Genome, error) {
	out := new(Genome)
	err := c.cc.Invoke(ctx, "/entpb.GenomeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genomeServiceClient) Get(ctx context.Context, in *GetGenomeRequest, opts ...grpc.CallOption) (*Genome, error) {
	out := new(Genome)
	err := c.cc.Invoke(ctx, "/entpb.GenomeService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genomeServiceClient) Update(ctx context.Context, in *UpdateGenomeRequest, opts ...grpc.CallOption) (*Genome, error) {
	out := new(Genome)
	err := c.cc.Invoke(ctx, "/entpb.GenomeService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genomeServiceClient) Delete(ctx context.Context, in *DeleteGenomeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.GenomeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genomeServiceClient) List(ctx context.Context, in *ListGenomeRequest, opts ...grpc.CallOption) (*ListGenomeResponse, error) {
	out := new(ListGenomeResponse)
	err := c.cc.Invoke(ctx, "/entpb.GenomeService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genomeServiceClient) BatchCreate(ctx context.Context, in *BatchCreateGenomesRequest, opts ...grpc.CallOption) (*BatchCreateGenomesResponse, error) {
	out := new(BatchCreateGenomesResponse)
	err := c.cc.Invoke(ctx, "/entpb.GenomeService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenomeServiceServer is the server API for GenomeService service.
// All implementations must embed UnimplementedGenomeServiceServer
// for forward compatibility
type GenomeServiceServer interface {
	Create(context.Context, *CreateGenomeRequest) (*Genome, error)
	Get(context.Context, *GetGenomeRequest) (*Genome, error)
	Update(context.Context, *UpdateGenomeRequest) (*Genome, error)
	Delete(context.Context, *DeleteGenomeRequest) (*empty.Empty, error)
	List(context.Context, *ListGenomeRequest) (*ListGenomeResponse, error)
	BatchCreate(context.Context, *BatchCreateGenomesRequest) (*BatchCreateGenomesResponse, error)
	mustEmbedUnimplementedGenomeServiceServer()
}

// UnimplementedGenomeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenomeServiceServer struct {
}

func (UnimplementedGenomeServiceServer) Create(context.Context, *CreateGenomeRequest) (*Genome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGenomeServiceServer) Get(context.Context, *GetGenomeRequest) (*Genome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGenomeServiceServer) Update(context.Context, *UpdateGenomeRequest) (*Genome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGenomeServiceServer) Delete(context.Context, *DeleteGenomeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGenomeServiceServer) List(context.Context, *ListGenomeRequest) (*ListGenomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGenomeServiceServer) BatchCreate(context.Context, *BatchCreateGenomesRequest) (*BatchCreateGenomesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedGenomeServiceServer) mustEmbedUnimplementedGenomeServiceServer() {}

// UnsafeGenomeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenomeServiceServer will
// result in compilation errors.
type UnsafeGenomeServiceServer interface {
	mustEmbedUnimplementedGenomeServiceServer()
}

func RegisterGenomeServiceServer(s grpc.ServiceRegistrar, srv GenomeServiceServer) {
	s.RegisterService(&GenomeService_ServiceDesc, srv)
}

func _GenomeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenomeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GenomeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenomeServiceServer).Create(ctx, req.(*CreateGenomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenomeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenomeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GenomeService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenomeServiceServer).Get(ctx, req.(*GetGenomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenomeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenomeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GenomeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenomeServiceServer).Update(ctx, req.(*UpdateGenomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenomeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGenomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenomeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GenomeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenomeServiceServer).Delete(ctx, req.(*DeleteGenomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenomeService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGenomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenomeServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GenomeService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenomeServiceServer).List(ctx, req.(*ListGenomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenomeService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateGenomesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenomeServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.GenomeService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenomeServiceServer).BatchCreate(ctx, req.(*BatchCreateGenomesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenomeService_ServiceDesc is the grpc.ServiceDesc for GenomeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenomeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.GenomeService",
	HandlerType: (*GenomeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GenomeService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GenomeService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GenomeService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GenomeService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GenomeService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _GenomeService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// TranscriptServiceClient is the client API for TranscriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranscriptServiceClient interface {
	Create(ctx context.Context, in *CreateTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error)
	Get(ctx context.Context, in *GetTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error)
	Update(ctx context.Context, in *UpdateTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error)
	Delete(ctx context.Context, in *DeleteTranscriptRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *ListTranscriptRequest, opts ...grpc.CallOption) (*ListTranscriptResponse, error)
	BatchCreate(ctx context.Context, in *BatchCreateTranscriptsRequest, opts ...grpc.CallOption) (*BatchCreateTranscriptsResponse, error)
}

type transcriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscriptServiceClient(cc grpc.ClientConnInterface) TranscriptServiceClient {
	return &transcriptServiceClient{cc}
}

func (c *transcriptServiceClient) Create(ctx context.Context, in *CreateTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error) {
	out := new(Transcript)
	err := c.cc.Invoke(ctx, "/entpb.TranscriptService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) Get(ctx context.Context, in *GetTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error) {
	out := new(Transcript)
	err := c.cc.Invoke(ctx, "/entpb.TranscriptService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) Update(ctx context.Context, in *UpdateTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error) {
	out := new(Transcript)
	err := c.cc.Invoke(ctx, "/entpb.TranscriptService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) Delete(ctx context.Context, in *DeleteTranscriptRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/entpb.TranscriptService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) List(ctx context.Context, in *ListTranscriptRequest, opts ...grpc.CallOption) (*ListTranscriptResponse, error) {
	out := new(ListTranscriptResponse)
	err := c.cc.Invoke(ctx, "/entpb.TranscriptService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptServiceClient) BatchCreate(ctx context.Context, in *BatchCreateTranscriptsRequest, opts ...grpc.CallOption) (*BatchCreateTranscriptsResponse, error) {
	out := new(BatchCreateTranscriptsResponse)
	err := c.cc.Invoke(ctx, "/entpb.TranscriptService/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscriptServiceServer is the server API for TranscriptService service.
// All implementations must embed UnimplementedTranscriptServiceServer
// for forward compatibility
type TranscriptServiceServer interface {
	Create(context.Context, *CreateTranscriptRequest) (*Transcript, error)
	Get(context.Context, *GetTranscriptRequest) (*Transcript, error)
	Update(context.Context, *UpdateTranscriptRequest) (*Transcript, error)
	Delete(context.Context, *DeleteTranscriptRequest) (*empty.Empty, error)
	List(context.Context, *ListTranscriptRequest) (*ListTranscriptResponse, error)
	BatchCreate(context.Context, *BatchCreateTranscriptsRequest) (*BatchCreateTranscriptsResponse, error)
	mustEmbedUnimplementedTranscriptServiceServer()
}

// UnimplementedTranscriptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranscriptServiceServer struct {
}

func (UnimplementedTranscriptServiceServer) Create(context.Context, *CreateTranscriptRequest) (*Transcript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTranscriptServiceServer) Get(context.Context, *GetTranscriptRequest) (*Transcript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTranscriptServiceServer) Update(context.Context, *UpdateTranscriptRequest) (*Transcript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTranscriptServiceServer) Delete(context.Context, *DeleteTranscriptRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTranscriptServiceServer) List(context.Context, *ListTranscriptRequest) (*ListTranscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTranscriptServiceServer) BatchCreate(context.Context, *BatchCreateTranscriptsRequest) (*BatchCreateTranscriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedTranscriptServiceServer) mustEmbedUnimplementedTranscriptServiceServer() {}

// UnsafeTranscriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscriptServiceServer will
// result in compilation errors.
type UnsafeTranscriptServiceServer interface {
	mustEmbedUnimplementedTranscriptServiceServer()
}

func RegisterTranscriptServiceServer(s grpc.ServiceRegistrar, srv TranscriptServiceServer) {
	s.RegisterService(&TranscriptService_ServiceDesc, srv)
}

func _TranscriptService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TranscriptService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).Create(ctx, req.(*CreateTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TranscriptService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).Get(ctx, req.(*GetTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TranscriptService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).Update(ctx, req.(*UpdateTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TranscriptService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).Delete(ctx, req.(*DeleteTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TranscriptService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).List(ctx, req.(*ListTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateTranscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.TranscriptService/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptServiceServer).BatchCreate(ctx, req.(*BatchCreateTranscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranscriptService_ServiceDesc is the grpc.ServiceDesc for TranscriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranscriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.TranscriptService",
	HandlerType: (*TranscriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TranscriptService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TranscriptService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TranscriptService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TranscriptService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TranscriptService_List_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _TranscriptService_BatchCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}
