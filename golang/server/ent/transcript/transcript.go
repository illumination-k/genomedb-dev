// Code generated by ent, DO NOT EDIT.

package transcript

const (
	// Label holds the string label denoting the transcript type in the database.
	Label = "transcript"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStrand holds the string denoting the strand field in the database.
	FieldStrand = "strand"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldGenomeSeq holds the string denoting the genome_seq field in the database.
	FieldGenomeSeq = "genome_seq"
	// FieldTranscriptSeq holds the string denoting the transcript_seq field in the database.
	FieldTranscriptSeq = "transcript_seq"
	// FieldCdsSeq holds the string denoting the cds_seq field in the database.
	FieldCdsSeq = "cds_seq"
	// FieldProteinSeq holds the string denoting the protein_seq field in the database.
	FieldProteinSeq = "protein_seq"
	// EdgeGene holds the string denoting the gene edge name in mutations.
	EdgeGene = "gene"
	// EdgeCds holds the string denoting the cds edge name in mutations.
	EdgeCds = "cds"
	// EdgeExon holds the string denoting the exon edge name in mutations.
	EdgeExon = "exon"
	// EdgeFivePrimeUtr holds the string denoting the five_prime_utr edge name in mutations.
	EdgeFivePrimeUtr = "five_prime_utr"
	// EdgeThreePrimeUtr holds the string denoting the three_prime_utr edge name in mutations.
	EdgeThreePrimeUtr = "three_prime_utr"
	// GeneFieldID holds the string denoting the ID field of the Gene.
	GeneFieldID = "geneId"
	// Table holds the table name of the transcript in the database.
	Table = "transcripts"
	// GeneTable is the table that holds the gene relation/edge.
	GeneTable = "transcripts"
	// GeneInverseTable is the table name for the Gene entity.
	// It exists in this package in order to avoid circular dependency with the "gene" package.
	GeneInverseTable = "genes"
	// GeneColumn is the table column denoting the gene relation/edge.
	GeneColumn = "gene_transcripts"
	// CdsTable is the table that holds the cds relation/edge.
	CdsTable = "cds"
	// CdsInverseTable is the table name for the Cds entity.
	// It exists in this package in order to avoid circular dependency with the "cds" package.
	CdsInverseTable = "cds"
	// CdsColumn is the table column denoting the cds relation/edge.
	CdsColumn = "transcript_cds"
	// ExonTable is the table that holds the exon relation/edge.
	ExonTable = "exons"
	// ExonInverseTable is the table name for the Exon entity.
	// It exists in this package in order to avoid circular dependency with the "exon" package.
	ExonInverseTable = "exons"
	// ExonColumn is the table column denoting the exon relation/edge.
	ExonColumn = "transcript_exon"
	// FivePrimeUtrTable is the table that holds the five_prime_utr relation/edge.
	FivePrimeUtrTable = "five_prime_utrs"
	// FivePrimeUtrInverseTable is the table name for the FivePrimeUtr entity.
	// It exists in this package in order to avoid circular dependency with the "fiveprimeutr" package.
	FivePrimeUtrInverseTable = "five_prime_utrs"
	// FivePrimeUtrColumn is the table column denoting the five_prime_utr relation/edge.
	FivePrimeUtrColumn = "transcript_five_prime_utr"
	// ThreePrimeUtrTable is the table that holds the three_prime_utr relation/edge.
	ThreePrimeUtrTable = "three_prime_utrs"
	// ThreePrimeUtrInverseTable is the table name for the ThreePrimeUtr entity.
	// It exists in this package in order to avoid circular dependency with the "threeprimeutr" package.
	ThreePrimeUtrInverseTable = "three_prime_utrs"
	// ThreePrimeUtrColumn is the table column denoting the three_prime_utr relation/edge.
	ThreePrimeUtrColumn = "transcript_three_prime_utr"
)

// Columns holds all SQL columns for transcript fields.
var Columns = []string{
	FieldID,
	FieldStrand,
	FieldType,
	FieldGenomeSeq,
	FieldTranscriptSeq,
	FieldCdsSeq,
	FieldProteinSeq,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transcripts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"gene_transcripts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
