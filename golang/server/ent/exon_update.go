// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"genomedb/ent/exon"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExonUpdate is the builder for updating Exon entities.
type ExonUpdate struct {
	config
	hooks    []Hook
	mutation *ExonMutation
}

// Where appends a list predicates to the ExonUpdate builder.
func (eu *ExonUpdate) Where(ps ...predicate.Exon) *ExonUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetSeqname sets the "seqname" field.
func (eu *ExonUpdate) SetSeqname(s string) *ExonUpdate {
	eu.mutation.SetSeqname(s)
	return eu
}

// SetStart sets the "start" field.
func (eu *ExonUpdate) SetStart(i int32) *ExonUpdate {
	eu.mutation.ResetStart()
	eu.mutation.SetStart(i)
	return eu
}

// AddStart adds i to the "start" field.
func (eu *ExonUpdate) AddStart(i int32) *ExonUpdate {
	eu.mutation.AddStart(i)
	return eu
}

// SetEnd sets the "end" field.
func (eu *ExonUpdate) SetEnd(i int32) *ExonUpdate {
	eu.mutation.ResetEnd()
	eu.mutation.SetEnd(i)
	return eu
}

// AddEnd adds i to the "end" field.
func (eu *ExonUpdate) AddEnd(i int32) *ExonUpdate {
	eu.mutation.AddEnd(i)
	return eu
}

// SetStrand sets the "strand" field.
func (eu *ExonUpdate) SetStrand(s string) *ExonUpdate {
	eu.mutation.SetStrand(s)
	return eu
}

// SetTranscriptID sets the "transcript" edge to the Transcript entity by ID.
func (eu *ExonUpdate) SetTranscriptID(id string) *ExonUpdate {
	eu.mutation.SetTranscriptID(id)
	return eu
}

// SetNillableTranscriptID sets the "transcript" edge to the Transcript entity by ID if the given value is not nil.
func (eu *ExonUpdate) SetNillableTranscriptID(id *string) *ExonUpdate {
	if id != nil {
		eu = eu.SetTranscriptID(*id)
	}
	return eu
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (eu *ExonUpdate) SetTranscript(t *Transcript) *ExonUpdate {
	return eu.SetTranscriptID(t.ID)
}

// Mutation returns the ExonMutation object of the builder.
func (eu *ExonUpdate) Mutation() *ExonMutation {
	return eu.mutation
}

// ClearTranscript clears the "transcript" edge to the Transcript entity.
func (eu *ExonUpdate) ClearTranscript() *ExonUpdate {
	eu.mutation.ClearTranscript()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExonUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExonUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExonUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExonUpdate) check() error {
	if v, ok := eu.mutation.Start(); ok {
		if err := exon.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "Exon.start": %w`, err)}
		}
	}
	if v, ok := eu.mutation.End(); ok {
		if err := exon.EndValidator(v); err != nil {
			return &ValidationError{Name: "end", err: fmt.Errorf(`ent: validator failed for field "Exon.end": %w`, err)}
		}
	}
	return nil
}

func (eu *ExonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exon.Table,
			Columns: exon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exon.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Seqname(); ok {
		_spec.SetField(exon.FieldSeqname, field.TypeString, value)
	}
	if value, ok := eu.mutation.Start(); ok {
		_spec.SetField(exon.FieldStart, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedStart(); ok {
		_spec.AddField(exon.FieldStart, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.End(); ok {
		_spec.SetField(exon.FieldEnd, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedEnd(); ok {
		_spec.AddField(exon.FieldEnd, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.Strand(); ok {
		_spec.SetField(exon.FieldStrand, field.TypeString, value)
	}
	if eu.mutation.TranscriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exon.TranscriptTable,
			Columns: []string{exon.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exon.TranscriptTable,
			Columns: []string{exon.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ExonUpdateOne is the builder for updating a single Exon entity.
type ExonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExonMutation
}

// SetSeqname sets the "seqname" field.
func (euo *ExonUpdateOne) SetSeqname(s string) *ExonUpdateOne {
	euo.mutation.SetSeqname(s)
	return euo
}

// SetStart sets the "start" field.
func (euo *ExonUpdateOne) SetStart(i int32) *ExonUpdateOne {
	euo.mutation.ResetStart()
	euo.mutation.SetStart(i)
	return euo
}

// AddStart adds i to the "start" field.
func (euo *ExonUpdateOne) AddStart(i int32) *ExonUpdateOne {
	euo.mutation.AddStart(i)
	return euo
}

// SetEnd sets the "end" field.
func (euo *ExonUpdateOne) SetEnd(i int32) *ExonUpdateOne {
	euo.mutation.ResetEnd()
	euo.mutation.SetEnd(i)
	return euo
}

// AddEnd adds i to the "end" field.
func (euo *ExonUpdateOne) AddEnd(i int32) *ExonUpdateOne {
	euo.mutation.AddEnd(i)
	return euo
}

// SetStrand sets the "strand" field.
func (euo *ExonUpdateOne) SetStrand(s string) *ExonUpdateOne {
	euo.mutation.SetStrand(s)
	return euo
}

// SetTranscriptID sets the "transcript" edge to the Transcript entity by ID.
func (euo *ExonUpdateOne) SetTranscriptID(id string) *ExonUpdateOne {
	euo.mutation.SetTranscriptID(id)
	return euo
}

// SetNillableTranscriptID sets the "transcript" edge to the Transcript entity by ID if the given value is not nil.
func (euo *ExonUpdateOne) SetNillableTranscriptID(id *string) *ExonUpdateOne {
	if id != nil {
		euo = euo.SetTranscriptID(*id)
	}
	return euo
}

// SetTranscript sets the "transcript" edge to the Transcript entity.
func (euo *ExonUpdateOne) SetTranscript(t *Transcript) *ExonUpdateOne {
	return euo.SetTranscriptID(t.ID)
}

// Mutation returns the ExonMutation object of the builder.
func (euo *ExonUpdateOne) Mutation() *ExonMutation {
	return euo.mutation
}

// ClearTranscript clears the "transcript" edge to the Transcript entity.
func (euo *ExonUpdateOne) ClearTranscript() *ExonUpdateOne {
	euo.mutation.ClearTranscript()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExonUpdateOne) Select(field string, fields ...string) *ExonUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exon entity.
func (euo *ExonUpdateOne) Save(ctx context.Context) (*Exon, error) {
	var (
		err  error
		node *Exon
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Exon)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExonMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExonUpdateOne) SaveX(ctx context.Context) *Exon {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExonUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExonUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExonUpdateOne) check() error {
	if v, ok := euo.mutation.Start(); ok {
		if err := exon.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf(`ent: validator failed for field "Exon.start": %w`, err)}
		}
	}
	if v, ok := euo.mutation.End(); ok {
		if err := exon.EndValidator(v); err != nil {
			return &ValidationError{Name: "end", err: fmt.Errorf(`ent: validator failed for field "Exon.end": %w`, err)}
		}
	}
	return nil
}

func (euo *ExonUpdateOne) sqlSave(ctx context.Context) (_node *Exon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exon.Table,
			Columns: exon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exon.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exon.FieldID)
		for _, f := range fields {
			if !exon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Seqname(); ok {
		_spec.SetField(exon.FieldSeqname, field.TypeString, value)
	}
	if value, ok := euo.mutation.Start(); ok {
		_spec.SetField(exon.FieldStart, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedStart(); ok {
		_spec.AddField(exon.FieldStart, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.End(); ok {
		_spec.SetField(exon.FieldEnd, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedEnd(); ok {
		_spec.AddField(exon.FieldEnd, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.Strand(); ok {
		_spec.SetField(exon.FieldStrand, field.TypeString, value)
	}
	if euo.mutation.TranscriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exon.TranscriptTable,
			Columns: []string{exon.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TranscriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exon.TranscriptTable,
			Columns: []string{exon.TranscriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transcript.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exon{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
