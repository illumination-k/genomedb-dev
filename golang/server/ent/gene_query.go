// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"genomedb/ent/gene"
	"genomedb/ent/genome"
	"genomedb/ent/predicate"
	"genomedb/ent/transcript"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GeneQuery is the builder for querying Gene entities.
type GeneQuery struct {
	config
	limit           *int
	offset          *int
	unique          *bool
	order           []OrderFunc
	fields          []string
	predicates      []predicate.Gene
	withTranscripts *TranscriptQuery
	withGenome      *GenomeQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GeneQuery builder.
func (gq *GeneQuery) Where(ps ...predicate.Gene) *GeneQuery {
	gq.predicates = append(gq.predicates, ps...)
	return gq
}

// Limit adds a limit step to the query.
func (gq *GeneQuery) Limit(limit int) *GeneQuery {
	gq.limit = &limit
	return gq
}

// Offset adds an offset step to the query.
func (gq *GeneQuery) Offset(offset int) *GeneQuery {
	gq.offset = &offset
	return gq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gq *GeneQuery) Unique(unique bool) *GeneQuery {
	gq.unique = &unique
	return gq
}

// Order adds an order step to the query.
func (gq *GeneQuery) Order(o ...OrderFunc) *GeneQuery {
	gq.order = append(gq.order, o...)
	return gq
}

// QueryTranscripts chains the current query on the "transcripts" edge.
func (gq *GeneQuery) QueryTranscripts() *TranscriptQuery {
	query := &TranscriptQuery{config: gq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gene.Table, gene.FieldID, selector),
			sqlgraph.To(transcript.Table, transcript.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gene.TranscriptsTable, gene.TranscriptsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGenome chains the current query on the "genome" edge.
func (gq *GeneQuery) QueryGenome() *GenomeQuery {
	query := &GenomeQuery{config: gq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gene.Table, gene.FieldID, selector),
			sqlgraph.To(genome.Table, genome.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gene.GenomeTable, gene.GenomeColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Gene entity from the query.
// Returns a *NotFoundError when no Gene was found.
func (gq *GeneQuery) First(ctx context.Context) (*Gene, error) {
	nodes, err := gq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gene.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gq *GeneQuery) FirstX(ctx context.Context) *Gene {
	node, err := gq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Gene ID from the query.
// Returns a *NotFoundError when no Gene ID was found.
func (gq *GeneQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = gq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gene.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gq *GeneQuery) FirstIDX(ctx context.Context) string {
	id, err := gq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Gene entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Gene entity is found.
// Returns a *NotFoundError when no Gene entities are found.
func (gq *GeneQuery) Only(ctx context.Context) (*Gene, error) {
	nodes, err := gq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gene.Label}
	default:
		return nil, &NotSingularError{gene.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gq *GeneQuery) OnlyX(ctx context.Context) *Gene {
	node, err := gq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Gene ID in the query.
// Returns a *NotSingularError when more than one Gene ID is found.
// Returns a *NotFoundError when no entities are found.
func (gq *GeneQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = gq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gene.Label}
	default:
		err = &NotSingularError{gene.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gq *GeneQuery) OnlyIDX(ctx context.Context) string {
	id, err := gq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Genes.
func (gq *GeneQuery) All(ctx context.Context) ([]*Gene, error) {
	if err := gq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gq *GeneQuery) AllX(ctx context.Context) []*Gene {
	nodes, err := gq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Gene IDs.
func (gq *GeneQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := gq.Select(gene.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gq *GeneQuery) IDsX(ctx context.Context) []string {
	ids, err := gq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gq *GeneQuery) Count(ctx context.Context) (int, error) {
	if err := gq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gq *GeneQuery) CountX(ctx context.Context) int {
	count, err := gq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gq *GeneQuery) Exist(ctx context.Context) (bool, error) {
	if err := gq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gq *GeneQuery) ExistX(ctx context.Context) bool {
	exist, err := gq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GeneQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gq *GeneQuery) Clone() *GeneQuery {
	if gq == nil {
		return nil
	}
	return &GeneQuery{
		config:          gq.config,
		limit:           gq.limit,
		offset:          gq.offset,
		order:           append([]OrderFunc{}, gq.order...),
		predicates:      append([]predicate.Gene{}, gq.predicates...),
		withTranscripts: gq.withTranscripts.Clone(),
		withGenome:      gq.withGenome.Clone(),
		// clone intermediate query.
		sql:    gq.sql.Clone(),
		path:   gq.path,
		unique: gq.unique,
	}
}

// WithTranscripts tells the query-builder to eager-load the nodes that are connected to
// the "transcripts" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GeneQuery) WithTranscripts(opts ...func(*TranscriptQuery)) *GeneQuery {
	query := &TranscriptQuery{config: gq.config}
	for _, opt := range opts {
		opt(query)
	}
	gq.withTranscripts = query
	return gq
}

// WithGenome tells the query-builder to eager-load the nodes that are connected to
// the "genome" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GeneQuery) WithGenome(opts ...func(*GenomeQuery)) *GeneQuery {
	query := &GenomeQuery{config: gq.config}
	for _, opt := range opts {
		opt(query)
	}
	gq.withGenome = query
	return gq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (gq *GeneQuery) GroupBy(field string, fields ...string) *GeneGroupBy {
	grbuild := &GeneGroupBy{config: gq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gq.sqlQuery(ctx), nil
	}
	grbuild.label = gene.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (gq *GeneQuery) Select(fields ...string) *GeneSelect {
	gq.fields = append(gq.fields, fields...)
	selbuild := &GeneSelect{GeneQuery: gq}
	selbuild.label = gene.Label
	selbuild.flds, selbuild.scan = &gq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a GeneSelect configured with the given aggregations.
func (gq *GeneQuery) Aggregate(fns ...AggregateFunc) *GeneSelect {
	return gq.Select().Aggregate(fns...)
}

func (gq *GeneQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gq.fields {
		if !gene.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gq.path != nil {
		prev, err := gq.path(ctx)
		if err != nil {
			return err
		}
		gq.sql = prev
	}
	return nil
}

func (gq *GeneQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Gene, error) {
	var (
		nodes       = []*Gene{}
		withFKs     = gq.withFKs
		_spec       = gq.querySpec()
		loadedTypes = [2]bool{
			gq.withTranscripts != nil,
			gq.withGenome != nil,
		}
	)
	if gq.withGenome != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gene.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Gene).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Gene{config: gq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gq.withTranscripts; query != nil {
		if err := gq.loadTranscripts(ctx, query, nodes,
			func(n *Gene) { n.Edges.Transcripts = []*Transcript{} },
			func(n *Gene, e *Transcript) { n.Edges.Transcripts = append(n.Edges.Transcripts, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withGenome; query != nil {
		if err := gq.loadGenome(ctx, query, nodes, nil,
			func(n *Gene, e *Genome) { n.Edges.Genome = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gq *GeneQuery) loadTranscripts(ctx context.Context, query *TranscriptQuery, nodes []*Gene, init func(*Gene), assign func(*Gene, *Transcript)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Gene)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Transcript(func(s *sql.Selector) {
		s.Where(sql.InValues(gene.TranscriptsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.gene_transcripts
		if fk == nil {
			return fmt.Errorf(`foreign-key "gene_transcripts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "gene_transcripts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GeneQuery) loadGenome(ctx context.Context, query *GenomeQuery, nodes []*Gene, init func(*Gene), assign func(*Gene, *Genome)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Gene)
	for i := range nodes {
		if nodes[i].genome_genes == nil {
			continue
		}
		fk := *nodes[i].genome_genes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(genome.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "genome_genes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gq *GeneQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gq.querySpec()
	_spec.Node.Columns = gq.fields
	if len(gq.fields) > 0 {
		_spec.Unique = gq.unique != nil && *gq.unique
	}
	return sqlgraph.CountNodes(ctx, gq.driver, _spec)
}

func (gq *GeneQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := gq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (gq *GeneQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gene.Table,
			Columns: gene.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: gene.FieldID,
			},
		},
		From:   gq.sql,
		Unique: true,
	}
	if unique := gq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gene.FieldID)
		for i := range fields {
			if fields[i] != gene.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gq *GeneQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gq.driver.Dialect())
	t1 := builder.Table(gene.Table)
	columns := gq.fields
	if len(columns) == 0 {
		columns = gene.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gq.sql != nil {
		selector = gq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gq.unique != nil && *gq.unique {
		selector.Distinct()
	}
	for _, p := range gq.predicates {
		p(selector)
	}
	for _, p := range gq.order {
		p(selector)
	}
	if offset := gq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GeneGroupBy is the group-by builder for Gene entities.
type GeneGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ggb *GeneGroupBy) Aggregate(fns ...AggregateFunc) *GeneGroupBy {
	ggb.fns = append(ggb.fns, fns...)
	return ggb
}

// Scan applies the group-by query and scans the result into the given value.
func (ggb *GeneGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ggb.path(ctx)
	if err != nil {
		return err
	}
	ggb.sql = query
	return ggb.sqlScan(ctx, v)
}

func (ggb *GeneGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ggb.fields {
		if !gene.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ggb *GeneGroupBy) sqlQuery() *sql.Selector {
	selector := ggb.sql.Select()
	aggregation := make([]string, 0, len(ggb.fns))
	for _, fn := range ggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ggb.fields)+len(ggb.fns))
		for _, f := range ggb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ggb.fields...)...)
}

// GeneSelect is the builder for selecting fields of Gene entities.
type GeneSelect struct {
	*GeneQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gs *GeneSelect) Aggregate(fns ...AggregateFunc) *GeneSelect {
	gs.fns = append(gs.fns, fns...)
	return gs
}

// Scan applies the selector query and scans the result into the given value.
func (gs *GeneSelect) Scan(ctx context.Context, v any) error {
	if err := gs.prepareQuery(ctx); err != nil {
		return err
	}
	gs.sql = gs.GeneQuery.sqlQuery(ctx)
	return gs.sqlScan(ctx, v)
}

func (gs *GeneSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(gs.fns))
	for _, fn := range gs.fns {
		aggregation = append(aggregation, fn(gs.sql))
	}
	switch n := len(*gs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		gs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		gs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := gs.sql.Query()
	if err := gs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
